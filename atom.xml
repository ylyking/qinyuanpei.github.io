<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[秦元培]]></title>
  <subtitle><![CDATA[做单纯的人，走幸福的路。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://qinyuanpei.com/"/>
  <updated>2015-11-03T06:03:38.000Z</updated>
  <id>http://qinyuanpei.com/</id>
  
  <author>
    <name><![CDATA[秦元培]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[EasyAR尝鲜系列教程之自定义Marker的实现]]></title>
    <link href="http://qinyuanpei.com/2015/11/03/have-a-taste-of-easyar-02/"/>
    <id>http://qinyuanpei.com/2015/11/03/have-a-taste-of-easyar-02/</id>
    <published>2015-11-03T02:23:14.000Z</published>
    <updated>2015-11-03T06:03:38.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;各位朋友大家好，欢迎大家关注我的博客，我是<strong>秦元培</strong>，我的博客地址是<a href="http://qinyuanpei.com" title="秦元培">http://qinyuanpei.com</a>。通过本系列第一篇文章，我们初步了解了EasyAR这个增强现实引擎，这次我们来尝试自己定义一个Marker，这样我们就可以用自己喜欢的图片来作为Marker。因为目前EasyAR文档并不完善，所以下面的这些内容可能更多的是我个人的尝试和探索。如果大家对此感兴趣的话继续往下看否则就不要往下看了，因为我担心在官方正式文档出来以后大家可能会骂我啊。好了，对这个话题感兴趣的朋友就请继续往下看吧！</p>
<a id="more"></a>
<h1 id="EasyAR的基本流程">EasyAR的基本流程</h1><p>&emsp;&emsp;首先我们来看看官方给出的一张EasyAR的基本流程示意图：<br><img src="http://img.blog.csdn.net/20151103110413664" alt="EasyAR基本流程示意图"><br>在这张流程图，当中作为开发者的我们此刻需要关注的Target这一条线和Frame这条线。前者对应的是如何将普通的图片如.jpg、.png配合JSON文件转化为系统可以识别的Target，后者对应的是我们在识别到Target后要去处理哪些逻辑。在官方文档中我们可以找到这样一段话：</p>
<ul>
<li><strong>创建相机设备、图像追踪器和增强对象（Create CameraDevice and ImageTracker and Augmenter objects）</strong>.</li>
<li><strong>打开相机设备（Open CameraDevice）.</strong></li>
<li><strong>给相机设备附加图像追踪器（Attach ImageTracker to CameraDevice）</strong>.</li>
<li><strong>开始执行相机设备和图形追踪器的相关逻辑（Start CameraDevice and ImageTracker）</strong>.</li>
<li><strong>获得从图像追踪器增强后的帧画面（New frame using Augmenter from ImageTracker）</strong>.</li>
<li><strong>绘制视频和其它的内容（Draw video background and other stuffs）</strong>.</li>
</ul>
<p>这段话基本上就是EasyAR流程示意图的全面解读了，所以我们学习EasyAR可以从这个基本流程来入手，了解这个流程能帮助我们更快地理解API接口，虽然现在官方的API文档依然处在Debug状态下，想到这里简直各种不开心啊！</p>
<h1 id="创建自定义Marker">创建自定义Marker</h1><p>&emsp;&emsp;在了解了EasyAR的基本流程后，我们就来说说如何在EasyAR中创建自定义Marker吧！相信使用过Vuforia的人都知道要创建一个自定义的Marker需要到开发者后台去创建然后下载资源包，这种方式虽然高效、直接，可是因为没有人为地干预过程，所以我们对AR引擎内部究竟做了怎样的处理基本上是一无所知的，换句话说我们大部分的工作都是在做黑箱测试。到了EasyAR这里，一切就变得特别简单，这一点要给EasyAR点个赞。首先在EasyAR中配置Marker是通过StreamingAssets目录下的dataset.json这个文件来实现的：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">images</span>" :</span><br><span class="line">  <span class="value">[</span><br><span class="line">    &#123;</span><br><span class="line">      "<span class="attribute">image</span>" : <span class="value"><span class="string">"mousepad.jpg"</span></span>,</span><br><span class="line">      "<span class="attribute">name</span>" : <span class="value"><span class="string">"mousepad"</span></span><br><span class="line">    </span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "<span class="attribute">image</span>" : <span class="value"><span class="string">"idback.jpg"</span></span>,</span><br><span class="line">      "<span class="attribute">name</span>" : <span class="value"><span class="string">"idback"</span></span>,</span><br><span class="line">      "<span class="attribute">size</span>" : <span class="value">[<span class="number">8.56</span>, <span class="number">5.4</span>]</span>,</span><br><span class="line">      "<span class="attribute">uid</span>" : <span class="value"><span class="string">"todo=uid-string"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>从这个文件中我们可以发现每一张图片都具有某些不同的属性，从目前博主掌握的资料来看，每张图片最重要的两个属性是image和name。其中image是指图片的相对路径，该路径相对于StreamingAssets目录，因为我们做Unity3D游戏开发的时候都知道这个目录下的资源在编译的时候不会被压缩，当导出APK安装包的时候它会被完整的保留到根目录下的assets目录中。同样地，name是指图片的名称即ID，EasyAR正是通过这个ID来和图片资源关联起来的。比如在默认的SDK项目中身份证背面这张图片是和idback这个ID对应的，如图所示，在这里Easy提供了四种存储方案即Assets、App、Absolute、Json。和官方的人交流的时候说可以支持路径和Json字符串两种形式，但是对更加具体的这四种存储方案上的区别和优缺点目前并没有一个确切的说法，所以在这里我们就继续沿用Assets这种存储方案吧！我们可以注意到idback这张图片和mousepad这张图片相比增加了两个属性，即uid和size。size目前基本可以了解为Unity3D中的缩放，因为这个值表示的是在物理空间里的范围大小，单位是米，而我们知道Unity3D里默认的单位就是米，所以这个数值可以暂时理解为Unity3D里的缩放，它对应到下图里的Size，我已经用红色字体标示出来。对于uid这个属性嘛，既然配置文件里都有todo标识出来了，那么我们就姑且认为这是一个暂时没有启用的属性值吧！</p>
<p><img src="http://img.blog.csdn.net/20151103130003544" alt="配置文件和ImagTarget的对应关系"></p>
<p>好了，下面我们来具体看看如何创建一个自定义Markder。</p>
<ul>
<li>首先我们在StreamingAssets目录中添加一张图片ziying.jpg，然后在dataset.json文件中增加该图片的信息。此时ziying.jpg的位置是在StreamingAssets根目录下。如果我们希望把它放在一个自定义的文件夹中，如StreamingAssets/ziying目录下，则需要将ziying的image属性值改为ziying/ziying.jpg，以此类推。</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">images</span>" :</span><br><span class="line">  <span class="value">[</span><br><span class="line">    &#123;</span><br><span class="line">      "<span class="attribute">image</span>" : <span class="value"><span class="string">"mousepad.jpg"</span></span>,</span><br><span class="line">      "<span class="attribute">name</span>" : <span class="value"><span class="string">"mousepad"</span></span><br><span class="line">    </span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "<span class="attribute">image</span>" : <span class="value"><span class="string">"ziying.jpg"</span></span>,</span><br><span class="line">      "<span class="attribute">name</span>" : <span class="value"><span class="string">"ziying"</span></span><br><span class="line">    </span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "<span class="attribute">image</span>" : <span class="value"><span class="string">"idback.jpg"</span></span>,</span><br><span class="line">      "<span class="attribute">name</span>" : <span class="value"><span class="string">"idback"</span></span>,</span><br><span class="line">      "<span class="attribute">size</span>" : <span class="value">[<span class="number">8.56</span>, <span class="number">5.4</span>]</span>,</span><br><span class="line">      "<span class="attribute">uid</span>" : <span class="value"><span class="string">"todo=uid-string"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在Materials目录下新建一个材质，然后找到ziying.jpg将其作为该材质的纹理贴图。</li>
<li>在场景中找到ImageTargetDataSet-idback节点，修改其附加的SimpleImageTargetBehaviour脚本下的Name属性，将其修改为ziying，同时将第二步创建的材质赋给ImageTargetDataSet-idback节点。此时场景效果如图所示，这意味着我们使用手机摄像头来扫描这张图片就可以看到场景中的这个模型啦！</li>
</ul>
<p><img src="http://img.blog.csdn.net/20151103132611641" alt="自定义Markder效果"></p>
<ul>
<li>好了，现在编译这个项目并部署到手机上可以得到我们期望的结果，哈哈，慕容紫英站在桌面上和我一起玩对一个仙剑迷来说是不是特别有趣呢？</li>
</ul>
<p><img src="http://img.blog.csdn.net/20151103134701292" alt="站在手机上的慕容紫英"></p>
<h1 id="总结">总结</h1><p>&emsp;&emsp;到目前为止，EasyAR官方还没有给出一个完整的API文档，所以我们目前能做的研究依然十分有限，在本文中涉及到的部分没有解决的问题，博主会在官方给出文档后第一时间给予解决，希望大家继续关注我的博客！我们现在使用的都是SDK中现成的脚本，如果我们希望自己来设计脚本来满足自己的要求实现某些定制的功能或者是想用原生代码来减少Unity3D这类游戏引擎带来的性能上的损耗以及实现播放视频的功能等等。这些内容博主在稍后会陆续写出来，好了，今天的内容就是这个样子啦！希望大家喜欢。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;各位朋友大家好，欢迎大家关注我的博客，我是<strong>秦元培</strong>，我的博客地址是<a href="http://qinyuanpei.com" title="秦元培">http://qinyuanpei.com</a>。通过本系列第一篇文章，我们初步了解了EasyAR这个增强现实引擎，这次我们来尝试自己定义一个Marker，这样我们就可以用自己喜欢的图片来作为Marker。因为目前EasyAR文档并不完善，所以下面的这些内容可能更多的是我个人的尝试和探索。如果大家对此感兴趣的话继续往下看否则就不要往下看了，因为我担心在官方正式文档出来以后大家可能会骂我啊。好了，对这个话题感兴趣的朋友就请继续往下看吧！</p>]]>
    
    </summary>
    
      <category term="AR" scheme="http://qinyuanpei.com/tags/AR/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="增强现实" scheme="http://qinyuanpei.com/tags/%E5%A2%9E%E5%BC%BA%E7%8E%B0%E5%AE%9E/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/categories/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EasyAR尝鲜系列教程之Hello EasyAR]]></title>
    <link href="http://qinyuanpei.com/2015/10/30/have-a-taste-of-easyar-01/"/>
    <id>http://qinyuanpei.com/2015/10/30/have-a-taste-of-easyar-01/</id>
    <published>2015-10-30T01:44:18.000Z</published>
    <updated>2015-10-30T01:51:52.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;各位朋友，大家好，我是秦元培，欢迎大家关注我的博客，我的博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。从今天起博主将为大家带来EasyAR尝鲜系列教程，本教程适用的对象是增强现实应用开发者和Unity3D游戏开发者，在阅读本教程前请确保具备增强现实应用开发及Unity3D游戏开发的相关基础知识。在本节及后续内容中，博主将以国产增强现实引擎EasyAR为主要开发平台来带领大家一起走进增强现实应用开发的世界，希望大家能够喜欢！</p>
<a id="more"></a>
<h1 id="什么是增强现实？">什么是增强现实？</h1><p>&emsp;&emsp;为了让更多的人了解增强现实，所以在开始本文教程前，我们首先来了解下什么是增强现实。增强现实(Augmented Reality，简称 AR)，它是一种将真实世界信息和虚拟世界信息进行融合和集成的新技术，这种技术的目标是在屏幕上把虚拟世界和现实世界进行叠加并在此基础上进行互动。增强现实是真实世界和虚拟世界的信息集成，具有实时交互性，是在三维尺度空间中增添定位虚拟物体。增强现实技术可广泛应用到军事、医疗、建筑、教育、工程、影视、娱乐等领域。增强现实是新型的人机交互和三维仿真工具，目前已发挥出了重要的作用，具有巨大的应用潜力。</p>
<p><img src="http://img.blog.csdn.net/20151030091422528" alt="增强现实概念图"></p>
<h1 id="增强现实应用现状">增强现实应用现状</h1><p>&emsp;&emsp;目前，增强现实在国内尚处在起步阶段。2012年4月Google发布的Google Class是全球唯一一款真正意义上实现增强现实技术的硬件设备。随着移动设备的普及和相关技术的成熟，增强现实开始逐渐地走进人们的生活。如国内首款聚合了目前移动互联最新增强现实技术的智能手机应用《城市镜头》以及中视典数字科技研发的VRP系统等。AR技术在人工智能、CAD、图形仿真、虚拟通讯、遥感、娱乐、模拟训练等许多领域带来了革命性的变化。<br>目前增强现实相关技术主要有开源社区的<a href="http://www.hitl.washington.edu/artoolkit/" target="_blank" rel="external">ARToolkit</a>、面向商业化解决方案的<a href="http://www.metaio.com/" target="_blank" rel="external">Metaio</a>和<a href="http://developer.vuforia.com/" target="_blank" rel="external">Vuforia</a>等。</p>
<h1 id="国产增强现实引擎EasyAR">国产增强现实引擎EasyAR</h1><p>&emsp;&emsp;EasyAR(Easy Augmented Reality)是视辰信息科技（上海）有限公司的增强现实解决方案系列的子品牌，其含义是希望让增强现实变得简单易实施。EasyAR提供了诸如手机APP互动营销、户外大屏幕互动活动、网络营销互动等形式在内的增强现实互动营销技术和解决方案。著作权归作者所有。EasyAR无需授权、无水印、无识别次数的限制，开放后可免费下载，无需任何费用，是一款完全免费的AR引擎。EasyAR具有强大的跨平台特性可支持Windows、 Mac OS、 Android和iOS等主流平台。从目前的情况来看，EasyAR的SDK是目前市场上同类产品中最为简单易用的，唯一的不足是产品刚发布不久尚未能提供完整的技术文档。</p>
<h1 id="Hello_EasyAR">Hello EasyAR</h1><p>&emsp;&emsp;好了，下面我们以<a href="http://www.easyar.cn/view/index.html" target="_blank" rel="external">EasyAR</a>提供的Unity3D版本SDK为例来学习EasySDK的使用。在开始前请确保你的计算机上正确安装了以下开发工具或者硬件：</p>
<ul>
<li>Unity3D(必选)：主要的开发环境</li>
<li>JDK相关工具(必选)：编译Android应用所需环境</li>
<li>Android SDK(必选)：编译Android应用所需环境</li>
<li>摄像头(可选)：如使用手机进行调试则不需要</li>
</ul>
<p>在完成以上准备工作后：</p>
<ul>
<li>打开<a href="http://www.easyar.cn/view/index.html" target="_blank" rel="external">EasyAR官网</a>并登录官网，我们将在登陆后创建应用以获得开发所需的密钥以及SDK。如果尚未注册可以在注册后完成这一步骤。</li>
</ul>
<p><img src="http://img.blog.csdn.net/20151030002039184" alt="创建应用"></p>
<ul>
<li>点击创建应用，并在这里填入应用的名称和包的名称，此处以“EasyAR测试”和“com.easyar.first”为例，在创建完应用后可以在应用列表中找到当前创建的应用，点击显示可以查看当前应用对应的密钥。</li>
<li>点击“下载EasyAR SDK v1.0.1”完成SDK的下载。</li>
</ul>
<p><img src="http://img.blog.csdn.net/20151030002211382" alt="下载SDK"></p>
<ul>
<li>解压下载的SDK压缩包，找到vc_redist目录安装对应平台的VC++运行库。请注意，即使在你的计算机上安装了VC++运行库，这里依然需要安装。Win8及Win8.1请先使用磁盘清理工具清理系统垃圾，否则可能会出现无法安装的问题。建议使用64位操作系统且安装x86和x64的VC++运行库。</li>
<li>找到SDK压缩包内的package/unity目录下的EasyAR.unitypackage文件并将其导入到Unity3D中。</li>
<li>在Unity3D中找到Scenes目录下的easyar场景并打开该场景，然后找到EasyAR节点名称，在右侧属性窗口中填入应用对应的密钥。</li>
</ul>
<p><img src="http://img.blog.csdn.net/20151030000059604" alt="填入应用程序密钥"></p>
<ul>
<li>打开BuildSetting-&gt;PlayerSetting在右侧属性窗口中填入应用对应的包名。</li>
</ul>
<p><img src="http://img.blog.csdn.net/20151030000451675" alt="填入应用程序包名"></p>
<ul>
<li>SDK默认提供了三张识别图片，我们选择每个人都有的身份证照片作为识别目标，在场景中找到ImageTargetDataSet-idback这个物体，找到它的子节点Cube。这意味着如果我们识别到了身份证照片，那么就会在身份证照片上显示一个Cube。如果大家手头上有自己喜欢的模型，可以将Cube隐藏，然后将模型添加进来，并为其添加VideoPlayerBehaviour.cs脚本。如手头上没有模型，这一步可以忽略。如图是我现在的场景效果：</li>
</ul>
<p><img src="http://img.blog.csdn.net/20151030001126077" alt="加入自定义模型后的效果"></p>
<p>&emsp;&emsp;好了，现在编译程序，将其导出为APK安装包，这样我们就可以在手机上测试EasyAR的效果啦。假如一切顺利的话，在手机上将会看到这样的画面。下面放点运行情况截图供大家参考：</p>
<p><img src="http://img.blog.csdn.net/20151030084253279" alt="截图1"></p>
<p><img src="http://img.blog.csdn.net/20151030084315043" alt="截图2"></p>
<h1 id="问题汇总">问题汇总</h1><p>&emsp;&emsp;作为一款国产的增强现实引擎，目前EasyAR的表现我还是比较满意的，虽然在识别的准确度上无法和国外的同类产品相比，但是它的简单易用确实是做得不错。作为一个程序员尝鲜更像是吃螃蟹，目前发现的问题及解决方案有：</p>
<ul>
<li>编辑器提示DllNotFoundException错误，请安装SDK中对应的VC++运行库。</li>
<li>视频导入失败，Unity3D导入视频需要依赖苹果公司的QuickTime播放器，所以请安装最新版的QuickTime后重试。</li>
<li>在64位计算机上编译的Android应用可以正常运行，在32位计算机上编译的Android应用无法正常运行。具体表现如图</li>
</ul>
<p><img src="http://img.blog.csdn.net/20151030084210601" alt="32位计算机下的问题"></p>
<p>&emsp;&emsp;好了，作为整个系列的第一篇文章，我们至此对EasyAR有了一个较为直观的印象。在接下来的内容中，我们将对SDK中的内容进行更加深入的了解，因此希望大家继续关注我的博客，谢谢大家！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;各位朋友，大家好，我是秦元培，欢迎大家关注我的博客，我的博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。从今天起博主将为大家带来EasyAR尝鲜系列教程，本教程适用的对象是增强现实应用开发者和Unity3D游戏开发者，在阅读本教程前请确保具备增强现实应用开发及Unity3D游戏开发的相关基础知识。在本节及后续内容中，博主将以国产增强现实引擎EasyAR为主要开发平台来带领大家一起走进增强现实应用开发的世界，希望大家能够喜欢！</p>]]>
    
    </summary>
    
      <category term="AR" scheme="http://qinyuanpei.com/tags/AR/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="增强现实" scheme="http://qinyuanpei.com/tags/%E5%A2%9E%E5%BC%BA%E7%8E%B0%E5%AE%9E/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/categories/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[教你一步步实现一个虚拟摇杆]]></title>
    <link href="http://qinyuanpei.com/2015/10/30/step-by-step-to-create-virtual-joystick/"/>
    <id>http://qinyuanpei.com/2015/10/30/step-by-step-to-create-virtual-joystick/</id>
    <published>2015-10-30T01:44:18.000Z</published>
    <updated>2015-10-30T07:06:30.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;各位朋友，大家好，我是秦元培，欢迎大家关注我的博客，我的博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。最近因为项目需要决定尝试自己来实现一个虚拟摇杆，所以在今天的文章中我们的目标是使用uGUI来制作一个可以在移动平台稳定运行的虚拟摇杆(请不要问我为什么不使用NGUI来实现，你说我做个虚拟摇杆有必要在项目里导入那么多的资源嘛23333)。关于使用第三方插件来实现虚拟摇杆，请大家参照我以前写的文章<a href="http://blog.csdn.net/qinyuanpei/article/details/26204177" target="_blank" rel="external">Unity3D游戏开发之使用EasyTouch虚拟摇杆控制人物移动</a>，在这里就不再赘述了。</p>
<a id="more"></a>
<p>&emsp;&emsp;虚拟摇杆这种输入方式相信大家在手机游戏平台上已经相当的熟悉了，首先我们来简单了解下虚拟摇杆的设计原理。虚拟摇杆有一张固定的2D贴图(背景层)和一张可拖动的2D贴图(控制层)构成，默认情况下控制层在背景层的中心，我们称这个位置为初始位置，当移动控制层后移动层的位置会发生变化，此时控制层的当前位置和初始位置两点间可以计算出一个2D向量，通过这个向量我们就可以判断虚拟摇杆的移动方向。在经典的八方向摇杆导航中摇杆中可移动方向被分成了上、左上、右上、下、左下、右下、左、右共8个方向。我们知道根据三角函数可以非常容易地计算出这个2D向量的角度并由此判定摇杆是在向着这8个方向中的哪一个方向移动。在今天的文章中，我们不需要考虑这8个方向，因为我们可以向任何一个方向进行移动。</p>
<p>&emsp;&emsp;好了，首先在场景中创建两个Image组件和一个空的游戏体，然后将这两个Image组件拖拽到这个空的游戏体下使它们称为其子节点。这里需要注意的是这两个Image的层级关系。现在我们来编写脚本，这个脚本将被添加到控制层物体上：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * uGUI虚拟摇杆</span><br><span class="line"> * 作者：秦元培</span><br><span class="line"> * 博客：http://qinyuanpei.com</span><br><span class="line"> * 时间：2015年10月24日</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> JoyStick : MonoBehaviour,IPointerDownHandler, IPointerUpHandler, IDragHandler</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 摇杆最大半径</span></span><br><span class="line">    <span class="comment">/// 以像素为单位</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> JoyStickRadius = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 摇杆重置所诉</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> JoyStickResetSpeed = <span class="number">5.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 当前物体的Transform组件</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">private</span> RectTransform selfTransform;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 是否触摸了虚拟摇杆</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> isTouched = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 虚拟摇杆的默认位置</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">private</span> Vector2 originPosition;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 虚拟摇杆的移动方向</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">private</span> Vector2 touchedAxis;</span><br><span class="line">    <span class="keyword">public</span> Vector2 TouchedAxis</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(touchedAxis.magnitude &lt; JoyStickRadius)</span><br><span class="line">                <span class="keyword">return</span> touchedAxis.normalized / JoyStickRadius;</span><br><span class="line">            <span class="keyword">return</span> touchedAxis.normalized;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 定义触摸开始事件委托 </span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> delegate <span class="keyword">void</span> <span class="title">JoyStickTouchBegin</span><span class="params">(Vector2 vec)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 定义触摸过程事件委托 </span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="vec"&gt;虚拟摇杆的移动方向&lt;/param&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> delegate <span class="keyword">void</span> <span class="title">JoyStickTouchMove</span><span class="params">(Vector2 vec)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 定义触摸结束事件委托</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> delegate <span class="keyword">void</span> <span class="title">JoyStickTouchEnd</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 注册触摸开始事件</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">public</span> event JoyStickTouchBegin OnJoyStickTouchBegin;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 注册触摸过程事件</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">public</span> event JoyStickTouchMove OnJoyStickTouchMove;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 注册触摸结束事件</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">public</span> event JoyStickTouchEnd OnJoyStickTouchEnd;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Start</span> <span class="params">()</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//初始化虚拟摇杆的默认方向</span></span><br><span class="line">        selfTransform = <span class="keyword">this</span>.GetComponent&lt;RectTransform&gt;();</span><br><span class="line">        originPosition = selfTransform.anchoredPosition;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPointerDown</span><span class="params">(PointerEventData eventData)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        isTouched = <span class="keyword">true</span>;</span><br><span class="line">		touchedAxis = GetJoyStickAxis(eventData);</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.OnJoyStickTouchBegin != null)</span><br><span class="line">			<span class="keyword">this</span>.OnJoyStickTouchBegin(TouchedAxis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPointerUp</span><span class="params">(PointerEventData eventData)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        isTouched = <span class="keyword">false</span>;</span><br><span class="line">		selfTransform.anchoredPosition = originPosition;</span><br><span class="line">		touchedAxis = Vector2.zero;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.OnJoyStickTouchEnd != null)</span><br><span class="line">			<span class="keyword">this</span>.OnJoyStickTouchEnd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDrag</span><span class="params">(PointerEventData eventData)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">		touchedAxis = GetJoyStickAxis(eventData);</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.OnJoyStickTouchMove != null)</span><br><span class="line">			<span class="keyword">this</span>.OnJoyStickTouchMove(TouchedAxis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//当虚拟摇杆移动到最大半径时摇杆无法拖动</span></span><br><span class="line">        <span class="comment">//为了确保被控制物体可以继续移动</span></span><br><span class="line">        <span class="comment">//在这里手动触发OnJoyStickTouchMove事件</span></span><br><span class="line">        <span class="keyword">if</span>(isTouched &amp;&amp; touchedAxis.magnitude&gt;=JoyStickRadius)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.OnJoyStickTouchMove != null)</span><br><span class="line">                <span class="keyword">this</span>.OnJoyStickTouchMove(TouchedAxis);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//松开虚拟摇杆后让虚拟摇杆回到默认位置</span></span><br><span class="line">        <span class="keyword">if</span>(selfTransform.anchoredPosition.magnitude &gt; originPosition.magnitude)</span><br><span class="line">            selfTransform.anchoredPosition -= TouchedAxis * Time.deltaTime * JoyStickResetSpeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 返回虚拟摇杆的偏移量</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;returns&gt;The joy stick axis.&lt;/returns&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name="eventData"&gt;Event data.&lt;/param&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Vector2 <span class="title">GetJoyStickAxis</span><span class="params">(PointerEventData eventData)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="comment">//获取手指位置的世界坐标</span></span><br><span class="line">		Vector3 worldPosition;</span><br><span class="line">		<span class="keyword">if</span> (RectTransformUtility.ScreenPointToWorldPointInRectangle (selfTransform,</span><br><span class="line">		         eventData.position, eventData.pressEventCamera, out worldPosition))</span><br><span class="line">			selfTransform.position = worldPosition;</span><br><span class="line">		<span class="comment">//获取摇杆的偏移量</span></span><br><span class="line">		Vector2 touchAxis = selfTransform.anchoredPosition-originPosition;</span><br><span class="line">		<span class="comment">//摇杆偏移量限制</span></span><br><span class="line">		<span class="keyword">if</span>(touchAxis.magnitude &gt;= JoyStickRadius) </span><br><span class="line">		&#123;</span><br><span class="line">			touchAxis = touchAxis.normalized * JoyStickRadius;</span><br><span class="line">			selfTransform.anchoredPosition = touchAxis;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> touchAxis;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在这段脚本中，我们实现了OnPointerDown、OnPointerUp和OnDrag三个uGUI事件接口，然后注册了相关的事件委托，这里借鉴了EasyTouch的设计，可以使得虚拟摇杆的逻辑和角色控制逻辑相互分离。这里的核心方法是GetJoyStickAxis()方法，通过这个方法我们可以获得一个Vector2类型的值，它表示的是未标准化过的虚拟摇杆的偏移量。这里的RectTransformUtility.ScreenPointToWorldPointInRectangle()方法表示将一个屏幕坐标转化为对应RectTransform的世界坐标，RectTransform的anchoredPosition属性表示的是当前元素在场景中的屏幕坐标。我们知道屏幕坐标是以像素为单位的，因此这里使用屏幕坐标可以计算出虚拟摇杆在水平方向和垂直方向上移动了多少个像素，我们以此来作为虚拟摇杆的偏移量衡量指标。TouchedAxis是经过标准化以后的偏移量，我们将把这个值传递到事件委托中以提供给外部来调用。好了，要说的就这些了，没有说到的大家可以看看代码里的注释或者是在博客中给我留言，就是这样啦。</p>
<p>&emsp;&emsp;接下来，我们在场景中添加一个角色模型来测试我们编写的虚拟摇杆，因为在JoyStick中我们已经定义了事件委托，所以在这里就是简单的调用啦。好了，我们一起来看看代码吧！</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Joystick3D.cs</span><br><span class="line"> * 3D模式下的虚拟摇杆测试</span><br><span class="line"> * 作者：秦元培</span><br><span class="line"> * 博客：http://qinyuanpei.com</span><br><span class="line"> * 时间：2015年10月30日</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> JoyStick3D : MonoBehaviour </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> JoyStick js;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Start</span> <span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		js = GameObject.FindObjectOfType&lt;JoyStick&gt; ();</span><br><span class="line">		js.OnJoyStickTouchBegin += OnJoyStickBegin;</span><br><span class="line">		js.OnJoyStickTouchMove += OnJoyStickMove;</span><br><span class="line">		js.OnJoyStickTouchEnd += OnJoyStickEnd;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnJoyStickBegin</span><span class="params">(Vector2 vec)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">"开始触摸虚拟摇杆"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnJoyStickMove</span> <span class="params">(Vector2 vec)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">"正在移动虚拟摇杆"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置角色朝向</span></span><br><span class="line">		Quaternion q = Quaternion.LookRotation (<span class="keyword">new</span> Vector3 (vec.x, <span class="number">0</span>, vec.y));</span><br><span class="line">		transform.rotation = q;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动角色并播放奔跑动画</span></span><br><span class="line">		transform.Translate(Vector3.forward * <span class="number">75f</span> * Time.deltaTime);</span><br><span class="line">		animation.CrossFade(<span class="string">"Run"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnJoyStickEnd</span> <span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">"触摸移动摇杆结束"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//播放默认待机动画</span></span><br><span class="line">		animation.CrossFade(<span class="string">"idle"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        GUI.Label(<span class="keyword">new</span> Rect(<span class="number">30</span>,<span class="number">30</span>,<span class="number">200</span>,<span class="number">30</span>),<span class="string">"3D模式下的虚拟摇杆测试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;最终程序的运行效果如下图所示，我们编写的这个虚拟摇杆可以在手机上完美的运行，欢饮大家来一起测试和吐槽！</p>
<p><img src="http://img.blog.csdn.net/20151030145705436" alt="2D模式演示"></p>
<p><img src="http://img.blog.csdn.net/20151030150441747" alt="3D模式演示"></p>
<p>&emsp;&emsp;好了，今天的内容就是这样啦！欢迎大家继续关注我的博客，希望大家喜欢！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;各位朋友，大家好，我是秦元培，欢迎大家关注我的博客，我的博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。最近因为项目需要决定尝试自己来实现一个虚拟摇杆，所以在今天的文章中我们的目标是使用uGUI来制作一个可以在移动平台稳定运行的虚拟摇杆(请不要问我为什么不使用NGUI来实现，你说我做个虚拟摇杆有必要在项目里导入那么多的资源嘛23333)。关于使用第三方插件来实现虚拟摇杆，请大家参照我以前写的文章<a href="http://blog.csdn.net/qinyuanpei/article/details/26204177">Unity3D游戏开发之使用EasyTouch虚拟摇杆控制人物移动</a>，在这里就不再赘述了。</p>]]>
    
    </summary>
    
      <category term="uGUI" scheme="http://qinyuanpei.com/tags/uGUI/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="虚拟摇杆" scheme="http://qinyuanpei.com/tags/%E8%99%9A%E6%8B%9F%E6%91%87%E6%9D%86/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/categories/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unity3D游戏开发之Unity3D场景编辑器扩展开发]]></title>
    <link href="http://qinyuanpei.com/2015/10/13/extend-unity3d-scene-editor/"/>
    <id>http://qinyuanpei.com/2015/10/13/extend-unity3d-scene-editor/</id>
    <published>2015-10-13T04:59:01.000Z</published>
    <updated>2015-10-14T01:26:50.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天博主想和大家分享的是Unity3D场景编辑器的扩展开发，相关的话题我们在<a href="http://localhost:4000/2015/03/31/unity3d-plugins-development-application-case/" target="_blank" rel="external">Unity3D游戏开发之编辑器扩展程序开发实例</a>这篇文章中我们已经有所涉及，今天博主想特别针对场景编辑器的扩展开发来进行下深入研究。对于一个场景编辑器来说，它主要的作用是3D场景视图中实时显示、输入反馈和相关信息的更新。在Unity3D中提供了Editor、EditorWindow、GUILayout、EditorGUILayout、GUIUtility、EditorGUIUtility、Handles、Event等来完成这些工作。其中基于EditorWindow的这种扩展方式我们已经研究过了，这种扩展方式拥有自己的独立窗口使用OnGUI方法进行界面的绘制。<a id="more"></a>今天我们想说的是基于Editor的这种扩展方式，这种扩展方式只能针对脚本，从脚本内容在Inspector里的显示布局到变量在Scene视图的可视化编辑，它都可以完全胜任。这里特别想说的是Handles和Event这两个类，这两个类分别提供了3D显示和输入反馈的功能，我们下面就来学习如何使用这些类来扩展Unity3D的场景编辑器。</p>
<h1 id="创建一个扩展的Transform组件">创建一个扩展的Transform组件</h1><p>&emsp;&emsp;Transform是Unity3D中一个基本的组件，下面我们来创建一个扩展的Transform组件，该组件可以对游戏体的坐标、旋转、缩放进行重置。首先，我们创建一个ExtendTransform的类，该类继承自Editor类：<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line">using UnityEditor;</span><br><span class="line"></span><br><span class="line">[CustomEditor<span class="params">(typeof<span class="params">(Transform)</span>,<span class="literal">true</span>)</span>]</span><br><span class="line">public class ExtendTransform : Editor </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// Position属性</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    private SerializedProperty mPos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// Scale属性</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    private SerializedProperty mScale;</span><br><span class="line"></span><br><span class="line">    void OnEnable<span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        mPos = serializedObject.FindProperty<span class="params">(<span class="string">"m_LocalPosition"</span>)</span>;</span><br><span class="line">        mScale = serializedObject.FindProperty<span class="params">(<span class="string">"m_LocalScale"</span>)</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// Inspector相关GUI函数</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    public override void OnInspectorGUI<span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        EditorGUIUtility.labelWidth = <span class="number">15</span>;</span><br><span class="line">        <span class="comment">//获取最新的可序列化对象</span></span><br><span class="line">        serializedObject.Update<span class="params">()</span>;</span><br><span class="line">        <span class="comment">//绘制物体的坐标、旋转和缩放</span></span><br><span class="line">        DrawPosition<span class="params">()</span>;</span><br><span class="line">        DrawRotate<span class="params">()</span>;</span><br><span class="line">        DrawScale<span class="params">()</span>;</span><br><span class="line">        <span class="comment">//更新可序列化对象的属性</span></span><br><span class="line">        serializedObject.ApplyModifiedProperties<span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 绘制位置</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    private void DrawPosition<span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUILayout.BeginHorizontal<span class="params">()</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            bool Reset = GUILayout.Button<span class="params">(<span class="string">"P"</span>, GUILayout.Width<span class="params">(<span class="number">20</span>f)</span>)</span>;</span><br><span class="line">            EditorGUILayout.LabelField<span class="params">(<span class="string">"Position"</span>)</span>;</span><br><span class="line">            EditorGUILayout.PropertyField<span class="params">(mPos.FindPropertyRelative<span class="params">(<span class="string">"x"</span>)</span>)</span>;</span><br><span class="line">            EditorGUILayout.PropertyField<span class="params">(mPos.FindPropertyRelative<span class="params">(<span class="string">"y"</span>)</span>)</span>;</span><br><span class="line">            EditorGUILayout.PropertyField<span class="params">(mPos.FindPropertyRelative<span class="params">(<span class="string">"z"</span>)</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span><span class="params">(Reset)</span> mPos.vector3Value = Vector3.zero;</span><br><span class="line">        &#125;</span><br><span class="line">        GUILayout.EndHorizontal<span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 绘制旋转</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    private void DrawRotate<span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 eulerAngles = <span class="params">(<span class="params">(Transform)</span>target)</span>.eulerAngles;</span><br><span class="line">        GUILayout.BeginHorizontal<span class="params">()</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            bool Reset = GUILayout.Button<span class="params">(<span class="string">"R"</span>, GUILayout.Width<span class="params">(<span class="number">20</span>f)</span>)</span>;</span><br><span class="line">            EditorGUILayout.LabelField<span class="params">(<span class="string">"Rotation"</span>, GUILayout.Width<span class="params">(<span class="number">70</span>f)</span>)</span>;</span><br><span class="line">            EditorGUILayout.LabelField<span class="params">(<span class="string">"X"</span>, GUILayout.Width<span class="params">(<span class="number">13</span>f)</span>)</span>;</span><br><span class="line">            float angleX=EditorGUILayout.FloatField<span class="params">(eulerAngles.x, GUILayout.Width<span class="params">(<span class="number">56</span>f)</span>)</span>;</span><br><span class="line">            EditorGUILayout.LabelField<span class="params">(<span class="string">"Y"</span>, GUILayout.Width<span class="params">(<span class="number">13</span>f)</span>)</span>;</span><br><span class="line">            float angleY = EditorGUILayout.FloatField<span class="params">(eulerAngles.y, GUILayout.Width<span class="params">(<span class="number">56</span>f)</span>)</span>;</span><br><span class="line">            EditorGUILayout.LabelField<span class="params">(<span class="string">"Z"</span>, GUILayout.Width<span class="params">(<span class="number">13</span>f)</span>)</span>;</span><br><span class="line">            float angleZ = EditorGUILayout.FloatField<span class="params">(eulerAngles.z, GUILayout.Width<span class="params">(<span class="number">56</span>f)</span>)</span>;</span><br><span class="line">            <span class="params">(<span class="params">(Transform)</span>target)</span>.eulerAngles = new Vector3<span class="params">(angleX, angleY, angleZ)</span>;</span><br><span class="line">            <span class="keyword">if</span><span class="params">(Reset)</span></span><br><span class="line">            &#123;</span><br><span class="line">                eulerAngles = Vector3.zero;</span><br><span class="line">                <span class="params">(<span class="params">(Transform)</span>target)</span>.eulerAngles = Vector3.zero;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        GUILayout.EndHorizontal<span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 绘制缩放</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    private void DrawScale<span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUILayout.BeginHorizontal<span class="params">()</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            bool Reset = GUILayout.Button<span class="params">(<span class="string">"S"</span>, GUILayout.Width<span class="params">(<span class="number">20</span>f)</span>)</span>;</span><br><span class="line">            EditorGUILayout.LabelField<span class="params">(<span class="string">"Scale"</span>)</span>;</span><br><span class="line">            EditorGUILayout.PropertyField<span class="params">(mScale.FindPropertyRelative<span class="params">(<span class="string">"x"</span>)</span>)</span>;</span><br><span class="line">            EditorGUILayout.PropertyField<span class="params">(mScale.FindPropertyRelative<span class="params">(<span class="string">"y"</span>)</span>)</span>;</span><br><span class="line">            EditorGUILayout.PropertyField<span class="params">(mScale.FindPropertyRelative<span class="params">(<span class="string">"z"</span>)</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(Reset)</span> mScale.vector3Value = Vector3.one;</span><br><span class="line">        &#125;</span><br><span class="line">        GUILayout.EndHorizontal<span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;首先我们注意到ExtendTransform继承自Editor，这是我们开发这类编辑器扩展的第一个前提。其次我们注意到在该类的声明位置有这样一个标记:<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[CustomEditor<span class="list">(<span class="keyword">typeof</span><span class="list">(<span class="keyword">Transform</span>)</span>,<span class="literal">true</span>)</span>]</span></span><br></pre></td></tr></table></figure></p>
<p>该标记表明我们这个编辑器扩展是针对Transform组件进行扩展的，即当物体存在Tranform组件时会在编辑器中响应这个编辑器扩展程序。我们在这个编辑器扩展程序中都做了哪些事情呢？第一，我们实现了OnEnable()方法，该方法相当于一个初始化的方法；第二，我们重写了OnOnInspectorGUI()方法，该方法将覆盖默认的Inspector窗口外观。</p>
<p><img src="http://img.blog.csdn.net/20151014090620920" alt="扩展后的Transform"></p>
<p>好了，现在我们点击场景中默认的相机MainCamera可以发现默认的Transform会变成具有重置功能的扩展型Transform。下面我们来介绍这段程序中较为重要的核心内容：</p>
<h2 id="Unity3D中的可序列化对象">Unity3D中的可序列化对象</h2><p>&emsp;&emsp;通常我们所说的序列化是指将一个对象的实例转化为字符串的过程，而在Unity3D中可序列化对象更像是一种智能对象，它可以将脚本中的属性显示在Inspector窗口中，当场景发生变化时这些属性值将自动被更新。例如我们可以定义这样一个简单的脚本：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 定义一个可序列化类</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">[System.Serializable]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> </span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ID;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    <span class="keyword">public</span> Vector3[] Points;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> editable = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> 定义一个简单的脚本</span></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleScript</span> : <span class="title">MonoBehaviour</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> ExampleClass Example;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此时如果我们给场景中的某个物体附加上该脚本，则我们在Inspector窗口可以看到Example类的实例Example将被序列化到编辑器面板中，同时我们可以注意到私有的editable字段并没有被序列化出来，这是因为<strong>在Unity3D中，公有的字段默认支持序列化，私有的字段除非显式的增加[SerializeField]标记，否则都不会被序列化</strong>，这一点希望大家注意。好了，那么我们为什么要讲这部分内容呢，这是因为它和我们下面要讲的<strong>Editor基类中的属性和方法</strong>有着十分密切的关联。</p>
<p><img src="http://img.blog.csdn.net/20151014090701241" alt="Unity3D中的可序列化对象"></p>
<h2 id="Editor基类中的属性和方法">Editor基类中的属性和方法</h2><p>&emsp;&emsp;Editor基类中有两个重要的属性，即target和serializedObject。target表示当前受检查的物体我们可以通过它获得当前物体；而serializedObject表示当前物体的全部可序列化信息，我们可以通过它获得指定的序列化字段及其数值。Editor基类中重要的方法有：</p>
<ul>
<li>OnInspectorGUI():该方法可对Inspector窗口面板进行扩展或者重写，比如我们可以通过DrawDefaultInspector()方法来绘制默认Inspector窗口面板然后在此基础上使用GUILayout或者EditorGUILayout等辅助类进行自定义的绘制。在这个示例中我们对整个面板进行了重写，值得注意的是为了让Inspector窗口面板正常工作，如果要重绘该窗口请确保对该方法进行覆盖。</li>
<li>OnSceneGUI():该方法可对场景视图进行绘制，在实际的使用中可以配合Handles类和Event类来进行网格编辑、地形绘制或高级Gizmos等方面的工作。在本文的第二个示例中，我们将利用这一特性来编写一个用于NPC寻路的路径节点编辑工具。</li>
</ul>
<h2 id="对第一个示例的总结">对第一个示例的总结</h2><p>&emsp;&emsp;在第一个示例中，可以注意到我们使用了FindProperty()方法来获取一个可序列化物体的属性(字段)，然后我们在EditorGUILayout.PropertyField()方法来绘制了各种属性框，这种方式可以实现属性的自动更新。注意到DrawRotate()方法与DrawPositin()及DrawScale()方法在实现方式上略有不同，这是因为Transform组件的Rotation属性是一个Quaternion即四元数的结构，四元数是利用x、y、z、w四个数值来表示物体的三维旋转，这不仅和我们平时习惯的欧拉角相违背而且更为关键的是貌似目前我还没有发现可以直接绘制四元数的API接口，如果有的话希望大家可以告诉我，所以这里我们用了变通的一种方法，即通过Transform的eulerAngles来实现，但是这种方式绘制的属性框大小和EditorGUILayout.PropertyField()方法绘制的属性框大小并不一致，同时我们需要自己去完成属性值的更新。好了，暂时先总结到这里更多的细节大家可以通过代码来了解。</p>
<h1 id="创建一个NPC寻路节点编辑工具">创建一个NPC寻路节点编辑工具</h1><p>&emsp;&emsp;创建这样一个工具的想法来自我实际的工作体验，当我Unity3D中使用的Tween动画库从iTween变成Dotween后，我在使用Dotween的过程中一直没有找到类似于iTweenPath的路径节点编辑工具。作为一个有节操的程序员，去寻找破解版的Dotween Pro这样的事情我是能不干就不干啦，因为我觉得自己有能力做这样一个类似的小工具，所以在一边准备这篇文章的时候，一边开始设计这样一个路径节点编辑工具。相信经过第一个示例的铺垫和相关知识的储备，大家都了解了这些内容，所以这里直接给出代码啦，因为实在是没有多少内容，嘿嘿：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"></span><br><span class="line">[CustomEditor(<span class="keyword">typeof</span>(PatrolNPC))]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PatrolPathEditor</span> : <span class="title">Editor</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 寻路节点</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> Vector3[] paths;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 显示寻路信息的GUI</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> GUIStyle style=<span class="keyword">new</span> GUIStyle();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> 初始化</span></span><br><span class="line">    <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前NPC的寻路路径</span></span><br><span class="line">        paths = ((PatrolNPC)target).Paths;</span><br><span class="line">        <span class="comment">//初始化GUIStyle</span></span><br><span class="line">        style.fontStyle = FontStyle.Normal;</span><br><span class="line">        style.fontSize = <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnSceneGUI</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前NPC的寻路路径</span></span><br><span class="line">        paths = ((PatrolNPC)serializedObject.targetObject).Paths;</span><br><span class="line">        <span class="comment">//设置节点的颜色为红色</span></span><br><span class="line">        Handles.color = Color.red;</span><br><span class="line">        <span class="keyword">if</span>(paths.Length &lt;= <span class="number">0</span> || paths.Length&lt;<span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//在场景中绘制每一个寻路节点</span></span><br><span class="line">        <span class="comment">//可以在场景中编辑节点并将更新至对应的NPC</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paths.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            paths[i] = Handles.PositionHandle(paths[i], Quaternion.identity);</span><br><span class="line">            Handles.SphereCap(i, paths[i], Quaternion.identity, <span class="number">0.25</span>f);</span><br><span class="line">            Handles.Label(paths[i], <span class="string">"PathPoint"</span> + i, style);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; paths.Length &amp;&amp; i + <span class="number">1</span> &lt; paths.Length)</span><br><span class="line">            &#123;</span><br><span class="line">                Handles.DrawLine(paths[i], paths[i + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这里的PatrolNPC是一个可寻路NPC类，基本和这篇文章的内容无关，大家只要知道那个Paths字段是一个Vector3[]就好啦，这样当我们在场景中编辑这些路径节点的时候，对应NPC的路径节点信息就会同步发生更新，这样我们就可以随心所欲地规划NPC的移动路径啦，哈哈。好了，今天的内容就是这样啦，写完熬到这个点真心不容易啊，大家晚安，这是这个小工具在场景编辑器中的效果，嘻嘻，感觉还是蛮不错的吧，反正我是很喜欢就对啦！</p>
<p><img src="http://img.blog.csdn.net/20151014090748963" alt="路径节点编辑工具演示"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;今天博主想和大家分享的是Unity3D场景编辑器的扩展开发，相关的话题我们在<a href="http://localhost:4000/2015/03/31/unity3d-plugins-development-application-case/">Unity3D游戏开发之编辑器扩展程序开发实例</a>这篇文章中我们已经有所涉及，今天博主想特别针对场景编辑器的扩展开发来进行下深入研究。对于一个场景编辑器来说，它主要的作用是3D场景视图中实时显示、输入反馈和相关信息的更新。在Unity3D中提供了Editor、EditorWindow、GUILayout、EditorGUILayout、GUIUtility、EditorGUIUtility、Handles、Event等来完成这些工作。其中基于EditorWindow的这种扩展方式我们已经研究过了，这种扩展方式拥有自己的独立窗口使用OnGUI方法进行界面的绘制。]]>
    
    </summary>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="扩展" scheme="http://qinyuanpei.com/tags/%E6%89%A9%E5%B1%95/"/>
    
      <category term="编辑器" scheme="http://qinyuanpei.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Unity3D中加载外部图片的两种方法]]></title>
    <link href="http://qinyuanpei.com/2015/10/08/2-methods-to-load-image-in-unity3d/"/>
    <id>http://qinyuanpei.com/2015/10/08/2-methods-to-load-image-in-unity3d/</id>
    <published>2015-10-08T07:03:01.000Z</published>
    <updated>2015-10-09T08:49:22.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;各位朋友大家好，我是秦元培，欢迎大家关注我的博客。最近在做项目的过程中遇到这样的一个需求：玩家可以在游戏过程中进行实时存档，在存档过程中会保存当前游戏进度，同时会截取当前游戏画面并加载到游戏存档界面中。当下一次进入游戏的时候，将读取本地存档图片并加载到游戏界面中。这在单机游戏中是特别常见的一种功能，这里主要有两个关键点。首先是截取游戏画面，这个问题大家可以在<a href="http://blog.csdn.net/qinyuanpei/article/details/39185195" target="_blank" rel="external">《Unity3D游戏开发之截屏保存精彩瞬间》</a>这篇文章中找到答案。其次是从本地加载图片，因为这里要保证可读可写，因此传统的Resources.Load()方式和AssetBundle方式均无法实现这样的功能。那么怎样从外部加载图片到游戏中，这就是我们今天要讨论的内容啦。好了，这里介绍两种方法来实现这一目的。</p>
<a id="more"></a>
<h1 id="喜闻乐见的WWW方式">喜闻乐见的WWW方式</h1><p>&emsp;&emsp;喜闻乐见的WWW方式之所以喜闻乐见，这是因为这是我们最为熟悉的一种，我们都知道通过WWW可以从网络上加载文本、图片、音频等形式的内容，那么通过WWW能否加载本地外部（相对于应用程序）资源呢？答案是肯定的，这是因为WWW可以支持http和file两种协议。我们通常接触到的WWW默认都是指http协议，现在我们来说说file协议，该协议可以用来访问本地资源（绝对路径）。例如我们希望加载文件D:\TestFile\pic001.png这个文件，则此时对应的C#脚本为：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求WWW</span></span><br><span class="line">WWW www = new WWW("<span class="keyword">file</span>:<span class="comment">//D:\\TestFile\\pic001.png);</span></span><br><span class="line">yield <span class="keyword">return</span> www;        </span><br><span class="line"><span class="keyword">if</span>(www != null &amp;&amp; string.IsNullOrEmpty(www.<span class="keyword">error</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取Texture</span></span><br><span class="line">    Texture texture=www.texture;   </span><br><span class="line">    <span class="comment">//更多操作...       </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到这里出现了yield return结构，这表示这里使用到了协程，因此我们需要付出的代价就是需要在项目中使用StartCoroutine等协程相关的方法来调用这些协程。虽然在Unity3D中使用协程是件简单的事情，可是如果我们随随便便地使用协程而不注意去维护这些协程，那么这些让我们引以为傲的简单代码可能就会变成我们痛苦不堪的无尽深渊。</p>
<h1 id="亘古不变的传统IO方式">亘古不变的传统IO方式</h1><p>&emsp;&emsp;好了，下面我们隆重推出亘古不变的传统IO方式，这种方式相信大家都没有接触过，所以这里将这种方法和大家分享。既然是传统的IO方式，那么无非就是各种IO流的处理啦。好，我们一起来看下面这段代码：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建文件读取流</span></span><br><span class="line">FileStream fileStream = <span class="keyword">new</span> FileStream(screen, FileMode.Open, FileAccess.Read);</span><br><span class="line">fileStream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line"><span class="comment">//创建文件长度缓冲区</span></span><br><span class="line"><span class="built_in">byte</span>[] bytes = <span class="keyword">new</span> <span class="built_in">byte</span>[fileStream.Length]; </span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line">fileStream.Read(bytes, <span class="number">0</span>, (<span class="built_in">int</span>)fileStream.Length);</span><br><span class="line"><span class="comment">//释放文件读取流</span></span><br><span class="line">fileStream.Close();</span><br><span class="line">fileStream.Dispose();</span><br><span class="line">fileStream = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Texture</span></span><br><span class="line"><span class="built_in">int</span> <span class="variable">width</span>=<span class="number">800</span>;</span><br><span class="line"><span class="built_in">int</span> <span class="variable">height</span>=<span class="number">640</span>;</span><br><span class="line">Texture2D <span class="built_in">texture</span> = <span class="keyword">new</span> Texture2D(<span class="variable">width</span>, <span class="variable">height</span>);</span><br><span class="line"><span class="built_in">texture</span>.LoadImage(bytes);</span><br></pre></td></tr></table></figure>
<p>可以看到在使用这种方式读取图片文件的时候主要是将图片文件转化为byte[]数组，再利用Texture2D的LoadImage方法转化为Unity3D中的Texture2D。这种方法需要在创建过程中传入图片的大小，在这里我们创建了一张800X640的图片。经过博主的研究发现，这种方式加载外部图片相对于使用WWW加载外部图片效率更高，所以如果大家遇到类似的需求，博主个人推荐大家使用这种方式进行加载。</p>
<p>&emsp;&emsp;到目前为止我们解决了如何从外部加载图片到Unity3D中，现在我们回到最开始的问题，我们从外部读取到这些图片以后需要将它们加载到游戏界面中。比如当我们使用UGUI的时候，UGUI中的Image控件需要一个Sprite来作为它的填充内容，那么此时我们就需要将Texture转化为Sprite.号了，下面我们给出一个简单的例子：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line">using System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class TestLoading : MonoBehaviour </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// Image控件</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">private</span> Image <span class="built_in">image</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">void</span> Start () </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">image</span> = <span class="keyword">this</span>.transform.Find(<span class="string">"Image"</span>).GetComponent&lt;Image&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为不同的按钮绑定不同的事件</span></span><br><span class="line">        <span class="keyword">this</span>.transform.Find(<span class="string">"LoadByWWW"</span>).GetComponent&lt;Button&gt;().onClick.AddListener</span><br><span class="line">        (</span><br><span class="line">           delegate()&#123;LoadByWWW();&#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.transform.Find(<span class="string">"LoadByIO"</span>).GetComponent&lt;Button&gt;().onClick.AddListener</span><br><span class="line">        (</span><br><span class="line">          delegate()&#123;LoadByIO();&#125;</span><br><span class="line">        );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 以IO方式进行加载</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> LoadByIO()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> startTime = (<span class="keyword">double</span>)Time.time;</span><br><span class="line">        <span class="comment">//创建文件读取流</span></span><br><span class="line">        FileStream fileStream = <span class="keyword">new</span> FileStream(<span class="string">"D:\\test.jpg"</span>, FileMode.Open, FileAccess.Read);</span><br><span class="line">        fileStream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">        <span class="comment">//创建文件长度缓冲区</span></span><br><span class="line">        <span class="built_in">byte</span>[] bytes = <span class="keyword">new</span> <span class="built_in">byte</span>[fileStream.Length];</span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        fileStream.Read(bytes, <span class="number">0</span>, (<span class="built_in">int</span>)fileStream.Length);</span><br><span class="line">        <span class="comment">//释放文件读取流</span></span><br><span class="line">        fileStream.Close();</span><br><span class="line">        fileStream.Dispose();</span><br><span class="line">        fileStream = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Texture</span></span><br><span class="line">        <span class="built_in">int</span> <span class="variable">width</span> = <span class="number">300</span>;</span><br><span class="line">        <span class="built_in">int</span> <span class="variable">height</span> = <span class="number">372</span>;</span><br><span class="line">        Texture2D <span class="built_in">texture</span> = <span class="keyword">new</span> Texture2D(<span class="variable">width</span>, <span class="variable">height</span>);</span><br><span class="line">        <span class="built_in">texture</span>.LoadImage(bytes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Sprite</span></span><br><span class="line">        Sprite sprite = Sprite.Create(<span class="built_in">texture</span>, <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">texture</span>.<span class="variable">width</span>, <span class="built_in">texture</span>.<span class="variable">height</span>), <span class="keyword">new</span> Vector2(<span class="number">0.5</span>f, <span class="number">0.5</span>f));</span><br><span class="line">        <span class="built_in">image</span>.sprite = sprite;</span><br><span class="line"></span><br><span class="line">        startTime=(<span class="keyword">double</span>)Time.time-startTime;</span><br><span class="line">        Debug.Log(<span class="string">"IO加载用时:"</span> + startTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 以WWW方式进行加载</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> LoadByWWW()</span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(Load());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IEnumerator Load()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> startTime = (<span class="keyword">double</span>)Time.time;</span><br><span class="line">        <span class="comment">//请求WWW</span></span><br><span class="line">        WWW www = <span class="keyword">new</span> WWW(<span class="string">"file://D:\\test.jpg"</span>);</span><br><span class="line">        yield <span class="keyword">return</span> www;        </span><br><span class="line">        <span class="keyword">if</span>(www != <span class="keyword">null</span> &amp;&amp; string.IsNullOrEmpty(www.error))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取Texture</span></span><br><span class="line">            Texture2D <span class="built_in">texture</span>=www.<span class="built_in">texture</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建Sprite</span></span><br><span class="line">            Sprite sprite = Sprite.Create(<span class="built_in">texture</span>, <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">texture</span>.<span class="variable">width</span>, <span class="built_in">texture</span>.<span class="variable">height</span>), <span class="keyword">new</span> Vector2(<span class="number">0.5</span>f, <span class="number">0.5</span>f));</span><br><span class="line">            <span class="built_in">image</span>.sprite = sprite;</span><br><span class="line"></span><br><span class="line">            startTime = (<span class="keyword">double</span>)Time.time - startTime;</span><br><span class="line">            Debug.Log(<span class="string">"WWW加载用时:"</span> + startTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;现在我们运行程序可以发现两种方式均可以让图片加载进来，为了对比两种方式在执行效率上的高低，我们在脚本中加入了相关代码，通过对比可以发现使用IO方式加载一张227k的图片需要的时间为0s，而使用WWW方式加载需要0.0185s，因此传统的IO方式具有更高的效率，建议大家在遇到这类问题时尽可能地使用这种方式。好了，今天的内容就是这样啦，欢迎大家在我的博客中留言、欢迎大家关注和支持我的博客，谢谢大家！</p>
]]></content>
    <summary type="html">
    <![CDATA[各位朋友大家好，我是秦元培，欢迎大家关注我的博客。最近在做项目的过程中遇到这样的一个需求：玩家可以在游戏过程中进行实时存档，在存档过程中会保存当前游戏进度，同时会截取当前游戏画面并加载到游戏存档界面中。当下一次进入游戏的时候，将读取本地存档图片并加载到游戏界面中。这在单机游戏中是特别常见的一种功能，这里主要有两个关键点。首先是截取游戏画面，这个问题大家可以在[《Unity3D游戏开发之截屏保存精彩瞬间》](http://blog.csdn.net/qinyuanpei/article/details/39185195)这篇文章中找到答案。其次是从本地加载图片，因为这里要保证可读可写，因此传统的Resources.Load()方式和AssetBundle方式均无法实现这样的功能。那么怎样从外部加载图片到游戏中，这就是我们今天要讨论的内容啦。好了，这里介绍两种方法来实现这一目的。]]>
    
    </summary>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="uGUI" scheme="http://qinyuanpei.com/tags/uGUI/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/categories/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[做最初的自己]]></title>
    <link href="http://qinyuanpei.com/2015/09/30/go-for-the-first/"/>
    <id>http://qinyuanpei.com/2015/09/30/go-for-the-first/</id>
    <published>2015-09-30T02:19:26.000Z</published>
    <updated>2015-10-09T08:51:10.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;在中秋节这样一个万家团圆的日子，我却再度因为工作的问题和家人发生争执。发生争执的原因简单到习以为常，家人喜欢稳定、安逸的生活，而我却喜欢有挑战、梦想的生活。我不知道梦想对一个二十三岁的人是不是一种奢侈品，我只知道当我住在狭小、拥挤的出租房里的时候，我想努力去拥有一个温暖的家，我不想靠着一张嘴去哗众取宠，我不想刻意地迎合和奉承这个世界，我只想靠我平凡而微薄的努力让我的生活一天天地温暖起来。从小我被告诉要做一个正直、善良的人，可是随着我慢慢地长大，在我的耳边总会听到“要去适应这个社会”这样的话，然而最讽刺的是这样的话常常出自同一人的口中。</p>
<a id="more"></a>
<p>&emsp;&emsp;虽然我知道当今中国的社会是一个人情社会、关系社会，可我就是不愿意把时间浪费在交际应酬这样的事情上，因为我知道人的这一生的时间是非常宝贵的，从小我就看到身边熟悉的人因为各种各样的原因突然离开这个世界，我们每一个人都会面临死亡，所以当我懒得理会这些无聊的事情的时候，我更希望在我喜欢或者关注的事情上投入精力。每次当家人说我应该应该怎么样的时候，我常常假设自己如果按照这样的规划来度过这一生，那么当我衰老直至死亡的那一刻我心里又会想些什么？我讨厌政治和宗教，因为这是由人类自己为人类制造的精神枷锁，在它们涉足的领域常常伴随各种无可争辩的假象或者谎言，这恰恰是我这样一个正直的本性中极度厌恶的部分。长辈们或多或少地喜欢给我这样的年轻人冠以“愤青”这样的荣誉称号，可我做错了什么呢？我无非就是像《皇帝的新装》里的那个小孩，突然说出了一个大家都习以为常的秘密而已，我们从小到大的成长过程其实就是小孩从见到了就要说出来，变成现在见到了习以为常、看在眼里说在心里。人们常常把这种转变当作成熟，可是事实上人们只是变得更加麻木而已。此时此刻我假装麻木想要摆脱这些掩耳盗铃的秘密，长辈们却再度摆出“社会就是这样，你必须要去适应”这样的架势，大概是嫌弃我假装麻木难以入戏需要变得更加虚伪。</p>
<p>&emsp;&emsp;我天生就是一个不会表演的人，从小时候排练舞蹈学习动作到此时此刻需要我去逢场作戏的各种场合，我不会说除了让人高兴还是高兴的话，我不会让喜怒哀乐像变脸、像翻书一样快。长辈们一直希望我变成一个圆滑世故、胸有城府的人，可我听惯了许嵩的《城府》、《别咬我》、《秋千坠》对这些东西天生排斥，所以在长辈们的世界观里，我就变成了一个冥顽不灵、图样图森破的年轻人。长辈们固然是从自己的经验出发，想让作为年轻人的我走上一条平坦舒适的道路，可是这个世界早已在不知不觉中发生着天翻地覆的变化，长辈们的经验获取可以让你顺利通关人生这场游戏，然而缺少了自我探索的旅程未免显得平凡而无趣。我有幸在小学三年级的时候接触计算机，在初中的时候接触互联网，在高中的时候接触编程，然而在这短短的若干年间互联网行业风起云涌、起起伏伏却并非我们的父辈可以理解和掌握。我走进大学的时候社交网站(SNS)开始兴起，以Facebook、Twitter、人人网、新浪微博、腾讯微博等等为代表的社会化平台迅速地占领了整个互联网行业的制高点。或许和70后、80后相比，我们这一代人在这个变化剧烈的时代显得有点生不逢时，可是机遇和挑战总是并存的，当我们无法和前辈们一起成为时代的弄潮儿的时候，我们只有努力去追赶这个时代忙碌的脚步。短短大学四年，我感受到了互联网每天天翻地覆的变化，从SNS到云计算、移动互联网、大数据、物联网再到互联网金融、O2O，这个行业慢慢地渗透到我们的生活中来。曾经我的长辈认为如果依靠政治力量毁灭了百度，则我们完全可以借由政治力量重新创造出来一个百度，可是同样是由政治力量领导的人民网、同样是由政治力量推到台前的邓亚萍，人民网最终依然在这场搜索引擎大战中以失败告终。我们无法访问国外网站并非是我们拥有世界山最先进的互联网技术，而是我们依靠政治力量用流氓一样的手段在全球一体化的今天实施信息领域的闭关锁国。我一直认为互联网行业是政治干预较为稀疏的一个行业，所以在这个行业当中我不会遭遇那些让我厌恶的政治因素，虽然有人聚集的地方就会有政治产生，但是作为互联网基础要素之一的技术是一个相对纯粹的领域，它依靠最为简单的0和1构成了今天丰富多彩的世界，它讲道理、守规矩让我觉得这个领域简单而纯粹。长辈们不理解我为什么会对计算机有这样独特的情结，因为在普通人眼中它就是一个可以娱乐和办公的机器，然而在我眼中它像是我的一位朋友默默地支持着我去解决各种问题。从我高中的时候起我就认定这个行业将会成为我一辈子的一种寄托，我相信技术可以让我们这个世界变得更加美好，这是我永恒的信仰，所以我不会把政治和宗教当成我一生的信仰。</p>
<p>&emsp;&emsp;大学四年里它每天和我如影随形，让我去思考、去创造、去解决，我喜欢这样的一个过程。长辈们认为大学学习什么样的专业并不重要，因为当你从事实际的工作以后注定要去从头学习新的东西不是吗？可是这样的思路通常适用于那些对未来没有目标、随遇而安的人，显然我并不是这样的人，我一直都清楚地知道自己想要做什么，从始至终这个目标由大到小，但是从未有所改变。我的长辈们对互联网、对计算机技术基本都没有过深入的了解，他们从来不愿意去尝试这些新的东西，却习惯于去指责我做出了这样一个他们并不期望的选择。我是一名程序员，可是我从来没有觉得我的工作低人一等，我每天的付出和老师给学生授课、销售员给顾客售货、银行柜员给消费者办理业务、公务员为人民服务……并没有什么不同，我靠自己掌握的技能去解决工作中的问题，我靠自己掌握的知识去帮助更多的人，我并没有觉得我选择了一条错误的道路，难道在安逸中渐渐迷失了自我会让你从此与众不同？曾经和老师一起做艾依河的毕业设计，当时觉得对整个艾依河了如指掌，然而每天上下班从宝湖经过的时候却突然发现自己的渺小，我是一个普通人，我想做的事情就是努力让自己变得强大去拥有一个温暖的家，能够让因衰老而疲惫的心有个归宿，不至于在满是迷雾的现实中丢失本心，我就想一直这样简单地生活下去，做正直、正确的事情，做一个温暖、善良的人，做最初的自己。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;在中秋节这样一个万家团圆的日子，我却再度因为工作的问题和家人发生争执。发生争执的原因简单到习以为常，家人喜欢稳定、安逸的生活，而我却喜欢有挑战、梦想的生活。我不知道梦想对一个二十三岁的人是不是一种奢侈品，我只知道当我住在狭小、拥挤的出租房里的时候，我想努力去拥有一个温暖的家，我不想靠着一张嘴去哗众取宠，我不想刻意地迎合和奉承这个世界，我只想靠我平凡而微薄的努力让我的生活一天天地温暖起来。从小我被告诉要做一个正直、善良的人，可是随着我慢慢地长大，在我的耳边总会听到“要去适应这个社会”这样的话，然而最讽刺的是这样的话常常出自同一人的口中。</p>]]>
    
    </summary>
    
      <category term="人生" scheme="http://qinyuanpei.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="梦想" scheme="http://qinyuanpei.com/tags/%E6%A2%A6%E6%83%B3/"/>
    
      <category term="生活" scheme="http://qinyuanpei.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="生活感悟" scheme="http://qinyuanpei.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unity3D游戏场景优化系列之批处理]]></title>
    <link href="http://qinyuanpei.com/2015/09/07/patching-in-unity3d-to-reduce-the-drawcall/"/>
    <id>http://qinyuanpei.com/2015/09/07/patching-in-unity3d-to-reduce-the-drawcall/</id>
    <published>2015-09-07T02:59:13.000Z</published>
    <updated>2015-10-10T01:27:18.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;各位朋友大家好，我是<strong>秦元培</strong>，欢迎大家关注我的博客，我的博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。</p>
<p>&emsp;&emsp;最近开始研究Unity3D游戏场景优化，每次提及游戏优化这个话题的时候，我的脑海中都会浮现出《仙剑奇侠传六》这个让四路泰坦都光荣陨落的神奇游戏，作为一个使用Unity3D引擎进行游戏开发的仙剑玩家，我曾经天真的以为，这款使用Unity3D引擎打造的仙剑二十周年献礼之作，会让我对《仙剑奇侠传》这个系列游戏的未来充满更多期待，然而当游戏真正呈现在我眼前的时候，我感受到了在历代仙剑游戏中从未有过的尴尬和失望，我尴尬的是Unity3D这样一个比较强大的游戏引擎硬生生地被北软玩成了这个鬼样子，我失望的是这部游戏除了剧情和跳跳乐以外并没有什么让人看到希望的东西。</p>
<a id="more"></a>
<p><img src="http://img.blog.csdn.net/20150907104113665" alt="仙剑奇侠传六"></p>
<p><img src="http://img.blog.csdn.net/20150907104145004" alt="不到20帧的优化"></p>
<p>&emsp;&emsp;我知道我这样说会有一堆仙剑玩家指责我说，仙剑本来就是玩剧情的嘛，所以只要剧情好其它的都可以原谅啦。然而我们每一个人都清楚《仙剑奇侠传》是一个RPG游戏，它不是每隔三年出一次新番的GAL动漫、不是每隔三年更新一次的言情小说、更不是每隔三年播放一次的偶像电影。两年前的今天我可以耐着性子玩通关《仙剑奇侠传五》，但是这一次我真的玩不下去了。当一个游戏因为优化问题而获得《仙剑奇侠传六：泰坦陨落》称号的时候，作为一个玩家我真的不想再为这个游戏洗白什么，虽然我曾经深爱过这个游戏。所以言归正传，作为一个程序员，我们还是来做点程序员该做的事情，那么我们今天说什么呢，我们来说说Unity3D里的<a href="http://docs.unity3d.com/Manual/DrawCallBatching.html" target="_blank" rel="external">批处理</a>！</p>
<h3 id="一、什么是批处理？">一、什么是批处理？</h3><p>&emsp;&emsp;我们知道Unity3D在屏幕上绘制一个图形本质上调用<strong>OpneGL</strong>或者<strong>DirectX</strong>这样的API，因此在这个过程中会产生一定程度上的性能消耗。DrawCall是OpenGL中描述绘制次数的一个量，例如一个基本的OpenGL绘制流程是<strong>设置颜色</strong>-&gt;<strong>绘图方式</strong>-&gt;<strong>顶点坐标</strong>-&gt;<strong>绘制</strong>-&gt;<strong>结束</strong>，在绘制的过程中每帧都会重复这个过程，这就是一次DrawCall，所以当游戏中的绘制过程变得复杂的时候，就会带来DrawCall的急剧增加，进而带来游戏的性能问题，反映到游戏表现上就变成了优化问题。那么在Unity3D中采取了什么样的措施来降低DrawCall呢？这就是我们今天要说的批处理，换句话说Unity3D使用了批处理来达到降低DrawCall的目的，批处理希望通过对物体网格的重组来获得更高的绘制效率，试想以下如果将多个物体合并为一个物体，那么在绘制的时候只需要绘制一次就够了，因此从这个角度上来讲这样做肯定是可以降低DrawCall的，更深刻的一种理解是这里体现了一种资源循环调用的思想，接触过Android开发的朋友们一定知道ListView控件可以对其元素进行“缓存”从而提高效率，因为我们可以发现其实ListView是对列表项进行某种程度上的“复用”从而提高了效率，在Unity3D这里同样遵循了这个原理。在Unity3D中进行批处理的一个前提是相同材质的物体可以被合并，如果这些物体使用不同的材质，那么当我们把这些材质对应的纹理打成“图集”以后可以对其进行合并，并且在合并的时候应该是用<strong>Renderer.sharedMaterial</strong> 而非 <strong>Renderer.material</strong>以保证材质是可以共享的。关于DrawCall的相关细节大家从<a href="http://www.zhihu.com/question/29730328" target="_blank" rel="external">这里</a>来了解,博主并未对图形学领域有过深入的研究，因此就不在这里班门弄斧了啊，哈哈！</p>
<h3 id="二、Unity3D中批处理的两种方式">二、Unity3D中批处理的两种方式</h3><p>&emsp;&emsp;在Unity3D中有静态批处理和动态批处理两种方式，下面我们就来分别说说这两种不同的批处理方式！</p>
<h4 id="静态批处理"><strong>静态批处理</strong></h4><p>&emsp;&emsp;静态批处理其实大家都是知道的。为什么这样说呢？因为我们在使用Unity3D的过程中无形中培养了这样一个习惯，那就是将场景中相对来说“静态”的物体都勾选Static选项，这在Unity3D中称为<strong>Static GameObjects</strong>，并且因为这一特性和<a href="http://docs.unity3d.com/Manual/GIIntro.html" target="_blank" rel="external">Lightmapping</a>、<a href="http://docs.unity3d.com/Manual/Navigation.html" target="_blank" rel="external">Navigation</a>、<a href="http://docs.unity3d.com/Manual/class-OffMeshLink.html" target="_blank" rel="external">Off-meshLinks</a>、<a href="http://docs.unity3d.com/Manual/class-ReflectionProbe.html" target="_blank" rel="external">ReflectionProbe</a>、<a href="http://docs.unity3d.com/Manual/OcclusionCulling.html" target="_blank" rel="external">Occluder and Occludee</a>等内容均有着密切的联系，因此说静态批处理大家都是知道的其实一点都为过，和场景优化相关的内容博主会在后续的博客中涉及，希望大家能及时关注我的博客更新。静态批处理允许游戏引擎尽可能多的去降低绘制任意大小的物体所产生的DrawCall，它会占用更多的内存资源和更少的CPU资源，因为它需要额外的内存资源来存储合并后的几何结构，如果在静态批处理之前，如果有几个对象共享相同的几何结构，那么将为每个对象创建一个几何图形，无论是在编辑器还是在运行时。这看起来是个艰难的选择，你需要在内存性能和渲染性能间做出最为正确的选择。在内部，静态批处理是通过将静态对象转换为世界空间，并为它们构建一个大的顶点+索引缓冲区。然后，在同一批中，一系列的“便宜”画调用，一系列的“便宜”，几乎没有任何状态变化之间的。所以在技术上它并不保存“三维的调用”，但它可以节省它们之间的状态变化（这是昂贵的部分）。使用静态批处理非常简单啦，只要勾选物体的Static选项即可！</p>
<h4 id="动态批处理"><strong>动态批处理</strong></h4><p>&emsp;&emsp;相对静态批处理而言，动态批处理的要求更为严格一些，它要求批处理的动态对象具有一定的顶点，所以动态批处理只适用于包含小于900个顶点属性的网格。如果你的着色器使用顶点位置，法线和单光，然后你可以批处理300个顶点的动态对象；而如果你的着色器使用顶点位置，法线，uv0，UV1和切线，那么只能处理180个顶点的动态对象。接下来最为重要的一点，<strong>如果动态对象使用的是不同的材质，那么即使进行了动态批处理从效率上来讲并不会有太大的提升。</strong>如果动态对象采用的是多维子材质，那么批处理是无效的。如果动态对象接收实时光影，同样批处理是无效的。下面展示的是一个将多个物体合并为一个物体的脚本示例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[MenuItem(&#34;ModelTools/&#23558;&#22810;&#20010;&#29289;&#20307;&#21512;&#24182;&#20026;&#19968;&#20010;&#29289;&#20307;&#34;)]&#10;    static void CombineMeshs2()&#10;    &#123;&#10;        //&#22312;&#32534;&#36753;&#22120;&#19979;&#36873;&#20013;&#30340;&#25152;&#26377;&#29289;&#20307;&#10;        object[] objs=Selection.gameObjects;&#10;        if(objs.Length&#60;=0) return;&#10;&#10;        //&#32593;&#26684;&#20449;&#24687;&#25968;&#32452;&#10;        MeshFilter[] meshFilters =new MeshFilter[objs.Length];&#10;        //&#28210;&#26579;&#22120;&#25968;&#32452;&#10;        MeshRenderer[] meshRenderers = new MeshRenderer[objs.Length];&#10;        //&#21512;&#24182;&#23454;&#20363;&#25968;&#32452;&#10;        CombineInstance[] combines = new CombineInstance[objs.Length];&#10;        //&#26448;&#36136;&#25968;&#32452;&#10;        Material[] mats = new Material[objs.Length];&#10;&#10;        for (int i = 0; i &#60; objs.Length; i++)&#10;        &#123;&#10;            //&#33719;&#21462;&#32593;&#26684;&#20449;&#24687;&#10;            meshFilters[i]=((GameObject)objs[i]).GetComponent&#60;MeshFilter&#62;();&#10;            //&#33719;&#21462;&#28210;&#26579;&#22120;&#10;            meshRenderers[i]=((GameObject)objs[i]).GetComponent&#60;MeshRenderer&#62;();&#10;&#10;            //&#33719;&#21462;&#26448;&#36136;&#10;            mats[i] = meshRenderers[i].sharedMaterial;   &#10;            //&#21512;&#24182;&#23454;&#20363;           &#10;            combines[i].mesh = meshFilters[i].sharedMesh;&#10;            combines[i].transform = meshFilters[i].transform.localToWorldMatrix;&#10;        &#125;&#10;&#10;        //&#21019;&#24314;&#26032;&#29289;&#20307;&#10;        GameObject go = new GameObject();&#10;        go.name = &#34;CombinedMesh_&#34; + ((GameObject)objs[0]).name;&#10;&#10;        //&#35774;&#32622;&#32593;&#26684;&#20449;&#24687;&#10;        MeshFilter filter = go.transform.GetComponent&#60;MeshFilter&#62;();&#10;        if (filter == null)&#10;            filter = go.AddComponent&#60;MeshFilter&#62;();&#10;       filter.sharedMesh = new Mesh();&#10;       filter.sharedMesh.CombineMeshes(combines,false);&#10;&#10;       //&#35774;&#32622;&#28210;&#26579;&#22120;&#10;       MeshRenderer render = go.transform.GetComponent&#60;MeshRenderer&#62;();&#10;       if (render == null)&#10;           render = go.AddComponent&#60;MeshRenderer&#62;();&#10;        //&#35774;&#32622;&#26448;&#36136;&#10;        render.sharedMaterials = mats;&#10;    &#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这段脚本的核心是CombineMeshes()方法，该方法有三个参数，第一个参数是合并实例的数组，第二个参数是是否对子物体的网格进行合并，第三个参数是是否共享材质，如果希望物体共享材质则第三个参数为true，否则为false。在我测试的过程中发现，如果选择了对子物体的网格进行合并，那么每个子物体都不能再使用单独的材质，默认会以第一个材质作为合并后物体的材质，下面演示的是合并前的多个物体和合并后的一个物体的对比：</p>
<p><img src="http://img.blog.csdn.net/20150907103347856" alt="合并前"></p>
<p><img src="http://img.blog.csdn.net/20150907103419424" alt="合并后"></p>
<h3 id="三、批处理效率分析">三、批处理效率分析</h3><p>&emsp;&emsp;那么批处理对游戏效率提升究竟有怎样的作用呢？我们来看下面几组测试对比：</p>
<p>&emsp;&emsp;1、三个不同的物体使用同一种材质，不做静态批处理，不做动态批处理：<strong>DrawCall为4、面数为584、顶点数为641</strong></p>
<p>&emsp;&emsp;2、三个不同的物体使用同一种材质，只做静态批处理，不做动态批处理：<strong>DrawCall为2、面数为584、顶点数为641</strong></p>
<p>&emsp;&emsp;3、三个不同的物体使用不同的材质，不做静态批处理，不做动态批处理：<strong>DrawCall为4、面数为584、顶点数为641</strong></p>
<p>&emsp;&emsp;4、三个不同的物体使用不同的材质，只做静态批处理，不做动态批处理：<strong>DrawCall为4、面数为584、顶点数为641</strong></p>
<p>&emsp;&emsp;5、三个不同的物体使用不同的材质，不做静态批处理，只做动态批处理：<strong>DrawCall为4、面数为584、顶点数为641</strong></p>
<p>&emsp;&emsp;6、三个不同的物体使用不同的材质，做静态批处理，做动态批处理：<strong>DrawCall为4、面数为584、顶点数为641</strong></p>
<p>&emsp;&emsp;7、三个不同的物体使用同一种材质，不做静态批处理，只做动态批处理：：<strong>DrawCall为4、面数为584、顶点数为641</strong></p>
<p>&emsp;&emsp;大家可以注意到各组测试结果中，只有第二组的DrawCall降低，这说明只有当不同的物体使用同一种材质时通过批处理可以从一定程度上降低DrawCall，即我们在文章开始提到的尽可能地保证材质共享。昨天下午兴冲冲地将游戏场景里的某些物体进行了动态批处理，但是实际测试的过程中发现DrawCall非常地不稳定，但是在场景中的某些地方DrawCall却可以降得非常低，如果静态批处理和动态批处理都不能对场景产生较好的优化，那么Unity3D游戏场景的优化究竟要从哪里抓起呢？我觉得这是我们每一个人都该用心去探索的地方，毕竟游戏做出来首先要保证能让玩家流畅的玩下去吧，一味的强调引擎、强调画面，却时常忽略引擎使用者的主观能动性，希望把一切问题都交给引擎去解决，这样的思路是错误而落后的，仙剑六的问题完全是用不用心的问题，我常常看到有人在公开场合说仙剑以后要换虚幻三，其实按照北软现在这样的状态，给他们一个虚幻四也不过是然并卵。我在<a href="http://www.zhihu.com/question/29403861" target="_blank" rel="external">知乎</a>上看到了号称15岁就开发次时代游戏的高中生妹子，做出个能称为DEMO的游戏就觉得自己可以搞引擎了，更有甚者随便用DirectX或者OpenGL封装若干函数就敢说自己会做游戏引擎了，呵呵，你确定你的游戏能在别人的电脑或者手机上运行起来吗？优化的重要性可见一斑。</p>
<h3 id="四、小结">四、小结</h3><p>&emsp;&emsp;好了，通过今天这篇文章，我们可以整理出以下观点：<br>&emsp;&emsp;<strong>1、如果不同的物体间共享材质，则可以直接通过静态批处理降低DrawCall</strong><br>&emsp;&emsp;<strong>2、动态批处理并不能降低DrawCall、面数和顶点数（我不会告诉你我昨天傻呵呵地合并了好多场景中的模型，结果面数和顶点数并没有降下来，23333）</strong><br>&emsp;&emsp;<strong>3、不管是静态批处理还是动态批处理都会影响Culiing，这同样是涉及到场景优化的一个概念，好吧，为了让场景的DrawCall降下来我最近可能要研究好多涉及的优化的内容……</strong><br>&emsp;&emsp;那么今天的内容就是这样子了，希望对大家学习Unity3D有所帮助，欢迎大家和我交流这些问题来相互促进，毕竟这才是我写博客最初的目的嘛，哈哈！</p>
<blockquote>
<p>喜欢我的博客请记住我的名字：<strong>秦元培</strong>，我的博客地址是：<a href="http://qinyuanpei.com">http://qinyuanpei.com</a><br>转载请注明出处，本文作者：<strong>秦元培</strong>， 本文出处：<a href="http://blog.csdn.net/qinyuanpei/article/details/48262583" target="_blank" rel="external">http://blog.csdn.net/qinyuanpei/article/details/48262583</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;各位朋友大家好，我是<strong>秦元培</strong>，欢迎大家关注我的博客，我的博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。</p>
<p>&emsp;&emsp;最近开始研究Unity3D游戏场景优化，每次提及游戏优化这个话题的时候，我的脑海中都会浮现出《仙剑奇侠传六》这个让四路泰坦都光荣陨落的神奇游戏，作为一个使用Unity3D引擎进行游戏开发的仙剑玩家，我曾经天真的以为，这款使用Unity3D引擎打造的仙剑二十周年献礼之作，会让我对《仙剑奇侠传》这个系列游戏的未来充满更多期待，然而当游戏真正呈现在我眼前的时候，我感受到了在历代仙剑游戏中从未有过的尴尬和失望，我尴尬的是Unity3D这样一个比较强大的游戏引擎硬生生地被北软玩成了这个鬼样子，我失望的是这部游戏除了剧情和跳跳乐以外并没有什么让人看到希望的东西。</p>]]>
    
    </summary>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="优化" scheme="http://qinyuanpei.com/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="游戏" scheme="http://qinyuanpei.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unity3D游戏开发游戏读/存档在Unity3D中的实现]]></title>
    <link href="http://qinyuanpei.com/2015/08/20/save-and-load-in-unity/"/>
    <id>http://qinyuanpei.com/2015/08/20/save-and-load-in-unity/</id>
    <published>2015-08-20T00:57:10.000Z</published>
    <updated>2015-10-09T08:52:48.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;大家好，我是秦元培，欢迎大家关注我的博客。近期博客的更新频率基本直降到冰点，因为这段时间实在是忙得没有时间来写博客了。今天想和大家分享的内容是RPG游戏中游戏存档的实现，因为最近在做一个RPG游戏的项目，所以遇到这个问题就随时记录下来，在对知识进行总结的同时可以将这种思路或者想法分享给大家，这是一件快乐而幸运的事情。我讨厌写按部就班的技术教程，因为我觉得学习是一种自我的探索行为，如果一切都告诉你了，探索的过程便会变得没有意义了。</p>
<a id="more"></a>
<p>&emsp;&emsp;游戏存档是一种在单机游戏中特别常见的机制，这种机制是你在玩网络游戏的时候无法体验到的，你知道每次玩完一款单机游戏都会把游戏存档保存起来是一种怎样的感觉吗？它就像是一个征战沙场的将军将陪伴自己一生金戈铁马的宝剑静静地收入剑匣，然而每一次打开它的时候都会不由自主的热泪盈眶。人的本性其实就是游戏，我们每一天发生的故事何尝不是一个游戏？有时候让我们怀念的可能并不是游戏本身，而只是搁浅在时光里的那时的我们。好了，游戏存档是我们在游戏世界里雪泥鸿爪，它代表了我们曾经来到过这个世界。以RPG游戏为例，一个一般化的游戏存档应该囊括以下内容：</p>
<ul>
<li>角色信息：指一切表征虚拟角色成长路线的信息，如生命值、魔法值、经验值等等。</li>
<li>道具信息：指一切表征虚拟道具数量或者作用的信息，如药品、道具、装备等等。</li>
<li>场景信息：指一切和游戏场景相关的信息，如场景名称、角色在当前场景中的位置坐标等等。</li>
<li>事件信息：指一切和游戏事件相关的信息，如主线任务、支线任务、触发性事件等等。</li>
</ul>
<p>&emsp;&emsp;从以上信息划分的层次来看，我们可以发现在游戏存档中要储存的信息相对是比较复杂的，那么我们这里不得不说说Unity3D中的数据持久化方案PlayerPrefs。该方案采用的是一种键值型的数据存储方案，支持int、string、float三种基本数据类型，通过键名来获取相对应的数值，当值不存在时将返回一个默认值。这种数据存储方案本质上是将数据写入到一个Xml文件。这种方案如果用来存储简单的信息是没有问题的，可是如果用它来存储游戏存档这样负责的数据结构就显得力不从心了。一个更为重要的问题是在数据持久化的过程中我们希望得到是一个结构化的【游戏存档】实例，显然此时松散的PlayerPrefs是不能满足我们的要求的。因此我们想到了将游戏数据序列化的思路，常见的数据序列化思路主要有Xml和JSON两种形式，在使用Xml的数据序列化方案的时候通常有两种思路，即<strong>手动建立数据实体和数据字符间的对应关系</strong>和<strong>基于XmlSerializer的数据序列化</strong>。其中基于XmlSerializer的数据序列化是利用了[Serializable]这样的语法特性来帮助.NET完成数据实体和数据字符间的对应关系，两种思路本质上一样的。可是我们知道Xml的优点是可读性强，缺点是冗余信息多，因此在权衡了两种方案的利弊后，我决定采用JSON来作为数据序列化的方案，而且JSON在数据实体和数据字符间的对应关系上有着天然的优势，JSON所做的事情不就是将数据实体转化为字符串和从一个字符串中解析出数据实体吗？所以整个方案基本一气呵成。好了，下面我们来看具体的代码实现过程吧！</p>
<h2 id="一、JSON的序列化和反序列化">一、JSON的序列化和反序列化</h2><p>&emsp;&emsp;这里我使用的是Newtonsoft.Json这个类库，相信大家都是知道的了！因此，序列化和反序列化特别简单。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/// &#60;summary&#62;&#10;&#9;/// &#23558;&#19968;&#20010;&#23545;&#35937;&#24207;&#21015;&#21270;&#20026;&#23383;&#31526;&#20018;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The object.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;pObject&#34;&#62;&#23545;&#35937;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;pType&#34;&#62;&#23545;&#35937;&#31867;&#22411;&#60;/param&#62;&#10;&#9;private static string SerializeObject(object pObject)&#10;&#9;&#123;&#10;&#9;&#9;//&#24207;&#21015;&#21270;&#21518;&#30340;&#23383;&#31526;&#20018;&#10;&#9;&#9;string serializedString = string.Empty;&#10;&#9;&#9;//&#20351;&#29992;Json.Net&#36827;&#34892;&#24207;&#21015;&#21270;&#10;&#9;&#9;serializedString = JsonConvert.SerializeObject(pObject);&#10;&#9;&#9;return serializedString;&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#23558;&#19968;&#20010;&#23383;&#31526;&#20018;&#21453;&#24207;&#21015;&#21270;&#20026;&#23545;&#35937;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The object.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;pString&#34;&#62;&#23383;&#31526;&#20018;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;pType&#34;&#62;&#23545;&#35937;&#31867;&#22411;&#60;/param&#62;&#10;&#9;private static object DeserializeObject(string pString,Type pType)&#10;&#9;&#123;&#10;&#9;&#9;//&#21453;&#24207;&#21015;&#21270;&#21518;&#30340;&#23545;&#35937;&#10;&#9;&#9;object deserializedObject = null;&#10;&#9;&#9;//&#20351;&#29992;Json.Net&#36827;&#34892;&#21453;&#24207;&#21015;&#21270;&#10;&#9;&#9;deserializedObject=JsonConvert.DeserializeObject(pString,pType);&#10;&#9;&#9;return deserializedObject;&#10;&#9;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="二、Rijandel加密/解密算法">二、Rijandel加密/解密算法</h2><p>&emsp;&emsp;因为我们这里要做的是一个游戏存档的方案设计，因为考虑到存档数据的安全性，我们可以考虑采用相关的加密/解密算法来实现对序列化后的明文数据进行加密，这样可以从一定程度上保证游戏存档数据的安全性。因为博主并没有深入地研究过加密/解密方面的内容，所以这里仅仅提供一个从MSDN上获取的Rijandel算法，大家感兴趣的话可以自行去研究。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/// &#60;summary&#62;&#10;    /// Rijndael&#21152;&#23494;&#31639;&#27861;&#10;    /// &#60;/summary&#62;&#10;    /// &#60;param name=&#34;pString&#34;&#62;&#24453;&#21152;&#23494;&#30340;&#26126;&#25991;&#60;/param&#62;&#10;    /// &#60;param name=&#34;pKey&#34;&#62;&#23494;&#38053;,&#38271;&#24230;&#21487;&#20197;&#20026;:64&#20301;(byte[8]),128&#20301;(byte[16]),192&#20301;(byte[24]),256&#20301;(byte[32])&#60;/param&#62;&#10;    /// &#60;param name=&#34;iv&#34;&#62;iv&#21521;&#37327;,&#38271;&#24230;&#20026;128&#65288;byte[16])&#60;/param&#62;&#10;    /// &#60;returns&#62;&#60;/returns&#62;&#10;    private static string RijndaelEncrypt(string pString, string pKey)&#10;&#9;&#123;&#10;        //&#23494;&#38053;&#10;        byte[] keyArray = UTF8Encoding.UTF8.GetBytes(pKey);&#10;        //&#24453;&#21152;&#23494;&#26126;&#25991;&#25968;&#32452;&#10;        byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(pString);&#10;&#10;        //Rijndael&#35299;&#23494;&#31639;&#27861;&#10;        RijndaelManaged rDel = new RijndaelManaged();&#10;        rDel.Key = keyArray;&#10;        rDel.Mode = CipherMode.ECB;&#10;        rDel.Padding = PaddingMode.PKCS7;&#10;        ICryptoTransform cTransform = rDel.CreateEncryptor();&#10;&#10;        //&#36820;&#22238;&#21152;&#23494;&#21518;&#30340;&#23494;&#25991;&#10;        byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);&#10;        return Convert.ToBase64String(resultArray, 0, resultArray.Length);&#10;&#9;&#125;&#10;&#10;    /// &#60;summary&#62;&#10;    /// ijndael&#35299;&#23494;&#31639;&#27861;&#10;    /// &#60;/summary&#62;&#10;    /// &#60;param name=&#34;pString&#34;&#62;&#24453;&#35299;&#23494;&#30340;&#23494;&#25991;&#60;/param&#62;&#10;    /// &#60;param name=&#34;pKey&#34;&#62;&#23494;&#38053;,&#38271;&#24230;&#21487;&#20197;&#20026;:64&#20301;(byte[8]),128&#20301;(byte[16]),192&#20301;(byte[24]),256&#20301;(byte[32])&#60;/param&#62;&#10;    /// &#60;param name=&#34;iv&#34;&#62;iv&#21521;&#37327;,&#38271;&#24230;&#20026;128&#65288;byte[16])&#60;/param&#62;&#10;    /// &#60;returns&#62;&#60;/returns&#62;&#10;    private static String RijndaelDecrypt(string pString, string pKey)&#10;&#9;&#123;&#10;        //&#35299;&#23494;&#23494;&#38053;&#10;        byte[] keyArray = UTF8Encoding.UTF8.GetBytes(pKey);&#10;        //&#24453;&#35299;&#23494;&#23494;&#25991;&#25968;&#32452;&#10;        byte[] toEncryptArray = Convert.FromBase64String(pString);&#10;&#10;        //Rijndael&#35299;&#23494;&#31639;&#27861;&#10;        RijndaelManaged rDel = new RijndaelManaged();&#10;        rDel.Key = keyArray;&#10;        rDel.Mode = CipherMode.ECB;&#10;        rDel.Padding = PaddingMode.PKCS7;&#10;        ICryptoTransform cTransform = rDel.CreateDecryptor();&#10;        &#10;        //&#36820;&#22238;&#35299;&#23494;&#21518;&#30340;&#26126;&#25991;&#10;        byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);&#10;        return UTF8Encoding.UTF8.GetString(resultArray);&#10;&#9;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="三、完整代码">三、完整代码</h2><p>&emsp;&emsp;好了，下面给出完整代码，我们这里提供了两个公开的方法GetData()和SetData()以及IO相关的辅助方法，我们在实际使用的时候只需要关注这些方法就可以了！<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/**&#10; * Unity3D&#25968;&#25454;&#25345;&#20037;&#21270;&#36741;&#21161;&#31867;&#10; * &#20316;&#32773;:&#31206;&#20803;&#22521;&#10; * &#26102;&#38388;:2015&#24180;8&#26376;14&#26085;&#10; **/&#10;&#10;using UnityEngine;&#10;using System.Collections;&#10;using System;&#10;using System.IO;&#10;using System.Text;&#10;using System.Security.Cryptography;&#10;using Newtonsoft.Json;&#10;&#10;public static class IOHelper&#10;&#123;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#21028;&#26029;&#25991;&#20214;&#26159;&#21542;&#23384;&#22312;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;public static bool IsFileExists(string fileName)&#10;&#9;&#123;&#10;&#9;&#9;return File.Exists(fileName);&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#21028;&#26029;&#25991;&#20214;&#22841;&#26159;&#21542;&#23384;&#22312;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;public static bool IsDirectoryExists(string fileName)&#10;&#9;&#123;&#10;&#9;&#9;return Directory.Exists(fileName);&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#21019;&#24314;&#19968;&#20010;&#25991;&#26412;&#25991;&#20214;&#9;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;param name=&#34;fileName&#34;&#62;&#25991;&#20214;&#36335;&#24452;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;content&#34;&#62;&#25991;&#20214;&#20869;&#23481;&#60;/param&#62;&#10;&#9;public static void CreateFile(string fileName,string content)&#10;&#9;&#123;&#10;&#9;&#9;StreamWriter streamWriter = File.CreateText(fileName);&#10;&#9;&#9;streamWriter.Write(content);&#10;&#9;&#9;streamWriter.Close();&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#21019;&#24314;&#19968;&#20010;&#25991;&#20214;&#22841;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;public static void CreateDirectory(string fileName)&#10;&#9;&#123;&#10;&#9;&#9;//&#25991;&#20214;&#22841;&#23384;&#22312;&#21017;&#36820;&#22238;&#10;&#9;&#9;if(IsDirectoryExists (fileName))&#10;&#9;&#9;&#9;return;&#10;&#9;&#9;Directory.CreateDirectory(fileName);&#10;&#9;&#125;&#10;&#10;&#9;public static void SetData(string fileName,object pObject)&#10;&#9;&#123;&#10;&#9;&#9;//&#23558;&#23545;&#35937;&#24207;&#21015;&#21270;&#20026;&#23383;&#31526;&#20018;&#10;&#9;&#9;string toSave = SerializeObject(pObject);&#10;&#9;&#9;//&#23545;&#23383;&#31526;&#20018;&#36827;&#34892;&#21152;&#23494;,32&#20301;&#21152;&#23494;&#23494;&#38053;&#10;        toSave = RijndaelEncrypt(toSave, &#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#34;);&#10;&#9;&#9;StreamWriter streamWriter = File.CreateText(fileName);&#10;&#9;&#9;streamWriter.Write(toSave);&#10;&#9;&#9;streamWriter.Close();&#10;&#9;&#125;&#10;&#10;&#9;public static object GetData(string fileName,Type pType)&#10;&#9;&#123;&#10;        StreamReader streamReader = File.OpenText(fileName);&#10;&#9;&#9;string data = streamReader.ReadToEnd();&#10;&#9;&#9;//&#23545;&#25968;&#25454;&#36827;&#34892;&#35299;&#23494;&#65292;32&#20301;&#35299;&#23494;&#23494;&#38053;&#10;        data = RijndaelDecrypt(data, &#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#34;);&#10;&#9;&#9;streamReader.Close();&#10;&#9;&#9;return DeserializeObject(data,pType);&#10;&#9;&#125;&#10;&#9;&#10;    /// &#60;summary&#62;&#10;    /// Rijndael&#21152;&#23494;&#31639;&#27861;&#10;    /// &#60;/summary&#62;&#10;    /// &#60;param name=&#34;pString&#34;&#62;&#24453;&#21152;&#23494;&#30340;&#26126;&#25991;&#60;/param&#62;&#10;    /// &#60;param name=&#34;pKey&#34;&#62;&#23494;&#38053;,&#38271;&#24230;&#21487;&#20197;&#20026;:64&#20301;(byte[8]),128&#20301;(byte[16]),192&#20301;(byte[24]),256&#20301;(byte[32])&#60;/param&#62;&#10;    /// &#60;param name=&#34;iv&#34;&#62;iv&#21521;&#37327;,&#38271;&#24230;&#20026;128&#65288;byte[16])&#60;/param&#62;&#10;    /// &#60;returns&#62;&#60;/returns&#62;&#10;    private static string RijndaelEncrypt(string pString, string pKey)&#10;&#9;&#123;&#10;        //&#23494;&#38053;&#10;        byte[] keyArray = UTF8Encoding.UTF8.GetBytes(pKey);&#10;        //&#24453;&#21152;&#23494;&#26126;&#25991;&#25968;&#32452;&#10;        byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(pString);&#10;&#10;        //Rijndael&#35299;&#23494;&#31639;&#27861;&#10;        RijndaelManaged rDel = new RijndaelManaged();&#10;        rDel.Key = keyArray;&#10;        rDel.Mode = CipherMode.ECB;&#10;        rDel.Padding = PaddingMode.PKCS7;&#10;        ICryptoTransform cTransform = rDel.CreateEncryptor();&#10;&#10;        //&#36820;&#22238;&#21152;&#23494;&#21518;&#30340;&#23494;&#25991;&#10;        byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);&#10;        return Convert.ToBase64String(resultArray, 0, resultArray.Length);&#10;&#9;&#125;&#10;&#10;    /// &#60;summary&#62;&#10;    /// ijndael&#35299;&#23494;&#31639;&#27861;&#10;    /// &#60;/summary&#62;&#10;    /// &#60;param name=&#34;pString&#34;&#62;&#24453;&#35299;&#23494;&#30340;&#23494;&#25991;&#60;/param&#62;&#10;    /// &#60;param name=&#34;pKey&#34;&#62;&#23494;&#38053;,&#38271;&#24230;&#21487;&#20197;&#20026;:64&#20301;(byte[8]),128&#20301;(byte[16]),192&#20301;(byte[24]),256&#20301;(byte[32])&#60;/param&#62;&#10;    /// &#60;param name=&#34;iv&#34;&#62;iv&#21521;&#37327;,&#38271;&#24230;&#20026;128&#65288;byte[16])&#60;/param&#62;&#10;    /// &#60;returns&#62;&#60;/returns&#62;&#10;    private static String RijndaelDecrypt(string pString, string pKey)&#10;&#9;&#123;&#10;        //&#35299;&#23494;&#23494;&#38053;&#10;        byte[] keyArray = UTF8Encoding.UTF8.GetBytes(pKey);&#10;        //&#24453;&#35299;&#23494;&#23494;&#25991;&#25968;&#32452;&#10;        byte[] toEncryptArray = Convert.FromBase64String(pString);&#10;&#10;        //Rijndael&#35299;&#23494;&#31639;&#27861;&#10;        RijndaelManaged rDel = new RijndaelManaged();&#10;        rDel.Key = keyArray;&#10;        rDel.Mode = CipherMode.ECB;&#10;        rDel.Padding = PaddingMode.PKCS7;&#10;        ICryptoTransform cTransform = rDel.CreateDecryptor();&#10;        &#10;        //&#36820;&#22238;&#35299;&#23494;&#21518;&#30340;&#26126;&#25991;&#10;        byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);&#10;        return UTF8Encoding.UTF8.GetString(resultArray);&#10;&#9;&#125;&#10;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#23558;&#19968;&#20010;&#23545;&#35937;&#24207;&#21015;&#21270;&#20026;&#23383;&#31526;&#20018;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The object.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;pObject&#34;&#62;&#23545;&#35937;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;pType&#34;&#62;&#23545;&#35937;&#31867;&#22411;&#60;/param&#62;&#10;&#9;private static string SerializeObject(object pObject)&#10;&#9;&#123;&#10;&#9;&#9;//&#24207;&#21015;&#21270;&#21518;&#30340;&#23383;&#31526;&#20018;&#10;&#9;&#9;string serializedString = string.Empty;&#10;&#9;&#9;//&#20351;&#29992;Json.Net&#36827;&#34892;&#24207;&#21015;&#21270;&#10;&#9;&#9;serializedString = JsonConvert.SerializeObject(pObject);&#10;&#9;&#9;return serializedString;&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#23558;&#19968;&#20010;&#23383;&#31526;&#20018;&#21453;&#24207;&#21015;&#21270;&#20026;&#23545;&#35937;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The object.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;pString&#34;&#62;&#23383;&#31526;&#20018;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;pType&#34;&#62;&#23545;&#35937;&#31867;&#22411;&#60;/param&#62;&#10;&#9;private static object DeserializeObject(string pString,Type pType)&#10;&#9;&#123;&#10;&#9;&#9;//&#21453;&#24207;&#21015;&#21270;&#21518;&#30340;&#23545;&#35937;&#10;&#9;&#9;object deserializedObject = null;&#10;&#9;&#9;//&#20351;&#29992;Json.Net&#36827;&#34892;&#21453;&#24207;&#21015;&#21270;&#10;&#9;&#9;deserializedObject=JsonConvert.DeserializeObject(pString,pType);&#10;&#9;&#9;return deserializedObject;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这里我们的密钥是直接写在代码中的，这样做其实是有风险的，因为一旦我们的项目被反编译，我们这里的密钥就变得很不安全了。这里有两种方法，一种是把密钥暴露给外部方法，即在读取数据和写入数据的时候使用同一个密钥即可，而密钥可以采取由机器MAC值生成的方法，这样每台机器上的密钥都是不同的可以防止数据被破解；其次可以采用DLL混淆的方法让反编译者无法看到代码中的内容，这样就无法获得正确的密钥从而无法获得存档里的内容了。</p>
<h2 id="四、最终效果">四、最终效果</h2><p>好了，最后我们来写一个简单的测试脚本：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;&#10;using System.Collections;&#10;using System.Collections.Generic;&#10;&#10;public class TestSave : MonoBehaviour &#123;&#10;&#10;&#10;    /// &#60;summary&#62;&#10;    /// &#23450;&#20041;&#19968;&#20010;&#27979;&#35797;&#31867;&#10;    /// &#60;/summary&#62;&#10;&#9;public class TestClass&#10;&#9;&#123;&#10;        public string Name = &#34;&#24352;&#19977;&#34;;&#10;&#9;&#9;public float Age = 23.0f;&#10;&#9;&#9;public int Sex = 1;&#10;&#10;&#9;&#9;public List&#60;int&#62; Ints = new List&#60;int&#62; ()&#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;1,&#10;&#9;&#9;&#9;2,&#10;&#9;&#9;&#9;3&#10;&#9;&#9;&#125;;&#10;&#9;&#125;&#10;&#10;&#9;void Start () &#10;&#9;&#123;&#10;        //&#23450;&#20041;&#23384;&#26723;&#36335;&#24452;&#10;&#9;&#9;string dirpath = Application.persistentDataPath + &#34;/Save&#34;;&#10;        //&#21019;&#24314;&#23384;&#26723;&#25991;&#20214;&#22841;&#10;&#9;&#9;IOHelper.CreateDirectory (dirpath);&#10;        //&#23450;&#20041;&#23384;&#26723;&#25991;&#20214;&#36335;&#24452;&#10;&#9;&#9;string filename = dirpath + &#34;/GameData.sav&#34;;&#10;&#9;&#9;TestClass t = new TestClass ();&#10;        //&#20445;&#23384;&#25968;&#25454;&#10;&#9;&#9;IOHelper.SetData (filename,t);&#10;        //&#35835;&#21462;&#25968;&#25454;&#10;&#9;&#9;TestClass t1 = (TestClass)IOHelper.GetData(filename,typeof(TestClass));&#10;&#10;        Debug.Log(t1.Name);&#10;        Debug.Log(t1.Age);&#10;        Debug.Log(t1.Ints);&#10;&#9;&#125;&#10;&#9;&#10;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;脚本执行结果：</p>
<p><img src="http://img.blog.csdn.net/20150819095827562" alt="p1"></p>
<p>&emsp;&emsp;加密后游戏存档：</p>
<p><img src="http://img.blog.csdn.net/20150819095928993" alt="p2"></p>
<p>&emsp;&emsp;好了，这就是今天的内容了，希望大家能够喜欢，有什么问题可以给我留言，谢谢！<br>&emsp;&emsp;感谢风宇冲<a href="http://blog.sina.com.cn/s/blog_471132920101d3kh.html" target="_blank" rel="external">Unity3D教程宝典之两步实现超实用的XML存档</a>一文提供相关思路！</p>
<blockquote>
<p>喜欢我的博客请记住我的名字：<strong>秦元培</strong>，我的博客地址是：<a href="http://qinyuanpei.com">http://qinyuanpei.com</a><br>转载请注明出处，本文作者：<strong>秦元培</strong>， 本文出处：<a href="http://blog.csdn.net/qinyuanpei/article/details/39717795" target="_blank" rel="external">http://blog.csdn.net/qinyuanpei/article/details/39717795</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;大家好，我是秦元培，欢迎大家关注我的博客。近期博客的更新频率基本直降到冰点，因为这段时间实在是忙得没有时间来写博客了。今天想和大家分享的内容是RPG游戏中游戏存档的实现，因为最近在做一个RPG游戏的项目，所以遇到这个问题就随时记录下来，在对知识进行总结的同时可以将这种思路或者想法分享给大家，这是一件快乐而幸运的事情。我讨厌写按部就班的技术教程，因为我觉得学习是一种自我的探索行为，如果一切都告诉你了，探索的过程便会变得没有意义了。</p>]]>
    
    </summary>
    
      <category term="JSON" scheme="http://qinyuanpei.com/tags/JSON/"/>
    
      <category term="加密" scheme="http://qinyuanpei.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SDL游戏开发系列第二话：基本图形的绘制]]></title>
    <link href="http://qinyuanpei.com/2015/07/27/sdl-game-development-02/"/>
    <id>http://qinyuanpei.com/2015/07/27/sdl-game-development-02/</id>
    <published>2015-07-27T00:48:59.000Z</published>
    <updated>2015-10-09T08:55:08.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;各位朋友，大家好，我是秦元培，欢迎大家关注我的博客，我的博客地址是：<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。</p>
<p>&emsp;&emsp;话题紧接上回，在上回我们讲到了SDL的下载、安装和配置并对SDL游戏有了初步的了解。我们知道游戏开发中最为基础的内容是图形的绘制，因此在我们学习SDL游戏开发的过程中我们同样要从最简单的图形绘制开始学习。在2D游戏开发中，精灵（Sprite）是一个基础而核心的内容，具体来讲精灵首先是一张2D图片，精灵的绘制从本质上是图片的绘制，所以这是一个基础的内容。因为精灵在2D游戏中承担着GameObject的重要角色，所以一个图形引擎对精灵的支持好坏会决定游戏设计的最终效果。今天这篇文章主要是通过使用SDL中的SDL_LoadBMP()、SDL_CreateTextureFromSurface()和SDL_RenderCopy()这三个方法来实现在SDL中基本图形的绘制，从整体上尚属较为简单的内容。可是从学习SDL游戏开发的角度来看，一切都知道我们深入地去研究。好了，这就开始吧！</p>
<a id="more"></a>
<p>&emsp;&emsp;从SDL_LoadBMP()这个方法的名称，我们就可以看出这是一个读取BMP位图的方法。BMP是Windows操作系统中最早的图形格式，这种图形格式的容量较大，经常出现在Win32 API中。好了，言归正传，我们下面来看看整个绘制过程：</p>
<blockquote>
<ul>
<li><p>1、首先我们使用SDL_LoadBMP()方法来加载一张BMP位图：</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取一张BMP位图</span></span><br><span class="line">SDL_Surface* m_pSurface=SDL_LoadBMP(<span class="string">"background.bmp"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、接下来我们使用SDL_CreateTextureFromSurface()方法将SDL_Surface类型转化为SDL_Texture类型</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取SDL纹理</span></span><br><span class="line">SDL_Texture* m_pTexture=SDL_CreateTextureFromSurface(g_pRenderer,m_pSurface);</span><br><span class="line"><span class="comment">//释放m_pBackgroundSurface</span></span><br><span class="line">SDL_FreeSurface(m_pSurface);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<pre><code>注意到在这里m_pSurface扮演了一个临时演员的角色。当我们获得了SDL纹理后，它的演员生涯便就此结束了，因此我们需要使用<span class="function"><span class="title">SDL_FreeSurface</span><span class="params">()</span></span>方法来释放它的内存。
</code></pre><blockquote>
<ul>
<li>3、接下来是关键性的一个步骤，我们首先来关注SDL_RenderCopy()的方法定义:  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SDL_RenderCopy(SDL_Renderer * renderer,SDL_Texture * texture,<span class="keyword">const</span> SDL_Rect * srcrect,<span class="keyword">const</span> SDL_Rect * dstrect);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<pre><code>如你所见，该方法的第一个参数和第二个参数我们已经相当熟悉了，即SDL渲染器和SDL纹理。这里想说的是第三个参数srcrect和第四个参数dstrect，这两个参数都是SDL_Rect类型，表示一个矩形范围，它有四个参数，即矩形左上角横坐标、矩形左上角纵坐标、矩形宽度、矩形高度。那么该如何理解这两个参数呢？
</code></pre><blockquote>
<p>   这里我是这样理解的：第一个参数srcrect表示一个裁剪范围，即我们希望绘制图形的一个范围。例如我们现在有一张大小为640*480的图片，当我们使用(0,0,640,480)这样一个矩形对图片进行裁剪时，我们将获得整张图片；当我们使用(320,240,320,240)这个矩形对图片进行裁剪的时，我们将获得整张图片右下角1/4的部分。依次类推。相反地，dstrect则更加类似于一个画布（Canvas）的概念，即我们可以在一个多大的矩形范围内去绘制这样一张图片。</p>
</blockquote>
<p>&emsp;&emsp;一个经典的例子是我们现在一个有一张1124x676的图片，我们希望将其绘制到一个800x640的窗口作为背景图片，那么我们的代码可以这样写：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 添加对SDL的引用 */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;SDL.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明SDL窗口 */</span></span><br><span class="line">SDL_Window *g_pWindow;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明SDL渲染器 */</span></span><br><span class="line">SDL_Renderer *g_pRenderer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明程序入口函数main */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> agrc,<span class="keyword">char</span> *args[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//初始化SDL</span></span><br><span class="line">	<span class="keyword">int</span> SDLInit=SDL_Init(SDL_INIT_EVERYTHING);</span><br><span class="line">	<span class="keyword">if</span>(SDLInit&gt;=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//创建一个SDL窗口</span></span><br><span class="line">		g_pWindow=SDL_CreateWindow(<span class="string">"SDL Game Development-02"</span>,</span><br><span class="line">			SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED,</span><br><span class="line">			<span class="number">800</span>,<span class="number">640</span>,</span><br><span class="line">			SDL_WINDOW_SHOWN);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(g_pWindow!=<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="comment">//创建SDL渲染器</span></span><br><span class="line">			g_pRenderer=SDL_CreateRenderer(g_pWindow,-<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置背景色</span></span><br><span class="line">	SDL_SetRenderDrawColor(g_pRenderer,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>);</span><br><span class="line">	<span class="comment">//渲染器清空</span></span><br><span class="line">	SDL_RenderClear(g_pRenderer);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//读取一张BMP位图</span></span><br><span class="line">	SDL_Surface* m_pSurface=SDL_LoadBMP(<span class="string">"background.bmp"</span>);</span><br><span class="line">	<span class="comment">//获取SDL纹理</span></span><br><span class="line">	SDL_Texture* m_pTexture=SDL_CreateTextureFromSurface(g_pRenderer,m_pSurface);</span><br><span class="line">	<span class="comment">//释放m_pBackgroundSurface</span></span><br><span class="line">	SDL_FreeSurface(m_pSurface);</span><br><span class="line">	<span class="comment">//构造SDL矩形</span></span><br><span class="line">	SDL_Rect* m_pSrcRect=<span class="keyword">new</span> SDL_Rect();</span><br><span class="line">	m_pSrcRect-&gt;x=<span class="number">0</span>;</span><br><span class="line">	m_pSrcRect-&gt;y=<span class="number">0</span>;</span><br><span class="line">	m_pSrcRect-&gt;w=<span class="number">1124</span>;</span><br><span class="line">	m_pSrcRect-&gt;h=<span class="number">676</span>;</span><br><span class="line"></span><br><span class="line">	SDL_Rect* m_pTargetRect=<span class="keyword">new</span> SDL_Rect();</span><br><span class="line">	m_pTargetRect-&gt;x=<span class="number">0</span>;</span><br><span class="line">	m_pTargetRect-&gt;y=<span class="number">0</span>;</span><br><span class="line">	m_pTargetRect-&gt;w=<span class="number">800</span>;</span><br><span class="line">	m_pTargetRect-&gt;h=<span class="number">640</span>;</span><br><span class="line">	<span class="comment">//绘制SDL纹理</span></span><br><span class="line">	SDL_RenderCopy(g_pRenderer,m_pTexture,m_pSrcRect,m_pTargetRect);</span><br><span class="line">	<span class="comment">//显示绘制结果</span></span><br><span class="line">	SDL_RenderPresent(g_pRenderer);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//注意这里增加秒的延迟是为了看到渲染的结果</span></span><br><span class="line">	<span class="comment">//在实际的开发中不应该出现这样的代码因为在运行期间会导致窗口的卡顿</span></span><br><span class="line">	<span class="comment">//正确的做法是使用循环来处理这样一个渲染的过程</span></span><br><span class="line">	SDL_Delay(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//退出</span></span><br><span class="line">	SDL_Quit();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;好了，现在运行这段代码，在运行这段代码前请确保完成了SDL的配置、在Debug目录中存放有一张名为background.bmp的位图文件以及SDL2.dll。如果你准确无误地完成以上注意事项，那么你将毫无意外地看到这样一个画面：</p>
<p><img src="http://img.blog.csdn.net/20150727073802791" alt="SDL游戏开发"></p>
<p>&emsp;&emsp;现在让我们为这个示例增加点有趣的东西，我们知道在游戏设计中一般背景图片的大小是和游戏设计的窗口大小保持一致的，因为这样能够避免图片拉伸的问题。假定我们目前使用的精灵图片素材都是单个精灵的素材，那么我们可以设计这样一个方法来更加自由地绘制图片：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 实现绘制BMP位图的方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawBMP</span><span class="params">(SDL_Renderer* renderer,<span class="keyword">const</span> <span class="keyword">char</span>* fileName,<span class="keyword">int</span> positionX,<span class="keyword">int</span> positionY,<span class="keyword">int</span> textureWidth,<span class="keyword">int</span> textureHeight)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//读取一张BMP位图</span></span><br><span class="line">	SDL_Surface* m_pSurface=SDL_LoadBMP(fileName);</span><br><span class="line">	<span class="comment">//获取SDL纹理</span></span><br><span class="line">	SDL_Texture* m_pTexture=SDL_CreateTextureFromSurface(renderer,m_pSurface);</span><br><span class="line">	<span class="comment">//释放m_pBackgroundSurface</span></span><br><span class="line">	SDL_FreeSurface(m_pSurface);</span><br><span class="line">	<span class="comment">//构造SDL矩形</span></span><br><span class="line">	SDL_Rect* m_pSrcRect=<span class="keyword">new</span> SDL_Rect();</span><br><span class="line">	m_pSrcRect-&gt;x=<span class="number">0</span>;</span><br><span class="line">	m_pSrcRect-&gt;y=<span class="number">0</span>;</span><br><span class="line">	m_pSrcRect-&gt;w=textureWidth;</span><br><span class="line">	m_pSrcRect-&gt;h=textureHeight;</span><br><span class="line"></span><br><span class="line">	SDL_Rect* m_pTargetRect=<span class="keyword">new</span> SDL_Rect();</span><br><span class="line">	m_pTargetRect-&gt;x=positionX;</span><br><span class="line">	m_pTargetRect-&gt;y=positionY;</span><br><span class="line">	m_pTargetRect-&gt;w=textureWidth;</span><br><span class="line">	m_pTargetRect-&gt;h=textureHeight;</span><br><span class="line">	<span class="comment">//绘制SDL纹理</span></span><br><span class="line">	SDL_RenderCopy(renderer,m_pTexture,m_pSrcRect,m_pTargetRect);</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在认为背景图片大小和窗口大小一致的前提下，我们修改下代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 添加对SDL的引用 */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;SDL.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明SDL窗口 */</span></span><br><span class="line">SDL_Window *g_pWindow;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明SDL渲染器 */</span></span><br><span class="line">SDL_Renderer *g_pRenderer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明相关方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawBMP</span><span class="params">(SDL_Renderer* renderer,<span class="keyword">const</span> <span class="keyword">char</span>* fileName,<span class="keyword">int</span> positionX,<span class="keyword">int</span> positionY,<span class="keyword">int</span> textureWidth,<span class="keyword">int</span> textureHeight)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明程序入口函数main */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> agrc,<span class="keyword">char</span> *args[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//初始化SDL</span></span><br><span class="line">	<span class="keyword">int</span> SDLInit=SDL_Init(SDL_INIT_EVERYTHING);</span><br><span class="line">	<span class="keyword">if</span>(SDLInit&gt;=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//创建一个SDL窗口</span></span><br><span class="line">		g_pWindow=SDL_CreateWindow(<span class="string">"SDL Game Development-02"</span>,</span><br><span class="line">			SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED,</span><br><span class="line">			<span class="number">1124</span>,<span class="number">676</span>,</span><br><span class="line">			SDL_WINDOW_SHOWN);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(g_pWindow!=<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="comment">//创建SDL渲染器</span></span><br><span class="line">			g_pRenderer=SDL_CreateRenderer(g_pWindow,-<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置背景色</span></span><br><span class="line">	SDL_SetRenderDrawColor(g_pRenderer,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>);</span><br><span class="line">	<span class="comment">//渲染器清空</span></span><br><span class="line">	SDL_RenderClear(g_pRenderer);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在绘制背景图片时因为我们已通过画图软件获得了该图片的大小为1124*676</span></span><br><span class="line">	<span class="comment">//并且保证图片的大小和窗口大小一致因此我们可以直接构造一个(0,0,1024,676)的矩形来绘制</span></span><br><span class="line">	DrawBMP(g_pRenderer,<span class="string">"background.bmp"</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1124</span>,<span class="number">676</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//接下来我们在窗口中心绘制一个大小为161*400的美少女</span></span><br><span class="line">	DrawBMP(g_pRenderer,<span class="string">"girl.bmp"</span>,<span class="number">1124</span>/<span class="number">2</span>-<span class="number">161</span>/<span class="number">2</span>,<span class="number">676</span>/<span class="number">2</span>-<span class="number">400</span>/<span class="number">2</span>,<span class="number">161</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//显示绘制结果</span></span><br><span class="line">	SDL_RenderPresent(g_pRenderer);</span><br><span class="line"></span><br><span class="line">	SDL_Delay(<span class="number">10000</span>);</span><br><span class="line">	<span class="comment">//退出</span></span><br><span class="line">	SDL_Quit();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实现绘制BMP位图的方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawBMP</span><span class="params">(SDL_Renderer* renderer,<span class="keyword">const</span> <span class="keyword">char</span>* fileName,<span class="keyword">int</span> positionX,<span class="keyword">int</span> positionY,<span class="keyword">int</span> textureWidth,<span class="keyword">int</span> textureHeight)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//读取一张BMP位图</span></span><br><span class="line">	SDL_Surface* m_pSurface=SDL_LoadBMP(fileName);</span><br><span class="line">	<span class="comment">//获取SDL纹理</span></span><br><span class="line">	SDL_Texture* m_pTexture=SDL_CreateTextureFromSurface(renderer,m_pSurface);</span><br><span class="line">	<span class="comment">//释放m_pBackgroundSurface</span></span><br><span class="line">	SDL_FreeSurface(m_pSurface);</span><br><span class="line">	<span class="comment">//构造SDL矩形</span></span><br><span class="line">	SDL_Rect* m_pSrcRect=<span class="keyword">new</span> SDL_Rect();</span><br><span class="line">	m_pSrcRect-&gt;x=<span class="number">0</span>;</span><br><span class="line">	m_pSrcRect-&gt;y=<span class="number">0</span>;</span><br><span class="line">	m_pSrcRect-&gt;w=textureWidth;</span><br><span class="line">	m_pSrcRect-&gt;h=textureHeight;</span><br><span class="line"></span><br><span class="line">	SDL_Rect* m_pTargetRect=<span class="keyword">new</span> SDL_Rect();</span><br><span class="line">	m_pTargetRect-&gt;x=positionX;</span><br><span class="line">	m_pTargetRect-&gt;y=positionY;</span><br><span class="line">	m_pTargetRect-&gt;w=textureWidth;</span><br><span class="line">	m_pTargetRect-&gt;h=textureHeight;</span><br><span class="line">	<span class="comment">//绘制SDL纹理</span></span><br><span class="line">	SDL_RenderCopy(renderer,m_pTexture,m_pSrcRect,m_pTargetRect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20150727073901806" alt="SDL游戏开发"></p>
<p>&emsp;&emsp;现在我们再来运行程序，可以发现在背景图片上绘制了一个美少女，并且这个美少女处于窗口的中心。好了，通过今天的这部分内容我们可以实现在屏幕任意位置绘制图片，这里要注意一个前提，即图片表示的是单个精灵，在绘制过程中不存在裁切和缩放的问题。作为一个有节操的程序员，我们怎么能为了目前的这点成果而止步不前呢？注意到窗口标题上出现了未响应的字样，这是因为我们这里使用了SDL_Delay()这个方法的缘故，该方法会造成程序在运行过程中的卡顿。那么怎么解决这个问题呢？答案是继续博主的SDL游戏开发系列文章，哈哈。开个玩笑啊，我们注意到这里的图片都是静态的缺乏某种交互感，而且窗口中心绘制的美少女的有白色背景的，如果我们希望这里透明该怎么做呢？欲知后事如何，且听下回分解，敬请期待SDL游戏开发系列第三话：让精灵动起来！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;各位朋友，大家好，我是秦元培，欢迎大家关注我的博客，我的博客地址是：<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。</p>
<p>&emsp;&emsp;话题紧接上回，在上回我们讲到了SDL的下载、安装和配置并对SDL游戏有了初步的了解。我们知道游戏开发中最为基础的内容是图形的绘制，因此在我们学习SDL游戏开发的过程中我们同样要从最简单的图形绘制开始学习。在2D游戏开发中，精灵（Sprite）是一个基础而核心的内容，具体来讲精灵首先是一张2D图片，精灵的绘制从本质上是图片的绘制，所以这是一个基础的内容。因为精灵在2D游戏中承担着GameObject的重要角色，所以一个图形引擎对精灵的支持好坏会决定游戏设计的最终效果。今天这篇文章主要是通过使用SDL中的SDL_LoadBMP()、SDL_CreateTextureFromSurface()和SDL_RenderCopy()这三个方法来实现在SDL中基本图形的绘制，从整体上尚属较为简单的内容。可是从学习SDL游戏开发的角度来看，一切都知道我们深入地去研究。好了，这就开始吧！</p>]]>
    
    </summary>
    
      <category term="SDL" scheme="http://qinyuanpei.com/tags/SDL/"/>
    
      <category term="图形" scheme="http://qinyuanpei.com/tags/%E5%9B%BE%E5%BD%A2/"/>
    
      <category term="游戏" scheme="http://qinyuanpei.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="游戏引擎" scheme="http://qinyuanpei.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SDL游戏开发系列第一话：Hello SDL]]></title>
    <link href="http://qinyuanpei.com/2015/07/25/sdl-game-development-01/"/>
    <id>http://qinyuanpei.com/2015/07/25/sdl-game-development-01/</id>
    <published>2015-07-25T07:19:01.000Z</published>
    <updated>2015-10-09T08:55:56.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;各位读者朋友大家好，我是秦元培，欢迎大家关注我的博客，我的博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。从今天起博主将带领大家一起走进SDL游戏开发的世界，如果说此前的Unity3D游戏开发系列文章让大家感受到的是游戏引擎工具化开发的方便与快捷，那么这一次就让我们以SDL库为基础，通过了解游戏开发中的底层图形渲染、输入事件响应等内容来全面认识游戏引擎，博主为SDL游戏开发系列文章建立了专栏，大家可以通过<a href="http://blog.csdn.net/column/details/sdlgame.html" target="_blank" rel="external">这里</a>获取所有的系列文章，希望大家能够喜欢！好了，作为<a href="http://blog.csdn.net/column/details/sdlgame.html" target="_blank" rel="external">SDL游戏开发系列</a>的第一篇文章，按照技术性文章写作的国际惯例这将是一篇介绍SDL入门内容的文章，因此这篇文章叫做：Hello SDL。</p>
<a id="more"></a>
<h3 id="一、什么是SDL">一、什么是SDL</h3><p>&emsp;&emsp;<a href="http://www.libsdl.org/" target="_blank" rel="external">SDL</a>（Simple DirectMedia Layer）是一套开放源代码的跨平台多媒体开发库，使用C语言写成。SDL提供了数种控制图像、声音、输出入的函数，让开发者只要用相同或是相似的代码就可以开发出跨多个平台如Linux、Windows、Mac OS X等的应用软件。目前SDL可用于游戏、模拟器、媒体播放器等多媒体应用领域的开发，SDL最为著名的案例是曾赢得Linux组游戏开发大奖的游戏<a href="https://en.wikipedia.org/wiki/Civilization:_Call_to_Power" target="_blank" rel="external">《文明：权利的召唤》</a>。或许大家对这个游戏会感到陌生吧，可是如果我提到一个Linux下经典单机游戏《仙剑奇侠传》的开源实现<a href="http://sdlpal.codeplex.com/" target="_blank" rel="external">SDLPal</a>相信大家就没有不知道的了吧？这款经典的单机游戏所以能够移植到Linux平台下就是因为使用SDL。好了，在对SDL有了大概的认识后，我们来看看SDL有哪些值得我们去研究的优良特性吧！</p>
<blockquote>
<ul>
<li>SDL提供了从图像、视频、音频、事件、线程、计时器的API，功能特别强大。</li>
<li>SDL具有良好的跨平台性能，支持Windows、Linux及Android和IOS，是开发跨平台多媒体应用的神兵利器。</li>
<li>SDL内置了OpenGL相关函数，使SDL开发3D应用成为可能，因此SDL是一个同时支持2D和3D开发的强力工具。</li>
<li>通过使用SDL_image、SDL_ttf、SDL_mixer、SDL_net等外部扩展库，可以轻松实现JPG、PNG、TIFF图像的加载使用，TrueType字体的使用，MP3文件的使用、网络相关的使用等。</li>
<li>SDL支持C++、C#、Java、 Lisp、Lua、Objective C、Pascal、Perl、 PHP、Python、Ruby等近20种编程语言。</li>
<li>SDL是GNU LGPL 2开源协议下发布的开源软件，该协议允许用户将SDL以动态链接库的形式免费地用于商业游戏软件的开发。</li>
</ul>
</blockquote>
<h3 id="二、SDL的下载、安装和配置">二、SDL的下载、安装和配置</h3><p>&emsp;&emsp;SDL开发相关的资源都可以从<a href="http://www.libsdl.org/" target="_blank" rel="external">http://www.libsdl.org/</a>来获取。目前SDL存在1.2和2.0两个版本，从效率上来说SDL2.0支持硬件加速效率较SDL1.2有了较好的提升，从稳定性上来讲SDL2.0尚处于发展阶段，因此可能其中的Bug较SDL1.2可能会多些。博主这里选择的SDL2.0，下面是相关的下载链接：</p>
<blockquote>
<ul>
<li>SDL源代码——<a href="http://www.libsdl.org/release/SDL2-2.0.3.zip" target="_blank" rel="external">下载</a></li>
<li>SDL二进制库——<a href="http://www.libsdl.org/release/SDL2-2.0.3-win32-x86.zip" target="_blank" rel="external">Win_x86</a>、<a href="http://www.libsdl.org/release/SDL2-2.0.3-win32-x64.zip" target="_blank" rel="external">Win_x64</a>、<a href="http://www.libsdl.org/release/SDL2-2.0.3.dmg" target="_blank" rel="external">Mac</a></li>
<li>SDL开发包——<a href="http://www.libsdl.org/release/SDL2-devel-2.0.3-VC.zip" target="_blank" rel="external">VC++</a>、<a href="http://www.libsdl.org/release/SDL2-devel-2.0.3-mingw.tar.gz" target="_blank" rel="external">GCC</a>、<a href="http://www.libsdl.org/release/SDL2-2.0.3.dmg" target="_blank" rel="external">Mac</a></li>
</ul>
</blockquote>
<p>&emsp;&emsp;博主选择的开发环境是Visual Studio2012，因此下载VC++的SDL开发包。我们将下载得到的SDL开发包解压到本地，可以发现SDL开发包中已经为我们准备好了相关的include文件夹和lib文件夹。其中include文件夹下存放的是SDL的各种头文件，lib文件夹下存放的是编译好的动态链接库（.dll）和依赖库（.lib），如果读者朋友有能力或是希望自行编译SDL源代码的，请先去编译源代码。这里我们为了节省时间，就直接使用编译好的文件了,请大家不要鄙视我啊，哈哈。好了，下面我们来以一个VC++项目为例来讲解SDL的配置：</p>
<blockquote>
<ul>
<li>1、使用Visual Studio创建一个空的VC++项目</li>
<li>2、右键单击项目【属性】打开项目属性页找到【配置属性】-&gt;【VC++目录】然后将包含目录和库目录分别定位到SDL开发包中的include目录和lib目（x86和x64视系统情况而定）</li>
<li>3、在【配置属性】-&gt;【链接器】-&gt;【输入】-&gt;【附加依赖项】中增加SDL2.lib和SDL2main.lib</li>
<li>4、将【配置属性】-&gt;【链接器】-&gt;【系统】-&gt;【子系统】设置为窗口 (/SUBSYSTEM:WINDOWS)</li>
<li>5、将SDL2.dll复制到项目的Debug目录中</li>
</ul>
</blockquote>
<h3 id="三、SDL游戏开发的基本流程">三、SDL游戏开发的基本流程</h3><p>&emsp;&emsp;SDL游戏开发的一般流程是：</p>
<blockquote>
<ul>
<li>1、使用SDL_Init()方法对SDL进行初始化。其中该初始化方法的参数类型为int类型，可以从SDL_INIT_HAPTIC、SDL_INIT_AUDIO、SDL_INIT_VIDEO、SDL_INIT_TIMER、SDL_INIT_JOYSTICK、<br>SDL_INIT_EVERYTHING、SDL_INIT_NOPARACHUTE七个类型中选择，分别表示力反馈子系统、音频子系统、视频子系统、计时器子系统、摇杆子系统、全部和忽略致命信号。</li>
<li>2、在SDL初始化成功后使用SDL_CreateWindow()方法创建一个SDL窗口（SDL_Window）。在这里我们可以设置窗口的名称、对齐方式、窗口宽度和窗口高度。</li>
<li>3、在SDL窗口创建成功后使用SDL_CreateRenderer()方法创建一个SDL渲染器（SDL_Renderer）。其中SDL渲染器有SDL_RENDERER_SOFTWARE、SDL_RENDERER_ACCELERATED、SDL_RENDERER_PRESENTVSYNC、SDL_RENDERER_TARGETTEXTURE四种类型分别表示软件渲染、硬件加速、屏幕同步刷新渲染和支持渲染纹理。</li>
<li>4、使用SDL_RenderClear()方法清空SDL渲染器、使用SDL_RenderPresent()方法将渲染的结果显示出来</li>
</ul>
</blockquote>
<h3 id="四、工程示例">四、工程示例</h3><p>&emsp;&emsp;下面以一个简单的示例来向大家演示SDL游戏开发的一般流程：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 添加对SDL的引用*/</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;SDL.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明SDL_Window */</span></span><br><span class="line">SDL_Window *g_pWindow;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明SDL_Renderer */</span></span><br><span class="line">SDL_Renderer *g_pRenderer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义入口函数main */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *args[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">/* SDL三部曲——1:初始化SDL */</span></span><br><span class="line">	<span class="keyword">int</span> sdlInit=SDL_Init(SDL_INIT_EVERYTHING);</span><br><span class="line">	<span class="keyword">if</span>(sdlInit&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">/* 当SDL初始化完成后创建一个标题为"SDL Game Development——01",窗口对齐方式为居中对齐，窗口大小为640*480的窗口 */</span></span><br><span class="line">		g_pWindow=SDL_CreateWindow(<span class="string">"SDL Game Development——01"</span>,</span><br><span class="line">			SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED,</span><br><span class="line">			<span class="number">640</span>,<span class="number">480</span>,SDL_WINDOW_SHOWN);</span><br><span class="line">		<span class="comment">/* SDL三部曲——2:初始化SDL渲染 */</span></span><br><span class="line">		<span class="keyword">if</span>(g_pWindow!=<span class="number">0</span>)&#123;</span><br><span class="line">			g_pRenderer=SDL_CreateRenderer(g_pWindow,-<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* SDL三部曲——3:绘制窗口 */</span></span><br><span class="line">	SDL_SetRenderDrawColor(g_pRenderer,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>);</span><br><span class="line">	SDL_RenderClear(g_pRenderer);</span><br><span class="line">	SDL_RenderPresent(g_pRenderer);</span><br><span class="line">	</span><br><span class="line">	SDL_Quit();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在以上代码中我们基本遵循了SDL游戏开发的一般流程，即首先对SDL进行初始化，当SDL初始化完成后，我们创建一个标题为”SDL学习示例1”,窗口对齐方式为居中对齐，窗口大小为640*480的窗口，然后创建了模式为软件渲染的SDL渲染器，并设置渲染器的背景色为黑色。作为第一个项目，它简单到纯粹，当我们运行项目，会发现一个黑色的窗口一闪而过，这是因为我们这里在渲染了一次后就使用SDL_Quit()方法退出了，第一篇文章并不会有太复杂的内容，因为它的意义在于让我们对SDL游戏开发有个基本的认识和了解。关于SDL绘制图片、文字以及处理渲染循环等问题我们放到后面的文章中去讲，这篇文章的内容就是这样啦，谢谢大家！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;各位读者朋友大家好，我是秦元培，欢迎大家关注我的博客，我的博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。从今天起博主将带领大家一起走进SDL游戏开发的世界，如果说此前的Unity3D游戏开发系列文章让大家感受到的是游戏引擎工具化开发的方便与快捷，那么这一次就让我们以SDL库为基础，通过了解游戏开发中的底层图形渲染、输入事件响应等内容来全面认识游戏引擎，博主为SDL游戏开发系列文章建立了专栏，大家可以通过<a href="http://blog.csdn.net/column/details/sdlgame.html">这里</a>获取所有的系列文章，希望大家能够喜欢！好了，作为<a href="http://blog.csdn.net/column/details/sdlgame.html">SDL游戏开发系列</a>的第一篇文章，按照技术性文章写作的国际惯例这将是一篇介绍SDL入门内容的文章，因此这篇文章叫做：Hello SDL。</p>]]>
    
    </summary>
    
      <category term="SDL" scheme="http://qinyuanpei.com/tags/SDL/"/>
    
      <category term="图形" scheme="http://qinyuanpei.com/tags/%E5%9B%BE%E5%BD%A2/"/>
    
      <category term="引擎" scheme="http://qinyuanpei.com/tags/%E5%BC%95%E6%93%8E/"/>
    
      <category term="游戏" scheme="http://qinyuanpei.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《仙剑奇侠传六》游戏感言]]></title>
    <link href="http://qinyuanpei.com/2015/07/24/love-pal-or-not/"/>
    <id>http://qinyuanpei.com/2015/07/24/love-pal-or-not/</id>
    <published>2015-07-24T01:21:20.000Z</published>
    <updated>2015-07-24T01:29:08.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;目前游戏主线剧情进行到50%左右，在游戏尚未通关前，我对于这一部游戏的感觉始终是一种说不清道不明的情感，作为仙剑系列中唯一一部，从项目立项到宣传曝光再到游戏上市整个过程中持续关注的游戏，它可以说是承载了无数玩家的期待和祝福。和大部分玩家一样，在游戏曝光的第一时刻我们曾经热火朝天地讨论过各种各样可能的设定、曾经为这部游戏的系统玩家想过各种各样的尝试，然而当我面对这款游戏的时候，我的内心平静得像一潭死水。我今天23岁，刚刚从大学毕业的我本应该还没有被这个社会完全改变，可我不知道是我变了还是仙剑变了，这一次打开仙剑的时候，我总有一种恍若隔世的恍惚感。</p>
<a id="more"></a>
<h3 id="引子">引子</h3><p>&emsp;&emsp;曾经，仙剑一的游戏开始界面是简单到不能再简单的竹简、酒葫芦、剑，这些元素组合起来就仗剑江湖的行侠仗义、白云苍狗的醉梦人生和徐徐道来的温暖故事；曾经，仙剑三的《御剑江湖》伴随着云山雾绕的蜀山像一幅遗留在历史深处的卷轴缓缓地打开让人不由得心头一阵惊艳；曾经，仙三外传开头蜀山掌门大战狼妖，无数道剑气凝成的剑柱从天而降可以让你感受到那种仙家道法的玄妙和奇幻；曾经，仙剑四的《回梦游仙》在耳畔响起的时候卷云台像朵清新脱俗的莲花静静地盛开却在最后一刻明白这朵莲花是一切悲剧的开始；曾经，仙剑五前传的明州码头在夕阳和晚霞的交相辉映中，瑾轩和瑕妹依偎在一起看着落霞与孤鹜齐飞是永远的温馨画面……</p>
<p>&emsp;&emsp;可是仙剑六让我看到了什么呢？我看到了一片经过高斯模糊的绿油油的草地，没错！它真的是一片绿油油的草地，以至于当我打开这个游戏的时候我不得不在心里问自己：这真的是一个古风的仙侠/武侠游戏吗？在仙剑奇侠传六的宣传阶段，我在我的QQ群里、我的博客中不断向大家输送着这样一个概念：仙剑六是仙剑奇侠传系列二十年的突破之作，它一定不会让大家失望的，甚至我不遗余力地和游戏圈子里使用Unity3D引擎开发游戏的朋友们说，看，仙剑六是使用Unity3D引擎开发的，它的画面是历代游戏中最好的，这一次它终于要尝试即时战斗了。然而当我打开这个游戏的时候，我知道自己会被打脸，尤其是当我面对接受了我的这些观点的朋友的时候。</p>
<p>&emsp;&emsp;对于此次仙剑六游戏优化的问题，我不想做详细的说明，我更不想为北软洗白，当我们觉得仙剑奇侠传六之泰坦陨落变成一个笑话的时候，我觉得我们可以说说Unity3D这个游戏引擎了。我承认，Unity3D是个手机游戏引擎；我承认，Unity3D在画面表现上无法和UE、CE这些顶级的游戏引擎相提并论；我承认，现在国内各种各样的Unity3D教程满天飞；我承认，Unity3D入门快、成本低、跨平台性能强…….可是这些都不是你们不用心做仙剑六的理由好吗？在我看来，技术从来都没有优劣之分，真正让技术体现出差异的是使用工具的人。Unity3D本质上并非是一个差劲的游戏引擎，所以以引擎来论仙剑六的成败是不恰当而且不应该的，因为使用Unity3D开发的游戏目前已经相当的多了，比如《蒸汽之城》、《太空冒险》、《新仙剑OL》<a href="http://www.zhihu.com/question/20998208" target="_blank" rel="external">等等</a>以及无数的手机游戏。可是能将这个引擎用到如此地步的恐怕只有仙剑六吧！目前Unity3D的授权方式是收入超过3万美元即18万人民币左右需要按照一定的比例向Unity3D官方支付费用，我不知道这次的优化问题是否会对仙剑六的销量产生影响，可是我觉得恐怕官方都会认为这款游戏存在影响Unity3D引擎声誉的问题吧！</p>
<h3 id="一、画面">一、画面</h3><p>&emsp;&emsp;首先我们来说说游戏画面，我不知道有多少玩家可以在这款游戏中保证特效全开，总之在我的电脑上看起来整个画面有一种糊糊的感觉，远景看起来比较唯美壮丽，然而当我将镜头拉近的时候我觉得我还是不要计较仙剑奇侠传这个游戏的画面了吧！可是我真的不理解，作为仙剑奇侠传系列的好兄弟轩辕剑系列在使用Unity3D制作了两款游戏这样的背景下，北软为什么就不肯向DOMO小组学习哪怕借鉴相关的经验呢？虽然《轩辕剑六》恶名在外、《穹之扉》销量不佳，可是最起码人家的游戏的画面做得相对仙剑六要好很多好不好，况且人家在处理人物和场景时刻意加强了人物面部的特征，通过渲染景深和整体的光照使得画面透露出一种唯美的风格。可是仙剑六呢？仙剑六中做得最好看的永远都是人物的脸，我不知道北软是不是在有意告诉大家：这是一个看脸、靠脸的时代，所以当我们面对这个游戏的时候我们就发现整个游戏除了脸比较漂亮以外基本没有什么优点，可是事实上不同的人物在不同的场合、年龄他的面部应该都是不一样的啊，北软你把所有人的脸都做的这么漂亮，是想告诉玩家都不用去努力工作、只要拼脸就可以了吗？我不知道使用国外的3A级别的游戏引擎如UE、CE等来表现这种中国古典美的场景是否合适，因为这种类型的引擎更适合写实的渲染，而无疑中国的古风游戏需要的是一种意蕴上的美感的渲染。然而《古剑奇谭》和《轩辕剑》在表现这种场景时处理的相对来说是比较好的，这次的所有场景中我比较喜欢的是与青山，因为这个场景的色彩运用可以让玩家很明显的区分开场景中的不同的区域，反观忘尘寰、归墟、天晴之海、饮马河等场景因为使用的色彩较为接近，因为在玩家探索迷宫的时候常常搞晕，再辅以本次游戏中那个神奇的相机视角，探索迷宫的乐趣真是大大的增强啊！我不理解为什么北软连全局光照这种只需要简单设置下参数的东西都不愿意用，却要花大力气在角色的头顶上放置点光源，你告诉我，放置点光源就是为了让角色的头顶亮一下、脸白一点吗？更不要说启魂邪教总坛里那些支持实时反射的水晶石了？难道你宁可要这种华而不实的效果，都要让玩家的计算机耗费资源去支持它吗？景安正武盟门前的那条河的果冻绿材质就不能让美术想办法替换下吗？难道怕玩家不知道你是使用的Unity3D里的标准材质？</p>
<p>下面是游戏中主角及配角的面部截图，颜值爆表啊！</p>
<p><img src="http://img.blog.csdn.net/20150724091116081" alt="果然还是看脸的"></p>
<p>下面是《古剑奇谭二》、《穹之扉》、《仙剑六》三部游戏在特效全开的情况下的画面表现，相信高下立判了吧！</p>
<p><img src="http://img.blog.csdn.net/20150723095327020" alt="古剑奇谭2最高画质"><img src="http://img.blog.csdn.net/20150723095354576" alt="穹之扉最高画质"></p>
<p><img src="http://img.blog.csdn.net/20150723095429614" alt="仙剑六最高画质"></p>
<h3 id="二、建模">二、建模</h3><p>&emsp;&emsp;好了，下面说说建模的问题，我使用disunity对仙剑六的部分.unity3d文件进行了解包，然后发现每个模型文件的包大概在10M左右，像太空步、循环动画、穿模这种问题我就不说了，反正每次说了你们又不打算改。我就来说说这个游戏里的模型吧？对三个模型进行了解包，然后发现这三个模型的单位都是不一样的，就是说在scale为1、1、1的时候三个模型的大小是不一样的；其次模型的角度需要手动改为-90,180,0，我觉得建模的时候难道不应该制定相关的规范吗？我觉得从Max、Maya里导出到FBX到Unity3D的时候难道不应该规范单位、角度和中心点位置吗？我从来不认为游戏引擎就是美术把模型做好了给程序用就行了，我觉得美术在建模的时候更应该去关注模型在这个引擎下的渲染效果，如怎么调整材质、怎么打灯光等等的问题，这些问题不应该推给程序而且不能推给程序。从模型贴图来看，美术想到了诸如法线贴图等等的次世代特性，可是到了实际使用的时候，我看到的结果的是整个游戏里基本清一色的使用了Diffuse着色器，那请问这样做这些贴图有什么意义？既然你根本用不到为什么还要放到游戏里？而且我在模型文件中经常看到诸如Object01或者A_toufa、B_yifu这样的命名，我是一个程序员，对命名比较敏感，我觉得出现汉语拼音式的命名，说明建模的人是特别不专业的。然后我想说的是这次整体美术风格的问题，难道大家不觉得天晴之海的建筑风格偏欧式了吗？这是一个中国的古风游戏啊！难道大家不觉得盈辉堡的道路和房子都是一样的颜色吗？我在地图里转了半天才找到路啊！此次的配角如赢旭危和朔漩的建模普遍要比主角团好看多了，难道你们要开始学《古剑奇谭二》在游戏中潜伏隐藏主角团吗？我不知道一个2015年的游戏出现NPC配音时嘴巴不动是出于什么考虑？NPC不重要吗？NPC戏份没有主角团多可以忍、长得没有主角团帅可以忍，可是你剥夺人家说话的权利是什么鬼？还有骆驼移动的时候没有移动动画直接悬空移动又是想干什么？一个骆驼值得你使用刚体这样的移动方式去移动吗？关于游戏读条慢的情况，我自己测试了下、同时找了相关的资料去查阅，Unity3D场景的异步加载的确有坑存在，可是我相信只要运用合适的方法是可以规避这个问题的，因为目前仅仅解了部分AssetBundle包的内容，所以对程序内部的一些东西还有待确定，等确定后会继续更新到这里。</p>
<p><img src="http://img.blog.csdn.net/20150723095507653" alt="朔璇模型"></p>
<p><img src="http://img.blog.csdn.net/20150723095530182" alt="赢旭危模型"></p>
<h3 id="三、剧情">三、剧情</h3><p>&emsp;&emsp;剧情、配音、配乐这里放到一起说，因为这是仙剑六引以为豪的地方，此次的剧情主线有两条，即双越身世之谜和洛家双生子早逝之谜，将这两条线交织在一起的是横道众和柷敔间的矛盾冲突，这样的设定明显是继承了仙五前的多线程叙事方式，这样的叙事方式应该是值得肯定的。但是我不能理解整个游戏到底是以谁为叙事中心的，正如仙剑五是以主角姜云凡为叙事中心的，他所看到的一切推进着整个剧情的深入，再入仙剑五前传是以主角夏侯瑾轩为叙事中心的，围绕着为姜承洗刷冤屈、为瑕妹治病两条主线将所有相关的人或事联系了起来。可是仙剑六我真没看出来是以谁为中心的，整个主角团是仙剑史上最冷漠、最分裂的团队，将大家联系到一起的唯一理由就是存在感爆表的神农九泉，然而这并没有什么卵用，大家都是站在自己的立场上做着自己关心的事情。</p>
<p>&emsp;&emsp;比如越今朝是霸道总裁“只有我一个人可以叫你祈”。一路上不是摸头就是捏脸，可惜手压根没有放到脸上去；再比如越祈是天真傻“我听今朝的”。一路上吃面吃得我都饿了，可是那碗鸡蛋面就是一张贴图啊，吃半天空气最后居然吃完了，我要向仙剑六的四位程序员致敬；再比如闲卿是典型的双标狗，一面要讨好老婆洛昭言和世侄小绣儿，一面还要做出一副闲适淡泊的样子，我都忍不住要为你的演技点赞；再比如耳光绣明绣，我觉得要么是美术和策划有仇，故意将这样一个凶狠的角色画成甜美可人的女神范儿，要么就是编剧经常看琼瑶剧比较热衷于打人耳光，一个武侠游戏有什么不满直接亮兵器不就好了，要是当年月如被逍遥在扬州城外欺负了直接打李逍遥一个耳光，我觉得这个角色恐怕要失去不少忠实粉丝吧;再比如说技术宅居士方这货总是一副“你们都是对的，怪我咯”的态度，我至今都想不明白他有什么不对的地方，既然大家都不拿你当朋友，你凭什么要为这样一群人牺牲豆包啊。我一直喜欢仙剑营造的那种朋友间比较温暖的情感，比如仙剑四里小紫英一句“承君此诺必守一生”就会让人觉得温暖，即使以后大家分开了彼此的心中还可以相互牵挂。可是仙剑六呢，那晚大家做一起赏月喝酒本来应该是彼此相互了解和认识的机会，结果大家都忙着去约会了，留下居十方一个人在哪里喝闷酒，甚至他喝醉了酒吐露心事主角团中竟然无一人听见，我严重怀疑编剧每次和同学聚会的时候都是那个抢着麦克风嘶吼却从来不会有人去安慰他的那个人，编剧啊，己所不欲勿施于人啊。我一直认为一个RPG游戏的核心在于代入感，就是说你要让玩家觉得他就是游戏中的主角。比如我们玩仙剑一的时候就感觉自己是李逍遥，仙五前谢叔单挑姜世离的时候我们就感觉自己是谢叔，这就是代入感。</p>
<p>&emsp;&emsp;可是仙剑六呢，居然巧妙的避开了这一点，搞得从头到尾都像在看电影，不，应该是叫做在看幻灯片。我不知道仙六是不是借鉴了《古剑奇谭二》的叙事方式，整个叙述视角更像是以上帝俯视人间的视角在讲整个故事，如果说《古剑奇谭二》成就了流月城，那么仙剑六便成就了衡道众，而且编剧觉得为了和《古剑奇谭二》拉开差距，刻意让站在对立面的衡道众认识到自己的错误并对主角一行人提供了补偿。我承认，这让仙剑六在立意上有了深度，可是我接下来要说的就是你们的不对了。我们玩仙剑一的时候比武招亲、蜀山剑法、林家绝学、苗疆蛊术、五灵仙术我们从来不会觉得存在违和感，因为这些东西都是东方文化中已有或者说可以找到起源追朔的东西，可是仙剑六的编剧你告诉我整个仙剑六除了鲲鹏能够在庄子的《逍遥游》中找到记载以外，其他的这些是中国传统文化存在的吗？是，时空穿越早就有了，可是回魂仙梦和血濡回魂都无法改变已经发生的事情；是，在天上飞早就有了，可是蜀山仙剑派御剑飞行早在武侠小说、志怪小说中有记载，所以蜀山的御剑术不会存在丝毫的违和感，可是你搞个二十一世纪都未必有的飞行器是什么鬼，古时候尝试上天的人最多是在一个椅子上捆满火药，希望通过反冲力飞到天上去，结果为科学事业献身了，编剧你告诉我这是什么鬼。我真傻，我单单知道黑科技会在仙剑剧里出现，却不知道有一天会在仙剑游戏里出现，你告诉我御界枢的人都是外星人吗？我们使用智能手机、平板电脑不过四五年的样子，编剧你告诉我衡道众里的人是怎么做到的，他们是从未来穿越过去的嘛？好了，下面请允许我替历代仙剑中因为剧情需要而牺牲的各位男主角、女主角、男配角、女配角、小怪以及Boss说句公道话，为什么六代的人可以通过交换实现“不死”的愿望，而六代以前的就只能领便当？我知道编剧一定会说，因为这次我们采用了全新的以神农为中心的世界观，可是编剧好像忘了神农和女娲差不多是同时在宇宙中产生的吧？我觉得五代的Boss魔翳比较冤枉，冒着做坏人的危险、拼着命为魔界找来了水源，结果你说九泉之一的热海同样可以产生水源，我原本只要伤害洛埋名一人就可以取得水源，结果就因为你这奇怪的设定，五代造就了仙剑史上最大的牺牲，编剧啊编剧原来你是真正的幕后黑手，神马黑包子各种连携技全都弱爆了好吗？你把仙剑六的故事设定到仙五前的五六十年里难道不担心这个世界的变化跟不上你的节奏吗？编剧你一句话就让蜀山派这样的神权天授、依靠盘古之心存在于世间的正派组织荡然无存啊，你告诉我御剑术都在江湖上失传了，这是摆明了以后不会再出现蜀山或者御剑术的节奏吗？我乐意看到仙剑六在世界观上的变化，可是这个新的世界观应该是原来以女娲为中心的世界观的一种补充而非推翻啊，你提出了神农九泉的概念，我觉得这个设定可以让仙剑的题材变得新颖些，然并卵这一次就把九泉的故事差不多都讲完了，是想等下一部游戏立项的时候再次推翻这次的设定，编剧啊，你到底是来挖坑的还是扩展仙剑的游戏世界观的啊！</p>
<p><img src="http://img.blog.csdn.net/20150724085946995" alt="仙剑六黑科技"></p>
<h3 id="四、游戏性">四、游戏性</h3><p>&emsp;&emsp;下面我们来重点说说游戏性。你问我为什么要说游戏性啊？一个游戏、一个商业游戏不提游戏性你觉得提什么呢？首先我想强调一个观点，认为仙剑六只要剧情好就行了的朋友请向姚仙建议将仙剑做成一个动漫或者电影，这样大家连自动战斗都不用点了对吧！仙剑六的突破挺多的，可惜注重了量而不注重质，这样平均下来仙剑六的突破其实很少很少。首先，我们来说说开放地图的问题，因为地图开放了玩家可以自由探索的地方就多了，可是你要真的想做好开放地图，就应该认真的去设计空气墙而不是等玩家掉坑里出来的时候打开游戏菜单重新回到原点。因为你们在设置空气墙的时候不用心，在过饮马河和去落日部的路上，比如祈妹的隔空移物和今朝的凌空飞剑，我不会告诉你我是直接从两边的石头上跳过去的。抓猫是挺好玩的，可是你告诉我玩家站在树顶纹丝不动、走绳子如履平地是什么鬼，在没有对Unity3D内部集成的Physic物理引擎进行完全充分的了解的情况下，贸然使用这样的技术你确定你能驾驭得好吗？浮金堂我跳了一个下午没有跳过去，然后跳出各种Bug，我终于明白这次为什么有人能玩到70个小时以上啦，恭喜北软你们终于知道了怎样延长一个游戏的时间。这次的开机关让居十方都觉得郁闷，因为每次需要开机关的时候都会提示“开机关这种事情还是让十方去做吧!”，当我终于庆幸有用得着十方的时候，这下轮到我郁闷了，难道小游戏就不能给点提示吗？我总得知道自己要做什么吧！划船我再转了不知多久以后才明白过来怎么控制船的移动方向和角度，这种小问题难道每次都要让大家说吗？这次的迷宫设计有了层次感和立体感，比如启魂邪教总坛的迷宫和机关设计得都不错，天晴之海得迷宫设计得比较好，然而我最喜欢的是与青山这个场景！</p>
<p>我就放个图，不说话！</p>
<p><img src="http://img.blog.csdn.net/20150724091516779" alt="浮金堂跳跃Bug"></p>
<p>&emsp;&emsp;好了，说完这些小游戏，我们来说说这次仙剑六的战斗系统。我想知道，究竟是什么样的一种考量让你们选择去模仿FF13的战斗模式，难道是为了刻意和《古剑奇谭二》有所不同？然并卵，这次的战斗系统糟糕透了。首先，我是希望仙剑的战斗系统慢慢地向着即时制的方向发展的，因为这是现在的大势所趋吧，尤其是《古剑奇谭》、《雨血》和《御天降魔传》这类游戏正在引领着大家的兴趣往即时方向转变，在这样的背景下仙剑积极地向即时制转变从某种程度上来讲是一种不得不采取的防御性措施。可是我有教过你用一个伪即时制的战斗系统来欺骗大家的感情吗？以前大家对排站好在每个回合里我们可以依次控制多名角色，然后依次释放技能，通过不同角色间策略的调整来将游戏进行下去；现在大家迈着太空步，在每个回合里我们可以控制一名角色，每次可以发动多次行动，其他角色由AI控制，然后场景中各种粒子特效乱飞。当我看到粒子特效贴图的矩形边框时，我的内心是奔溃的。你告诉我这样的战斗系统和回合制有什么区别？当初主企划说为了让大家更好的观赏战斗画面特意将UI做到了右下角，可是你告诉我在一个即时制的游戏里用眼角的余光扫视右下角然后用滚动条从一堆物品中选择需要的物品该有多蛋疼，等你选好了，队友或者玩家可能已经死了。所以我们的数值策划为明绣配置逆天的治疗数值，这样一来大家就不用吃药了。呵呵，是你们该吃药了吧，你告诉我一个游戏玩到现在我都没记住几个技能的名称，以后问起来大家提到万剑诀、天剑、酒神、真元护体、天罡战气、五灵归宗、乾坤一掷、气疗术、气指剑、万物归烬、仙风云体、千方残光剑等等经典招式的时候，我希望你们不要说我们厚此薄彼就好。我相信有好多妹子已经习惯开着自动战斗直接看剧情的习惯了吧，如果这样仙剑还不如买小说或者拍动漫呢，正好这次所有的过场动画都是2D动画的形式，可是你告诉我2D动画是一种风格、3D建模是一种风格、小剧情表情是一种风格，一个游戏里三种风格，你是打算同时照顾动漫和游戏两个不同群体的玩家吗？然并卵，你这样做了不见得人家会领情，人家会说你抄袭、撞梗，你说你又是何苦呢？我给仙剑六战斗系统提点意见吧，希望可以支持玩家自定义快捷键，比如玩家可以挑选自己喜欢的技能和常用的物品，每次使用都会消耗行动点数，行动点数目消耗完了就触发技能动画，这样至少可以让点鼠标变得高端些，就像英雄联盟说白了就是Q、W、E三个键各种按，可是你同样可以装X地说这里面涉及到走位和意识。对了，灵脉系统界面能不能点击了以后不要放大，你觉得那样真的好看吗？再说三种培养方式我非得一条路走到黑？</p>
<p><img src="http://img.blog.csdn.net/20150724091741459" alt="战斗系统截图1"></p>
<p><img src="http://img.blog.csdn.net/20150724091809971" alt="战斗系统截图2"></p>
<p>&emsp;&emsp;好了，熬夜到凌晨三点写完这篇文章，我对仙剑绝对是真爱，我知道一定会有许多人来吐槽我写的这篇吐槽，可我想说的是：你要真的爱它就别总是惯着它，真正的爱从来都不是溺爱！在官方放出第三版补丁后，整个游戏的优化得到了较好的提升，从感官上像个游戏了，如果有朋友还在徘徊不定，不妨在这个时候尝试下吧！以上观点，一家之言，不足为据！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;目前游戏主线剧情进行到50%左右，在游戏尚未通关前，我对于这一部游戏的感觉始终是一种说不清道不明的情感，作为仙剑系列中唯一一部，从项目立项到宣传曝光再到游戏上市整个过程中持续关注的游戏，它可以说是承载了无数玩家的期待和祝福。和大部分玩家一样，在游戏曝光的第一时刻我们曾经热火朝天地讨论过各种各样可能的设定、曾经为这部游戏的系统玩家想过各种各样的尝试，然而当我面对这款游戏的时候，我的内心平静得像一潭死水。我今天23岁，刚刚从大学毕业的我本应该还没有被这个社会完全改变，可我不知道是我变了还是仙剑变了，这一次打开仙剑的时候，我总有一种恍若隔世的恍惚感。</p>]]>
    
    </summary>
    
      <category term="RPG" scheme="http://qinyuanpei.com/tags/RPG/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="仙剑奇侠传" scheme="http://qinyuanpei.com/tags/%E4%BB%99%E5%89%91%E5%A5%87%E4%BE%A0%E4%BC%A0/"/>
    
      <category term="游戏" scheme="http://qinyuanpei.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="单机游戏" scheme="http://qinyuanpei.com/categories/%E5%8D%95%E6%9C%BA%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unity3D游戏开发之SQLite让数据库开发更简单]]></title>
    <link href="http://qinyuanpei.com/2015/07/09/sqlite-in-unity3d/"/>
    <id>http://qinyuanpei.com/2015/07/09/sqlite-in-unity3d/</id>
    <published>2015-07-09T01:47:06.000Z</published>
    <updated>2015-11-03T00:11:24.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;各位朋友大家好，欢迎大家关注我的博客，我是秦元培，我是博客地址是<a href="http://blog.csdn.net/qinyuanpei" target="_blank" rel="external">http://blog.csdn.net/qinyuanpei</a>。在经历了一段时间的忙碌后，博主终于有时间来研究新的东西啦，今天博客向和大家一起交流的内容是在Unity3D游戏开发中使用SQLite进行数据库开发，坦白来讲，在我的技术体系中Web和数据库是相对薄弱的两个部分，因此正好这段时间项目需要和服务器、数据库进行交互，因此在接下来的文章中博主可能会更加倾向于讲解这方面的内容，希望大家能够喜欢啊！</p>
<a id="more"></a>
<h2 id="一、什么是SQLite？">一、什么是SQLite？</h2><p>&emsp;&emsp;<a href="http://www.sqlite.org/" target="_blank" rel="external">SQLite</a>是一款轻型的数据库，是遵守ACID的关系型数据库管理系统，它包含在一个相对小的C库中，以嵌入式作为它的设计目标，它占用资源非常的低，因此适合在嵌入式设备如Android、Ruby on Rails等中使用。它能够支持Windows/Linux/Unix等等主流的操作系统，同时能够跟和C、C++、Ruby、Python、C#、PHP、Java等编程语言相结合。SQLite是一个以文件形式存在的关系型数据库，尽管无法实现分布式和横向扩展，可是作为一个轻量级的嵌入式数据库，它不需要系统提供服务支持，通过SDK直接操作文件避免了对数据库维护的相关事务，从这个角度来讲它是一个出色的数据库。</p>
<h2 id="二、为什么要选择SQLite">二、为什么要选择SQLite</h2><p>&emsp;&emsp;好了，在了解了SQLite后，我们来了解下SQLite有哪些让我们心动的特性，或者说我们为什么要选择SQLite，因为在这个世界上我们有太多的数据库可以选择，诸如Oracle、MySQL、SQLServer、DB2、NoSQL、MongoDB等等：</p>
<blockquote>
<ul>
<li>ACID事务</li>
<li>零配置 – 无需安装和管理配置</li>
<li>储存在单一磁盘文件中的一个完整的数据库</li>
<li>数据库文件可以在不同字节顺序的机器间自由的共享</li>
<li>支持数据库大小至2TB</li>
<li>足够小, 大致13万行C代码, 4.43M</li>
<li>比一些流行的数据库在大部分普通数据库操作要快—-<a href="http://www.zhihu.com/question/31417262" target="_blank" rel="external">SQLite读写效率如此之高，会使用其他数据库的理由是？</a></li>
<li>简单, 轻松的API</li>
<li>包含TCL绑定, 同时通过Wrapper支持其他语言的绑定</li>
<li>良好注释的源代码, 并且有着90%以上的测试覆盖率</li>
<li>独立: 没有额外依赖</li>
<li>源码完全的开源, 你可以用于任何用途, 包括出售它</li>
<li>支持多种开发语言，C, C++, PHP, Perl, Java, C#,Python, Ruby等</li>
</ul>
</blockquote>
<h2 id="三、Unity3D中的SQLite">三、Unity3D中的SQLite</h2><p>&emsp;&emsp;在Unity3D中使用SQLite，我们首先要明白这样一件事情，即我们这里的使用的SQLite并非是通常意义上的SQLite.NET,而是经过移植后的Mono.Data.Sqlite。因为Unity3D基于Mono，因此使用移植后的Mono.Data.Sqlite能够减少我们的项目在不同平台上出现各种各样的问题。在Unity3D中使用的SQLite以Mono.Data.Sqlite.dll即动态链接库的形式给出，因此我们需要将这个文件放置在项目目录下的Plugins文件夹中，此外我们需要System.Data.dll或者Mono.Data.dll这两个文件添加到Plugins目录中，因为我们需要的部分数据相关的API或者类都定义在这两个文件当中，这些文件可以从<a href="http://pan.baidu.com/s/1sjLZyrj" target="_blank" rel="external">这里</a>直接下载。</p>
<blockquote>
<p>PS：博主注意到在网上有使用Mono.Data.SQLiteClient.dll这个库实现在Unity3D操作SQLite数据库的相关文章，博主大概看了下，感觉和使用Mono.Data.Sqlite.dll这个库大同小异，大家喜欢哪个就用哪个吧！哈哈！博主在开源社区找到一个版本库，据说可以同时支持.NET和Mono，如果大家感兴趣欢迎大家去测试啊，哈哈!</p>
</blockquote>
<p>&emsp;&emsp;在正式开始写代码前，我们首先来回顾下通常情况下数据库读写的基本流程吧！</p>
<blockquote>
<ul>
<li>定义数据库连接字符串(ConnectionString)完成数据库连接的构造，建立或者打开一个数据库。</li>
<li>定义相关的SQL命令(Command)通过这些命令实现对数据库的增加、删除、更新、读取四种基本功能。</li>
<li>在完成各种数据库操作后及时关闭数据库连接，解除对数据库的连接和引用。</li>
</ul>
</blockquote>
<p>&emsp;&emsp;SQLite作为一款优秀的数据库，在为其编写数据库相关代码时同样遵循这样的流程，考虑到对数据库的增加、删除、更新、读取四种操作具有类似性和统一性，因此在动手写Unity3D脚本前，首先让我们来编写一个SQLite的辅助类SQLiteHelper.cs。该类代码定义如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;&#10;using System.Collections;&#10;using Mono.Data.Sqlite;&#10;using System;&#10;&#10;public class SQLiteHelper&#10;&#123;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#25968;&#25454;&#24211;&#36830;&#25509;&#23450;&#20041;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;private SqliteConnection dbConnection;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// SQL&#21629;&#20196;&#23450;&#20041;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;private SqliteCommand dbCommand;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#25968;&#25454;&#35835;&#21462;&#23450;&#20041;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;private SqliteDataReader dataReader;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#26500;&#36896;&#20989;&#25968;&#9;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;param name=&#34;connectionString&#34;&#62;&#25968;&#25454;&#24211;&#36830;&#25509;&#23383;&#31526;&#20018;&#60;/param&#62;&#10;&#9;public SQLiteHelper(string connectionString)&#10;&#9;&#123;&#10;&#9;&#9;try&#123;&#10;&#9;&#9;&#9;//&#26500;&#36896;&#25968;&#25454;&#24211;&#36830;&#25509;&#10;&#9;&#9;&#9;dbConnection=new SqliteConnection(connectionString);&#10;&#9;&#9;&#9;//&#25171;&#24320;&#25968;&#25454;&#24211;&#10;&#9;&#9;&#9;dbConnection.Open();&#10;&#9;&#9;&#125;catch(Exception e)&#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;Debug.Log(e.Message);&#10;&#9;&#9;&#125;&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#25191;&#34892;SQL&#21629;&#20196;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The query.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;queryString&#34;&#62;SQL&#21629;&#20196;&#23383;&#31526;&#20018;&#60;/param&#62;&#10;&#9;public SqliteDataReader ExecuteQuery(string queryString)&#10;&#9;&#123;&#10;&#9;&#9;dbCommand = dbConnection.CreateCommand();&#10;&#9;&#9;dbCommand.CommandText = queryString;&#10;&#9;&#9;dataReader = dbCommand.ExecuteReader();&#10;&#9;&#9;return dataReader;&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#20851;&#38381;&#25968;&#25454;&#24211;&#36830;&#25509;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;public void CloseConnection()&#10;&#9;&#123;&#10;&#9;&#9;//&#38144;&#27585;Command&#10;&#9;&#9;if(dbCommand != null)&#123;&#10;&#9;&#9;&#9;dbCommand.Cancel();&#10;&#9;&#9;&#125;&#10;&#9;&#9;dbCommand = null;&#10;&#10;&#9;&#9;//&#38144;&#27585;Reader&#10;&#9;&#9;if(dataReader != null)&#123;&#10;&#9;&#9;&#9;dataReader.Close();&#10;&#9;&#9;&#125;&#10;&#9;&#9;dataReader = null;&#10;&#10;&#9;&#9;//&#38144;&#27585;Connection&#10;&#9;&#9;if(dbConnection != null)&#123;&#10;&#9;&#9;&#9;dbConnection.Close();&#10;&#9;&#9;&#125;&#10;&#9;&#9;dbConnection = null;&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#35835;&#21462;&#25972;&#24352;&#25968;&#25454;&#34920;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The full table.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;tableName&#34;&#62;&#25968;&#25454;&#34920;&#21517;&#31216;&#60;/param&#62;&#10;&#9;public SqliteDataReader ReadFullTable(string tableName)&#10;&#9;&#123;&#10;&#9;&#9;string queryString = &#34;SELECT * FROM &#34; + tableName;&#10;&#9;&#9;return ExecuteQuery (queryString);&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#21521;&#25351;&#23450;&#25968;&#25454;&#34920;&#20013;&#25554;&#20837;&#25968;&#25454;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The values.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;tableName&#34;&#62;&#25968;&#25454;&#34920;&#21517;&#31216;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;values&#34;&#62;&#25554;&#20837;&#30340;&#25968;&#20540;&#60;/param&#62;&#10;&#9;public SqliteDataReader InsertValues(string tableName,string[] values)&#10;&#9;&#123;&#10;&#9;&#9;//&#33719;&#21462;&#25968;&#25454;&#34920;&#20013;&#23383;&#27573;&#25968;&#30446;&#10;&#9;&#9;int fieldCount=ReadFullTable(tableName).FieldCount;&#10;&#9;&#9;//&#24403;&#25554;&#20837;&#30340;&#25968;&#25454;&#38271;&#24230;&#19981;&#31561;&#20110;&#23383;&#27573;&#25968;&#30446;&#26102;&#24341;&#21457;&#24322;&#24120;&#10;&#9;&#9;if(values.Length!=fieldCount)&#123;&#10;&#9;&#9;&#9;throw new SqliteException(&#34;values.Length!=fieldCount&#34;);&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#9;string queryString = &#34;INSERT INTO &#34; + tableName + &#34; VALUES (&#34; + values[0];&#10;&#9;&#9;for(int i=1; i&#60;values.Length; i++)&#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;queryString+=&#34;, &#34; + values[i];&#10;&#9;&#9;&#125;&#10;&#9;&#9;queryString += &#34; )&#34;;&#10;&#9;&#9;return ExecuteQuery(queryString);&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#26356;&#26032;&#25351;&#23450;&#25968;&#25454;&#34920;&#20869;&#30340;&#25968;&#25454;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The values.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;tableName&#34;&#62;&#25968;&#25454;&#34920;&#21517;&#31216;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;colNames&#34;&#62;&#23383;&#27573;&#21517;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;colValues&#34;&#62;&#23383;&#27573;&#21517;&#23545;&#24212;&#30340;&#25968;&#25454;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;key&#34;&#62;&#20851;&#38190;&#23383;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;value&#34;&#62;&#20851;&#38190;&#23383;&#23545;&#24212;&#30340;&#20540;&#60;/param&#62;&#10;&#9;public SqliteDataReader UpdateValues(string tableName,string[] colNames,string[] colValues,string key,string operation,string value)&#10;&#9;&#123;&#10;&#9;&#9;//&#24403;&#23383;&#27573;&#21517;&#31216;&#21644;&#23383;&#27573;&#25968;&#20540;&#19981;&#23545;&#24212;&#26102;&#24341;&#21457;&#24322;&#24120;&#10;&#9;&#9;if(colNames.Length!=colValues.Length) &#123;&#10;&#9;&#9;&#9;throw new SqliteException(&#34;colNames.Length!=colValues.Length&#34;);&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#9;string queryString = &#34;UPDATE &#34; + tableName + &#34; SET &#34; + colNames[0] + &#34;=&#34; + colValues[0];&#10;&#9;&#9;for(int i=1; i&#60;colValues.Length; i++) &#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;queryString+=&#34;, &#34; + colNames[i] + &#34;=&#34; + colValues[i];&#10;&#9;&#9;&#125;&#10;&#9;&#9;queryString += &#34; WHERE &#34; + key + operation + value;&#10;&#9;&#9;return ExecuteQuery(queryString);&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#21024;&#38500;&#25351;&#23450;&#25968;&#25454;&#34920;&#20869;&#30340;&#25968;&#25454;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The values.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;tableName&#34;&#62;&#25968;&#25454;&#34920;&#21517;&#31216;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;colNames&#34;&#62;&#23383;&#27573;&#21517;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;colValues&#34;&#62;&#23383;&#27573;&#21517;&#23545;&#24212;&#30340;&#25968;&#25454;&#60;/param&#62;&#10;&#9;public SqliteDataReader DeleteValuesOR(string tableName,string[] colNames,string[] operations,string[] colValues)&#10;&#9;&#123;&#10;&#9;&#9;//&#24403;&#23383;&#27573;&#21517;&#31216;&#21644;&#23383;&#27573;&#25968;&#20540;&#19981;&#23545;&#24212;&#26102;&#24341;&#21457;&#24322;&#24120;&#10;&#9;&#9;if(colNames.Length!=colValues.Length || operations.Length!=colNames.Length || operations.Length!=colValues.Length) &#123;&#10;&#9;&#9;&#9;throw new SqliteException(&#34;colNames.Length!=colValues.Length || operations.Length!=colNames.Length || operations.Length!=colValues.Length&#34;);&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#9;string queryString = &#34;DELETE FROM &#34; + tableName + &#34; WHERE &#34; + colNames[0] + operations[0] + colValues[0];&#10;&#9;&#9;for(int i=1; i&#60;colValues.Length; i++) &#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;queryString+=&#34;OR &#34; + colNames[i] + operations[0] + colValues[i];&#10;&#9;&#9;&#125;&#10;&#9;&#9;return ExecuteQuery(queryString);&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#21024;&#38500;&#25351;&#23450;&#25968;&#25454;&#34920;&#20869;&#30340;&#25968;&#25454;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The values.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;tableName&#34;&#62;&#25968;&#25454;&#34920;&#21517;&#31216;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;colNames&#34;&#62;&#23383;&#27573;&#21517;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;colValues&#34;&#62;&#23383;&#27573;&#21517;&#23545;&#24212;&#30340;&#25968;&#25454;&#60;/param&#62;&#10;&#9;public SqliteDataReader DeleteValuesAND(string tableName,string[] colNames,string[] operations,string[] colValues)&#10;&#9;&#123;&#10;&#9;&#9;//&#24403;&#23383;&#27573;&#21517;&#31216;&#21644;&#23383;&#27573;&#25968;&#20540;&#19981;&#23545;&#24212;&#26102;&#24341;&#21457;&#24322;&#24120;&#10;&#9;&#9;if(colNames.Length!=colValues.Length || operations.Length!=colNames.Length || operations.Length!=colValues.Length) &#123;&#10;&#9;&#9;&#9;throw new SqliteException(&#34;colNames.Length!=colValues.Length || operations.Length!=colNames.Length || operations.Length!=colValues.Length&#34;);&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#9;string queryString = &#34;DELETE FROM &#34; + tableName + &#34; WHERE &#34; + colNames[0] + operations[0] + colValues[0];&#10;&#9;&#9;for(int i=1; i&#60;colValues.Length; i++) &#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;queryString+=&#34; AND &#34; + colNames[i] + operations[i] + colValues[i];&#10;&#9;&#9;&#125;&#10;&#9;&#9;return ExecuteQuery(queryString);&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#21019;&#24314;&#25968;&#25454;&#34920;&#10;&#9;/// &#60;/summary&#62; +&#10;&#9;/// &#60;returns&#62;The table.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;tableName&#34;&#62;&#25968;&#25454;&#34920;&#21517;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;colNames&#34;&#62;&#23383;&#27573;&#21517;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;colTypes&#34;&#62;&#23383;&#27573;&#21517;&#31867;&#22411;&#60;/param&#62;&#10;&#9;public SqliteDataReader CreateTable(string tableName,string[] colNames,string[] colTypes)&#10;&#9;&#123;&#10;&#9;&#9;string queryString = &#34;CREATE TABLE &#34; + tableName + &#34;( &#34; + colNames [0] + &#34; &#34; + colTypes [0];&#10;&#9;&#9;for (int i=1; i&#60;colNames.Length; i++) &#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;queryString+=&#34;, &#34; + colNames[i] + &#34; &#34; + colTypes[i];&#10;&#9;&#9;&#125;&#10;&#9;&#9;queryString+= &#34;  ) &#34;;&#10;&#9;&#9;return ExecuteQuery(queryString);&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// Reads the table.&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The table.&#60;/returns&#62;&#10;&#9;/// &#60;param name=&#34;tableName&#34;&#62;Table name.&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;items&#34;&#62;Items.&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;colNames&#34;&#62;Col names.&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;operations&#34;&#62;Operations.&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;colValues&#34;&#62;Col values.&#60;/param&#62;&#10;&#9;public SqliteDataReader ReadTable(string tableName,string[] items,string[] colNames,string[] operations, string[] colValues)&#10;&#9;&#123;&#10;&#9;&#9;string queryString = &#34;SELECT &#34; + items [0];&#10;&#9;&#9;for (int i=1; i&#60;items.Length; i++) &#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;queryString+=&#34;, &#34; + items[i];&#10;&#9;&#9;&#125;&#10;&#9;&#9;queryString += &#34; FROM &#34; + tableName + &#34; WHERE &#34; + colNames[0] + &#34; &#34; +  operations[0] + &#34; &#34; + colValues[0];&#10;&#9;&#9;for (int i=0; i&#60;colNames.Length; i++) &#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;queryString+=&#34; AND &#34; + colNames[i] + &#34; &#34; + operations[i] + &#34; &#34; + colValues[0] + &#34; &#34;;&#10;&#9;&#9;&#125;&#10;&#9;&#9;return ExecuteQuery(queryString);&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;SQLiteHelper类主要实现了数据库、数据表的创建以及数据表中记录的增加、删除、更新、读取四种基本功能。该类最初由国外的Unity3D开发者发布在<a href="http://forum.unity3d.com/threads/28500-SQLite-Class-Easier-Database-Stuff" target="_blank" rel="external">Unity3D官方论坛</a>,后来经<a href="http://www.xuanyusong.com/archives/831" target="_blank" rel="external">宣雨松</a>使用C#进行重写，我在此基础上进行了完善，再此对两位大神的无私付出表示感谢。这里要说明的有三点：</p>
<ul>
<li><p>一、在Unity3D编辑器下生成数据库文件(.db)默认位于和Assets目录同级的位置，即项目的工程文件夹中。我们可以通过修改路径在改变数据库文件的存储位置，具体来讲：<br>Windows平台：data source=Application.dataPath/数据库名称.db<br>IOS平台：data source=Application.persistentDataPath/数据库名称.db<br>Android平台：URL=file:Application.persistentDataPath/数据库名称.db(我想说Android平台就是个奇葩，搞什么特殊化嘛)</p>
</li>
<li><p>二、确保Unity3D编辑器中的.NET版本和MonoDevelop中的.NET版本都为2.0版本，在Unity3D中打包导出的程序可能不会保留数据库文件，因此需要手动将数据库文件拷贝到相应的位置，当然更加合理的方案是将数据库文件存放到StreamingAssets文件夹下，然后在第一次加载游戏的时候将数据库文件复制到对应平台上的存放位置。</p>
</li>
<li><p>三、在使用InsertValues方法时请参考SQLite中字段类型与C#中数据类型的对应关系，博主目前测试了int类型和string类型都没有什么问题，更多类型的数据请大家自行测试然后告诉博主测试的结果，如果大家有兴趣扩展这个辅助类的话可以自行去扩展哦，嘿嘿！</p>
</li>
</ul>
<p>&emsp;&emsp;好了，千呼万唤始出来的时候到了，下面我们以一个实例来完成今天的项目讲解，因为我们已经定义好了SQLite的辅助类，因此我们可以快速地编写出下面的脚本代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;&#10;using System.Collections;&#10;using System.IO;&#10;using Mono.Data.Sqlite;&#10;&#10;public class SQLiteDemo : MonoBehaviour &#10;&#123;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// SQLite&#25968;&#25454;&#24211;&#36741;&#21161;&#31867;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;private SQLiteHelper sql;&#10;&#10;&#9;void Start () &#10;&#9;&#123;&#10;&#9;&#9;//&#21019;&#24314;&#21517;&#20026;sqlite4unity&#30340;&#25968;&#25454;&#24211;&#10;&#9;&#9;sql = new SQLiteHelper(&#34;data source=sqlite4unity.db&#34;);&#10;&#10;&#9;&#9;//&#21019;&#24314;&#21517;&#20026;table1&#30340;&#25968;&#25454;&#34920;&#10;&#9;&#9;sql.CreateTable(&#34;table1&#34;,new string[]&#123;&#34;ID&#34;,&#34;Name&#34;,&#34;Age&#34;,&#34;Email&#34;&#125;,new string[]&#123;&#34;INTEGER&#34;,&#34;TEXT&#34;,&#34;INTEGER&#34;,&#34;TEXT&#34;&#125;);&#10;&#10;&#9;&#9;//&#25554;&#20837;&#20004;&#26465;&#25968;&#25454;&#10;&#9;&#9;sql.InsertValues(&#34;table1&#34;,new string[]&#123;&#34;&#39;1&#39;&#34;,&#34;&#39;&#24352;&#19977;&#39;&#34;,&#34;&#39;22&#39;&#34;,&#34;&#39;Zhang3@163.com&#39;&#34;&#125;);&#10;&#9;&#9;sql.InsertValues(&#34;table1&#34;,new string[]&#123;&#34;&#39;2&#39;&#34;,&#34;&#39;&#26446;&#22235;&#39;&#34;,&#34;&#39;25&#39;&#34;,&#34;&#39;Li4@163.com&#39;&#34;&#125;);&#10;&#10;&#9;&#9;//&#26356;&#26032;&#25968;&#25454;&#65292;&#23558;Name=&#34;&#24352;&#19977;&#34;&#30340;&#35760;&#24405;&#20013;&#30340;Name&#25913;&#20026;&#34;Zhang3&#34;&#10;&#9;&#9;sql.UpdateValues(&#34;table1&#34;, new string[]&#123;&#34;Name&#34;&#125;, new string[]&#123;&#34;&#39;Zhang3&#39;&#34;&#125;, &#34;Name&#34;, &#34;=&#34;, &#34;&#39;&#24352;&#19977;&#39;&#34;);&#10;&#10;&#9;&#9;//&#25554;&#20837;3&#26465;&#25968;&#25454;&#10;&#9;&#9;sql.InsertValues(&#34;table1&#34;,new string[]&#123;&#34;3&#34;,&#34;&#39;&#29579;&#20116;&#39;&#34;,&#34;25&#34;,&#34;&#39;Wang5@163.com&#39;&#34;&#125;);&#10;&#9;&#9;sql.InsertValues(&#34;table1&#34;,new string[]&#123;&#34;4&#34;,&#34;&#39;&#29579;&#20116;&#39;&#34;,&#34;26&#34;,&#34;&#39;Wang5@163.com&#39;&#34;&#125;);&#10;&#9;&#9;sql.InsertValues(&#34;table1&#34;,new string[]&#123;&#34;5&#34;,&#34;&#39;&#29579;&#20116;&#39;&#34;,&#34;27&#34;,&#34;&#39;Wang5@163.com&#39;&#34;&#125;);&#10;&#10;&#9;&#9;//&#21024;&#38500;Name=&#34;&#29579;&#20116;&#34;&#19988;Age=26&#30340;&#35760;&#24405;,DeleteValuesOR&#26041;&#27861;&#31867;&#20284;&#10;&#9;&#9;sql.DeleteValuesAND(&#34;table1&#34;, new string[]&#123;&#34;Name&#34;,&#34;Age&#34;&#125;, new string[]&#123;&#34;=&#34;,&#34;=&#34;&#125;, new string[]&#123;&#34;&#39;&#29579;&#20116;&#39;&#34;,&#34;&#39;26&#39;&#34;&#125;);&#10;&#10;&#9;&#9;//&#35835;&#21462;&#25972;&#24352;&#34920;&#10;&#9;&#9;SqliteDataReader reader = sql.ReadFullTable (&#34;table1&#34;);&#10;&#9;&#9;while(reader.Read()) &#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;//&#35835;&#21462;ID&#10;&#9;&#9;&#9;Debug.Log(reader.GetInt32(reader.GetOrdinal(&#34;ID&#34;)));&#10;&#9;&#9;&#9;//&#35835;&#21462;Name&#10;&#9;&#9;&#9;Debug.Log(reader.GetString(reader.GetOrdinal(&#34;Name&#34;)));&#10;&#9;&#9;&#9;//&#35835;&#21462;Age&#10;&#9;&#9;&#9;Debug.Log(reader.GetInt32(reader.GetOrdinal(&#34;Age&#34;)));&#10;&#9;&#9;&#9;//&#35835;&#21462;Email&#10;&#9;&#9;&#9;Debug.Log(reader.GetString(reader.GetOrdinal(&#34;Email&#34;)));&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#9;//&#35835;&#21462;&#25968;&#25454;&#34920;&#20013;Age&#62;=25&#30340;&#25152;&#26377;&#35760;&#24405;&#30340;ID&#21644;Name&#10;&#9;&#9;reader = sql.ReadTable (&#34;table1&#34;, new string[]&#123;&#34;ID&#34;,&#34;Name&#34;&#125;, new string[]&#123;&#34;Age&#34;&#125;, new string[]&#123;&#34;&#62;=&#34;&#125;, new string[]&#123;&#34;&#39;25&#39;&#34;&#125;);&#10;&#9;&#9;while(reader.Read()) &#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;//&#35835;&#21462;ID&#10;&#9;&#9;&#9;Debug.Log(reader.GetInt32(reader.GetOrdinal(&#34;ID&#34;)));&#10;&#9;&#9;&#9;//&#35835;&#21462;Name&#10;&#9;&#9;&#9;Debug.Log(reader.GetString(reader.GetOrdinal(&#34;Name&#34;)));&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#9;//&#33258;&#23450;&#20041;SQL,&#21024;&#38500;&#25968;&#25454;&#34920;&#20013;&#25152;&#26377;Name=&#34;&#29579;&#20116;&#34;&#30340;&#35760;&#24405;&#10;&#9;&#9;sql.ExecuteQuery(&#34;DELETE FROM table1 WHERE NAME=&#39;&#29579;&#20116;&#39;&#34;);&#10;&#10;&#9;&#9;//&#20851;&#38381;&#25968;&#25454;&#24211;&#36830;&#25509;&#10;&#9;&#9;sql.CloseConnection();&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在上面的代码中我们是在Start方法中创建了数据库和数据表，然而在实际使用中我们需要判断数据库和数据表是否存在，因此如果你使用这段脚本提示错误信息，请确保数据库和数据表是否已经存在。好了，下面的截图展示了程序运行的结果：</p>
<p><img src="http://img.blog.csdn.net/20150709094136317" alt="数据库效果演示"></p>
<p><img src="http://img.blog.csdn.net/20150709094212852" alt="Unity3D效果展示"></p>
<p>&emsp;&emsp;作为一个强大的数据库怎么能没有图形化的数据库管理工具呢？所以这里博主向大家推荐一个免安装的小工具SqliteStudio，使用这个工具可以帮助我们方便地管理Sqlite数据库里的数据，这样是不是比较方便呢？哈哈！这个工具可以从<a href="http://pan.baidu.com/s/1hqldZ3A" target="_blank" rel="external">这里</a>下载哦！</p>
<p><img src="http://img.blog.csdn.net/20150709094346962" alt="SQLiteStudio界面演示"></p>
<p>&emsp;&emsp;好了，今天的内容就是这样了，为了写这篇文章花了三个晚上准备，希望大家喜欢啊！如果大家觉得这篇文章有用，请继续关注我的博客，我是秦元培，我的博客地址是<a href="http://blog.csdn.net/qinyuanpei" target="_blank" rel="external">http://blog.csdn.net/qinyuanpei</a>。</p>
<p>&emsp;&emsp;<strong>2015年11月3日更新内容如下</strong>：不同平台上的数据库存储路径<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//各平台下数据库存储的绝对路径(通用)</span><br><span class="line">//PC：<span class="variable">sql =</span> new SQLiteHelper(<span class="string">"data source="</span> + Application.dataPath + <span class="string">"/sqlite4unity.db"</span>);</span><br><span class="line">//Mac：<span class="variable">sql =</span> new SQLiteHelper(<span class="string">"data source="</span> + Application.dataPath + <span class="string">"/sqlite4unity.db"</span>);</span><br><span class="line">//Android：<span class="variable">sql =</span> new SQLiteHelper(<span class="string">"URI=file:"</span> + Application.persistentDataPath + <span class="string">"/sqlite4unity.db"</span>);</span><br><span class="line">//iOS：<span class="variable">sql =</span> new SQLiteHelper(<span class="string">"data source="</span> + Application.persistentDataPath + <span class="string">"/sqlite4unity.db"</span>);</span><br><span class="line"></span><br><span class="line">//PC平台下的相对路径</span><br><span class="line">//<span class="variable">sql =</span> new SQLiteHelper(<span class="string">"data source="</span>sqlite4unity.db<span class="string">");</span><br><span class="line">//编辑器：Assets/sqlite4unity.db</span><br><span class="line">//编译后：和AppName.exe同级的目录下，这里比较奇葩</span><br><span class="line">//当然可以用更随意的方式sql = new SQLiteHelper("</span>data <span class="variable">source=</span><span class="string">"D://SQLite//sqlite4unity.db"</span>);</span><br><span class="line">//确保路径存在即可否则会发生错误</span><br><span class="line"></span><br><span class="line">//如果是事先创建了一份数据库</span><br><span class="line">//可以将这个数据库放置在StreamingAssets目录下然后再拷贝到</span><br><span class="line">//Application.persistentDataPath + <span class="string">"/sqlite4unity.db"</span>路径即可</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;各位朋友大家好，欢迎大家关注我的博客，我是秦元培，我是博客地址是<a href="http://blog.csdn.net/qinyuanpei">http://blog.csdn.net/qinyuanpei</a>。在经历了一段时间的忙碌后，博主终于有时间来研究新的东西啦，今天博客向和大家一起交流的内容是在Unity3D游戏开发中使用SQLite进行数据库开发，坦白来讲，在我的技术体系中Web和数据库是相对薄弱的两个部分，因此正好这段时间项目需要和服务器、数据库进行交互，因此在接下来的文章中博主可能会更加倾向于讲解这方面的内容，希望大家能够喜欢啊！</p>]]>
    
    </summary>
    
      <category term="SQLite" scheme="http://qinyuanpei.com/tags/SQLite/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="数据库" scheme="http://qinyuanpei.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unity3D游戏开发之从Unity3D项目版本控制说起]]></title>
    <link href="http://qinyuanpei.com/2015/07/02/unity3d-version-control/"/>
    <id>http://qinyuanpei.com/2015/07/02/unity3d-version-control/</id>
    <published>2015-07-02T01:35:42.000Z</published>
    <updated>2015-07-02T01:57:36.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;各位朋友，大家好，欢迎大家关注我的博客，我是秦元培，我的独立博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>、CSDN博客地址是<a href="http://blog.csdn.net/qinyuanpei" target="_blank" rel="external">http://blog.csdn.net/qinyuanpei</a>。今天我想和大家聊聊Unity3D游戏项目的版本控制。</p>
<a id="more"></a>
<h2 id="1、为什么要进行版本控制？">1、为什么要进行版本控制？</h2><p>&emsp;&emsp;当我一个人写代码的时候，在我的脑海中是不存在版本控制这个概念的，因为我对整个项目的代码如数家珍。可是当我和一群人在一起写代码的时候，我可能并不会清楚团队中有谁修改了哪一行代码，即使是一个变量的名称或者是一个函数的名称，在我毫不知情的情况下，可能这样的修改会使得程序无法运行，这个时候我需要版本控制；尽管Unity3D是一个适合小团队开发的游戏引擎，可是即使再小的团队同样会有不同的分工，当大家需要将各自的工作合并到一个完整的项目中的时候，这个时候我需要版本控制；当我需要了解团队成员实际的编程能力的时候，最好的方法是让他们参与到一个项目的开发中，这样我可以从他提交代码的情况了解他的工作能力，这个时候我需要版本控制；当我希望时时刻刻对项目进行备份，并在某一个关键的时刻将项目恢复到一个正确的状态的时候，复制、黏贴不会让这个工作变得简单，这个时候我需要版本控制。</p>
<h2 id="2、怎样在Unity3D中进行版本控制？">2、怎样在Unity3D中进行版本控制？</h2><p>&emsp;&emsp;在Unity3D中进行版本控制主要针对Assets和ProjectSetting这两个文件夹，因为除此以外的文件和文件夹都是Unity3D在运行过程中产生的临时文件，这些文件会在使用Unity3D打开项目后重新生成，因此无需对这些文件或文件夹进行版本控制。好了，在了解了Unity3D版本控制中需要关注的主要内容后，接下来我们要关注的是怎样让版本控制的软件对我们提交的内容进行差异化识别，我们知道版本控制的一个核心任务就是将服务器上的文件和本地的文件进行比对，找出哪些文件是最新生成的、哪些文件是被修改过的等等。因此为了方便版本控制软件对文件进行比对，常常需要项目变动的这些因素转化为文本形式，如果熟悉Github的朋友应该知道，Github中判断两个文件的差异就是根据文本(代码)来比较的，因此在Unity3D中使用版本控制同样需要遵循这个原则，好在Unity3D在管理Unity3D项目时已经考虑到了这一点，通常在对Unity3D项目进行版本控制的时候，我们需要做这样的事情：</p>
<ul>
<li><p>通过Edit-&gt;Project Settings-&gt;Editor菜单打开编辑器设置选项，将Version Control选项下的Mode设为Visual Meta Files，这样Unity3D将为项目中的每个文件或者每个文件夹生成对应的.Meta文件。该文件是一个文本文件，记录了对应文件的相关信息，版本控制软件可以以此来对文件版本进行对比和合并操作。</p>
</li>
<li><p>Unity3D中的资源默认是以二进制的形式进行组织的，这种组织方式对版本控制来说是不合适的，因此需要通过通过Edit-&gt;Project Settings-&gt;Editor菜单打开编辑器设置选项，将Asset Serialization下的Mode设为Force Text。</p>
</li>
<li><p>通过Edit-&gt;Prefences-&gt;External Tools找到Revision Control Diff/Merge选项，在安装了版本控制软件后可以在这里找到相关的选项，以博主为例，博主使用的是TortoiseSVN，这里的选项是TortoiseMegre。目前Unity3D支持的版本控制软件有SourceGear DiffMerge、TKDiff、P4Megre、TortoiseMegre、WinMegre、PlasticSCM Megre。</p>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20150702094529611" alt="编辑器设置">      <img src="http://img.blog.csdn.net/20150702094714776" alt="编辑器设置"></p>
<p>&emsp;&emsp;好了，在完成以上准备工作后，我们就可以开始进行Unity3D项目的版本控制了，目前在Unity3D中我们主要有以下三种方式来对Unity3D项目进行版本控制：</p>
<h3 id="2-1、使用Asset_Server进行版本控制">2.1、使用Asset Server进行版本控制</h3><p>&emsp;&emsp;Unity3D的<a href="http://unity3d.com/unity/team/assetserver/" target="_blank" rel="external">Asset Server</a>是一个Unity3D内部集成的版本控制软件，它和我们熟知的SVN类似，适合在小团队内进行版本控制，这是一个收费软件，尽管在某些方面它甚至比SVN还要方便，不过在实际的项目中使用这个的还是比较少的，所以如果大家对这个感兴趣，可以从这里了解它的具体情况，这里我们不打算介绍这个软件的使用。</p>
<p><a href="http://blog.csdn.net/amazonzx/article/details/7980117" target="_blank" rel="external">Unity3D游戏制作（四）——Asset Server搭建</a></p>
<p><a href="http://tieba.baidu.com/p/2419391804" target="_blank" rel="external">【教程】Asset Server（联合开发）</a></p>
<h3 id="2-2、使用Github进行版本控制">2.2、使用Github进行版本控制</h3><p>&emsp;&emsp;使用Github进行版本控制时可以在Git仓库中添加一个.gitignore文件来对项目中需要同步的文件进行过滤，在文章开始我们已经知道Unity3D项目的版本控制主要针对Assets和ProjectSetting这两个文件，因此.gitignore的内容可以这样填写:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Library/</span><br><span class="line">Temp/</span><br><span class="line">*<span class="class">.sln</span></span><br><span class="line">*<span class="class">.csproj</span></span><br><span class="line">*<span class="class">.sln</span></span><br><span class="line">*<span class="class">.userprefs</span></span><br><span class="line">*<span class="class">.unityproj</span></span><br><span class="line">*.DS_Store</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这样每次提交文件的时候Github将忽略这些文件的更改。关于Github的使用及其相关命令可以查看这里：</p>
<p><a href="http://www.cnblogs.com/lwzz/archive/2013/02/23/2921426.html" target="_blank" rel="external">总结自己的Git常用命令</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">Git远程操作详解</a></p>
<p>&emsp;&emsp;Github中每个仓库的容量限制为1G，适合小项目的版本控制，对于大型项目的版本控制应该考虑使用SVN。</p>
<h3 id="2-3、使用SVN进行版本控制">2.3、使用SVN进行版本控制</h3><p>&emsp;&emsp;使用SVN进行版本控制时可以通过右键菜单将某些文件和文件夹添加到忽略的文件列表中，这样SVN在每次提交文件的时候将忽略这些文件的更改。这块儿其实和Github的.gitignore是相同的。SVN常用的软件组合是 TortoiseSVN(客户端)+VisualSVN Server(服务端)，具体内容请参考这2篇文章：<a href="http://www.cnblogs.com/armyfai/p/3985660.html" target="_blank" rel="external">SVN使用教程总结</a>和<a href="http://blog.chinaunix.net/uid-27004869-id-4112057.html" target="_blank" rel="external">客户端TortoiseSVN的安装及使用方法 </a></p>
<h2 id="3、小结">3、小结</h2><p>&emsp;&emsp;不管使用什么版本控制软件，建立相关的代码提交规范和流程控制规范都是必要的，因此在团队中应该有一个人负责对团队成员提交的代码进行审核和规范化，这样可以减少因为因为代码提交而产生的各种问题。好了，今天这篇文章先写到这里了，希望大家喜欢！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;各位朋友，大家好，欢迎大家关注我的博客，我是秦元培，我的独立博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>、CSDN博客地址是<a href="http://blog.csdn.net/qinyuanpei">http://blog.csdn.net/qinyuanpei</a>。今天我想和大家聊聊Unity3D游戏项目的版本控制。</p>]]>
    
    </summary>
    
      <category term="Github" scheme="http://qinyuanpei.com/tags/Github/"/>
    
      <category term="SVN" scheme="http://qinyuanpei.com/tags/SVN/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="版本控制" scheme="http://qinyuanpei.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/categories/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unity3D游戏开发之路：一月工作总结]]></title>
    <link href="http://qinyuanpei.com/2015/06/24/work-in-a-month/"/>
    <id>http://qinyuanpei.com/2015/06/24/work-in-a-month/</id>
    <published>2015-06-23T23:42:48.000Z</published>
    <updated>2015-10-09T08:59:54.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;不知不觉已经在公司上班一个月了，在这一个月里每一天发生的事情是我平凡而普通的生活。作为一名有节操的程序员，当我大学的同学开始称我为程序员的时候，我知道我即将在这条路上踏下一个属于开始的足迹。和我大学的同学相比，可能我会显得幸运而孤独吧！我不用像他们一样到各种工厂里采样、监测，可是与此同时我会因为离大家越来越远而感到孤独。每天下班做公交车回到住处，简单地料理着我一个人的生活，不紧不慢却永远是一个人在摸黑赶路，这是我自己选择的路，我从来不曾后悔，即使在这段时间和美术各种闹别扭，我相信这些都会是暂时的，以后总会变得越来越好。</p>
<a id="more"></a>
<p>&emsp;&emsp;第一份工作没有想象中的高大上，这是一个融合了3D漫游、Web和电子商务的综合项目，可我想说我在努力地做好这件事情。当互联网+的概念被人们所熟知以后，传统行业和互联网的结合让人们对未来的生活充满了遐想，因为在这个过程中不断涌现出想要迫切进入互联网+时代的传统行业。可是当传统行业试图进入互联网行业的时候，我不知道传统行业经营者心中到底对互联网行业了解多少。我的第一份工作在家人的口中被演绎出了三个不同的版本，我想这就是传统行业对互联网行业认识的一种缩影吧，那就是传统行业并不了解互联网行业，当他们想要做互联网+的时候可能更多的是脑海中一闪而过的热情吧！</p>
<p>&emsp;&emsp;我的一位朋友告诉我，当你处在传统行业和互联网行业的十字路口的时候，你首先要虚心地了解和掌握传统行业的运作模式，然后再尝试将其和互联网结合起来。可是更为实际的情况是当这些传统行业的经营者有了进入互联网行业的想法以后，可能并不会从互联网的行业来看待这个想法，甚至片面的认为这个项目已然成竹在胸我们需要的仅仅是两三个懂技术的人就好了。这种想法其实是特别可怕的，以公司为例，从我进公司以来，公司从未对即将要做的项目进行过技术上的评估和立项讨论，公司的大部分美术甚至都不知道有这样一个项目存在、更不知道做好的模型要运用到一个怎样的技术上去以及最终会以什么样的方式呈现给用户。我所看到的情况就是公司里没日没夜的做模型。我想这就是领导脑袋一热的结果吧，大概知道要做一个什么样的东西，可是对具体怎么实施这个项目、实施这个项目需要哪些资源却没有详细的思考。我进公司这么长时间，基本没有看到过成文的策划或者是方案，更多的时候是大家在一块儿做，然后做的过程中发现有什么问题再返回去改，领导的态度从来没有准，觉得什么东西可以借鉴过来就要求程序和美术去实现，计划朝令夕改内心深处就不知道自己想做什么。我在公司从法律上来讲应该是一名普通员工，可是在很多时候我不得不担当项目管理者的角色。或许在这样的情况下，我可能会收获比普通员工更为丰富的除技术以外的经验，可是从长远发展的角度来看，只会让我内心更加厌倦目前的生活，希望早一天离开这家公司！</p>
<h1 id="1、项目该谁说了算？">1、项目该谁说了算？</h1><p>&emsp;&emsp;在一个没有策划的团队里，美术和程序就像水火不容的两股势力此消彼长。虽然说作为一名有节操的程序员，我的内心是拒绝让策划来领导程序的。因为在游戏网游化的今天，在国内基本是找不到多少对历史、人文、宗教等领域都有研究的策划的。在过去开发一款游戏，可能在游戏的世界观的构建上都需要花费很长的时间去研究相关的资料，可是在策划办公软件化的今天，策划关注的重点早已不再是游戏的世界观这些深层次的内容了，大家的关注点在什么地方呢？可能都在关注游戏的盈利和各种游戏系统数值的设计上吧，这一点我不想做太多的说明，因为大家都明白是怎么回事啦！好了，那么现在的问题是我们处在一个没有策划的团队里，如果程序按照美术的思路去做，可能程序会在修改了若干次项目以后对美术的要求失去信心，因为相对于程序解决问题而言，作为美术的普通人提出需求的难度显然更低。可是如果按程序的思路去做，可能美术不大会接受程序的审美，因为从我自己的角度来讲，程序更喜欢纯粹而简洁的东西、更看重能否解决问题，好不好看通常都是在考虑了这些问题后再去考虑的。</p>
<p>&emsp;&emsp;我进公司以后，基本经历了这样两种做事方式的洗礼，刚开始技术这边和我说了大概思路，然后我做出了第一个原型(1.0版本),结果这个思路和公司的思路完全是两个东西，因此1.0版本就在这样被扼杀在襁褓中。接下来，美术提出了先做UI,然后我们在等待她们做UI的过程中重新审视了这个项目，那段时间天天往隔壁办公室跑，搞得那个办公室里的妹子每次看到我进去都要抬起头看一下。每天跑来跑去做什么呢？答案是沟通，和领导沟通、和美术沟通，目的是在相互沟通的基础上加深对项目需求的理解。等到美术的UI做出来以后，我们就准备做UI了，结果做到一半的时候，领导说UI设计不合格，被打回去重新做，然后我们花了一周时间开会讨论，我从一开始没有资格参与公司会议变成了每次会议都要参加，我不知道这对我是好事还是坏事，说好事吧是因为我终于有发言权了，说坏事吧是因为经常和美术争得面红耳赤，总之每次开完会我都忍不住要吐槽下。</p>
<p>&emsp;&emsp;那么好了，各位看官，说到这里我无非是想告诉大家一个简单到不能再简单的道理：凡事预则立，不预则废。这就是说我们在做一件事情前一定要做好规划，游戏开发是一个特别考验团队合作的工作，如果在这个过程中我们没有在项目立项前做好充足的准备，就会很容易出现上面的问题。当我了解到仙剑项目立项就需要三个月的时候，我深深地感受到了这些传统行业经营者们的脑门一拍的决定是多么的不靠谱啊。在知乎上曾经看到过说”项目万事俱备，再差个程序员就好了”的类似言论，其实说这句话的往往就是这些自命不凡的传统行业经营者们，当你觉得一个项目仅仅需要若干个程序员就够了的时候，恰恰说明你还不够懂互联网行业！</p>
<h1 id="2、猪一样的队友">2、猪一样的队友</h1><p>&emsp;&emsp;我身边许多玩LOL的人都在吐槽打匹配的时候遇到的都是猪一样的队友，这种情况在项目开发中则更为常见。我不知道美术出身的领导怎么会认为程序员越多项目进度就越能赶上。做项目不是大家一块儿做模型，每个人分给几个然后用着破解版的3DsMax就搞定了。程序在我看来更应该在保证人员配备合理的基础上保证质量。</p>
<p>&emsp;&emsp;首先第一条，人员配备合理就是说程序员的数量要合理，其次大家的层次差别应该不会太大。因为人多了的话，对项目代码的影响可能更大，尤其是当大家编程的风格和技术水平存在差异的时候，体现在项目中就是各种未知的Bug。为什么要求大家的层次差别不大呢，因为层次差别太大，首先团队内沟通就是问题，以我为例，我手下的两个人都是培训班培训出来的，基本上就是老师给一套视频然后照着视频做出一款游戏就结束了，我一直反感用视频的方式来学习游戏开发，因为你是在学习一个游戏引擎而不是在学习一个工具软件，虽然Unity3D提供了可视化编辑器，可是在我眼里它始终都是一个游戏引擎，而非一个类似Office或者是3D软件的东西。那么我想说的是什么呢？我想说的是不要把编程当作一种固定的套路，经常有人直接抄我博客里的代码直接运行项目，然后出了各种问题再来问我怎么回事？碰到这种情况我首先问的第一句话是你能不能明白这个代码是干什么的？如果对方不理解，我一般会先让它搞懂这些代码的意义。</p>
<p>&emsp;&emsp;我们公司里的美术都不愿意碰Unity3D，因为他们觉得这个游戏引擎会增加他们学习软件的各种成本，可是事实是这个游戏引擎比我见过的Max、Maya、Blender等软件都简单啊，而且Unity3D免费版的就可以开发简单地游戏，比之美术口中各种不择手段的盗版、破解软件不知道要干净了多少？归根到底一句话，美术不愿意尝试新的东西，美术总认为Max里的模型导出到Unity3D后材质啊、灯光啊会丢，美术总认为Max渲染的效果要比Unity3D好许多，可是既然你选择了这个引擎来做项目，我觉得美术是有责任来了解这个引擎的，你让程序员帮你拼UI我可以接受，可是你让程序员帮你打灯光、修改材质、摆场景，这是程序员该做的事情嘛?我说虚幻四这样的引擎都是由策划来编辑关卡的，为什么你们美术就不能尝试了解下这个引擎呢？得到的答案是我们要做模型，显然当美术的眼睛只盯着手头的那几样工具软件的时候，你和他们间的差距已经拉开，如果有能力、有时间的话，不妨尝试下将编程以外的能力整合到自身的体系中，未来是属于全能型人才的！</p>
<h1 id="3、怎样让项目流程化">3、怎样让项目流程化</h1><p>&emsp;&emsp;我觉得像游戏这样负责的软件工程，在立项之初就应该明确美术、策划、程序各自的责任。我的想法是美术来制作素材、程序来编写相关逻辑和外部工具、策划使用外部工具来编辑关卡。</p>
<p>&emsp;&emsp;在我来公司前，曾看过一位前辈写过的关于这个项目的一个Demo，当初这个Demo里只有两个场景，我最初是对这位前辈颇为敬重的，因为感觉这个Demo的表现还不错，甚至觉得如果能够得到这个前辈指点一二，实乃三生有幸啊。可是当我和这位前辈聊过以后以及看过他写的代码，我对他的敬重慢慢地变成了鄙夷。这是为什么呢？因为他向领导提议使用硬代码来编写项目，通过研究他写的项目，我发现他的项目确实使用硬代码写成的，你能想象在一个脚本中并列7个if仅仅是因为它们的tag不同嘛，你能想象在一个脚本中的命名都是汉语拼音的变量定义嘛。</p>
<p>&emsp;&emsp;抛开他写的项目不说，从规模和负责程度上目前这个项都比他的Demo有难度，首先我们大概需要制作35个场景涉及到上千种模型和贴图而非Demo中的两个场景，其次我们最终的发布平台是Web平台而非Demo中的PC平台。写硬代码意味着放弃复用和扩展性，顾及目前而不考虑以后。可是我们这个项目肯定是需要扩整规模的，难道每次添加一个新的场景都需要把代码重新写一遍，因此这个方案在和他交流的时候我当着他的面就给Pass了，然后他说我们先做个Demo看看，因为在前面我们已经积累了部分代码，所以在这部分代码的基础上我们迅速地完成了一个较为灵活的框架。整个框架是将模型单独打包后和贴图一起存放在服务器上，因为模型和贴图对不同的户型来说都是通用的，因为使用配置文件设计了一个类似数据库的结构，这样当我们在程序中需要某些模型和贴图的时候只需要下载就可以了，因为模型和贴图都被存放在服务器上，本地仅仅存放相关的户型模型和配置文件，因此项目的体积被大大地压缩，从而可以解决Web平台浏览器的压力，因为所有的场景都是使用配置文件来定义，因此当需要更新项目的时候，只需要更新服务器上的模型和贴图以及配置文件即可，提高了项目更新得速度。总体来讲，我对我设计的这个架构表示满意，因为它让硬代码的优越感荡然无存。同时为了减少人工编写配置文件、打包等过程的工作量，通过为Unity3D编写插件的方式实现了整个过程的半自动化。为什么是半自动化啊？因为人在做事情的时候没有统一、规范的习惯或者说难以统一和规范。我一直强调统一和规范，可是美术总认为程序的要求过于苛刻，可是事实上懂得编程的人都明白计算机程序不过是对某个过程的一种模拟，而且这个过程是有限状态的，因此当美术说需要XXX功能的时候，程序员的内心其实是拒绝的，因为为了这点需求，他可能需要写十几行重复的代码，为了满足用户的懒惰和弱智，领导让我们将户型内的物体尽量全部实现动态化，要给用户最大的自由，结果却是剥夺了程序员的自由写了若干个if或者是重复调用相同的方法，这简直是恶魔啊！</p>
<p>&emsp;&emsp;好了，写了这么多，大家可能觉得这不符合我作为一个有节操的程序员的风格，说好的每周一篇技术博客呢？其实技术运用的好坏，完全取决于运用技术的人，所以我们不能仅仅关注技术的高低，更要关注怎样让整个团队高效率、高沟通率的执行下去，因为千里之堤，毁于蚁穴啊，虽然团队间沟通这些东西看似都是些政治或者是形式的东西，可是实际上会占到整个项目开发中相当大的一部分，所以希望大家在看了今天的博客后能够有所启发吧，好了，睡觉，哈哈！今天居然写到了这个时候！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;不知不觉已经在公司上班一个月了，在这一个月里每一天发生的事情是我平凡而普通的生活。作为一名有节操的程序员，当我大学的同学开始称我为程序员的时候，我知道我即将在这条路上踏下一个属于开始的足迹。和我大学的同学相比，可能我会显得幸运而孤独吧！我不用像他们一样到各种工厂里采样、监测，可是与此同时我会因为离大家越来越远而感到孤独。每天下班做公交车回到住处，简单地料理着我一个人的生活，不紧不慢却永远是一个人在摸黑赶路，这是我自己选择的路，我从来不曾后悔，即使在这段时间和美术各种闹别扭，我相信这些都会是暂时的，以后总会变得越来越好。</p>]]>
    
    </summary>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="工作" scheme="http://qinyuanpei.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="生活" scheme="http://qinyuanpei.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="生活感悟" scheme="http://qinyuanpei.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unity3D游戏开发之使用AssetBundle和Xml实现场景的动态加载]]></title>
    <link href="http://qinyuanpei.com/2015/06/15/load-unity3d-scene-dynamicly-with-assetbundle-and-xml/"/>
    <id>http://qinyuanpei.com/2015/06/15/load-unity3d-scene-dynamicly-with-assetbundle-and-xml/</id>
    <published>2015-06-14T23:24:17.000Z</published>
    <updated>2015-10-09T09:17:50.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;各位朋友，大家好，我是秦元培，欢迎大家关注我的博客，我的博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。 今天我想和大家聊聊在Unity3D中关于场景的动态加载的问题。众所周知在Unity3D游戏开发过程中，因为受到游戏容量、平台性能和热更新等诸多因素的限制，我们可能无法将所有的游戏场景打包到项目中然后相对”静态”地加载，那么这个时候就需要我们使用动态加载的方式来将游戏场景加载到场景中。博主在研究了Unity3D动态加载的相关资料后发现，目前Unity3D中实现动态加载场景的方式主要有以下两种方式：<a id="more"></a></p>
<ul>
<li>使用BuildStreamedSceneAssetBundle()方法将场景打包为AssetBundle：这种方法将生成一个流式的.unity3d文件，从而实现按需下载和加载，因此这种方式特别适合Web环境下游戏场景的加载，因为在Web环境下我们可以希望的是玩家可以在玩游戏的同时加载游戏。可是因为这种打包方式仅仅是保证了场景中的GameObject与本地资源的引用关系而非是将本地资源打包，因此从减少游戏容量的角度来说并不是十分实用，而且当我们使用WWW下载完AssetBundle后，需要使用Application.Load()方法来加载场景，我们知道在Unity3D中加载一个关卡(场景)是需要在BuildSetting中注册关卡的，因此在使用这种方式动态加载的时候请注意到这一点。</li>
</ul>
<ul>
<li>将场景内的所有物体打包为AssetBundle配合相关配置文件动态生成场景：这种方法的思路是使用一个配置文件来记录下当前场景中所有物体的位置、旋转和缩放信息，然后再根据配置文件使用Instantiate方法逐个生成即可。这种思路是考虑到需要在一个场景中动态替换GameObject或者是动态生成GameObject的情形，使用这种方法首先要满足一个条件，即：场景内所有的物体都是预制件(Prefab)。这是由Unity3D的机制决定的，因为Prefab是一个模板，当你需要动态生成一个物体的时候就需要为其提供一个模板(Prefab)。</li>
</ul>
<p>&emsp;&emsp;如果你对这两种方式没有什么疑问的话，那么我觉得我们可以正式开始今天的内容了。既然今天的题目已然告诉大家是使用AssetBundle和Xml文件实现场景的动态加载，我相信大家已经明白我要使用那种方式了。好了，下面我们正式开始吧！</p>
<h2 id="准备工作">准备工作</h2><p>&emsp;&emsp;在实现场景的动态加载前，我们首先要在本地准备好一个游戏场景，然后做两件事情：</p>
<ul>
<li>将场景内的所有GameObject打包为AssetBundle</li>
<li>将场景内所有的GameObject的信息导出为Xml文件<br>做这两件事情的时候，相当于我们是在准备食材和菜谱，有了食材和菜谱我们就可以烹制出美味佳肴了。可是在做着两件事情前，我们还有一件更为重要的事情要做，那就是我们需要将场景中使用到的GameObject制作成预制体(Prefab)。因为在博主的印象中，Unity3D打包的最小粒度应该是Prefab，所以为了保险起见，我还是建议大家将场景中使用到的GameObject制作成预制体(Prefab)。那么问题来了，当我们将这些Prefab打包成AssetBundle后是否还需要本地的Prefab文件？这里博主一直迷惑，因为理论上当我们将这些Prefab打包成AssetBundle后，我们实例化一个物体的时候实际上是在使用AssetBundle的Load方法来获取该物体的一个模板，这个模板应该是存储在AssetBundle中的啊！因为我的笔记本使用的是免费版的Unity3D无法对此进行测试，所以如果想知道这个问题结果的朋友可以等我下周到公司以后测试了再做讨论(我不会告诉你公司无耻地使用了破解版)，当然如果有知道这个问题的答案的朋友欢迎给我留言啊，哈哈！这里就是想告诉大家要准备好场景中物体的预设体(Prefab),重要的事情说三遍!!!</li>
</ul>
<h2 id="将场景内物体打包为AssetBundle">将场景内物体打包为AssetBundle</h2><p>&emsp;&emsp;Unity3D打包的相关内容这里就不展开说了，因为在官方API文档中都能找到详细的说明，虽然说Unity5.0中AssetBundle打包的方式发生了变化，不过考虑到大家都还在使用4.X的版本，所以等以后我用上了Unity5.0再说吧，哈哈！好了，下面直接给出代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[MenuItem(&#34;Export/ExportTotal----&#23545;&#29289;&#20307;&#25972;&#20307;&#25171;&#21253;&#34;)]&#10;static void ExportAll()&#10;&#123;&#10;&#9;//&#33719;&#21462;&#20445;&#23384;&#36335;&#24452;&#10;&#9;string savePath=EditorUtility.SaveFilePanel(&#34;&#36755;&#20986;&#20026;AssetBundle&#34;,&#34;&#34;,&#34;New Resource&#34;,&#34;unity3d&#34;);&#10;&#9;if(string.IsNullOrEmpty(savePath)) return;&#10;&#9;//&#33719;&#21462;&#36873;&#25321;&#30340;&#29289;&#20307;&#10;&#9;Object[] objs=Selection.GetFiltered(typeof(Object),SelectionMode.DeepAssets);&#10;&#9;if(objs.Length&#60;0) return;&#10;&#9;//&#25171;&#21253;&#10;&#9;BuildPipeline.BuildAssetBundle(null,objs,savePath,BuildAssetBundleOptions.CollectDependencies|BuildAssetBundleOptions.CompleteAssets);&#10;&#9;AssetDatabase.Refresh();&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="将场景内物体信息导出为Xml文件">将场景内物体信息导出为Xml文件</h2><p>&emsp;&emsp;导出场景内物体信息需要遍历场景中的每个游戏物体，因为我们在制作场景的时候通常会用一个空的GameObject作为父物体来组织场景中的各种物体，因此我们在导出Xml文件的时候仅仅考虑导出这些父物体，因为如果考虑子物体的话，可能会涉及到递归，整个问题将变得特别复杂。为了简化问题，我们这里仅仅考虑场景中的父物体。好了，开始写代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[MenuItem(&#34;Export/ExportScene----&#23558;&#24403;&#21069;&#22330;&#26223;&#23548;&#20986;&#20026;Xml&#34;)]&#10;static void ExportGameObjects()&#10;&#123;&#10;&#9;//&#33719;&#21462;&#24403;&#21069;&#22330;&#26223;&#23436;&#25972;&#36335;&#24452;&#10;&#9;string scenePath=EditorApplication.currentScene;&#10;&#9;//&#33719;&#21462;&#24403;&#21069;&#22330;&#26223;&#21517;&#31216;&#10;&#9;string sceneName=scenePath.Substring(scenePath.LastIndexOf(&#34;/&#34;)+1,scenePath.Length-scenePath.LastIndexOf(&#34;/&#34;)-1);&#10;&#9;sceneName=sceneName.Substring(0,sceneName.LastIndexOf(&#34;.&#34;));&#10;&#9;//&#33719;&#21462;&#20445;&#23384;&#36335;&#24452;&#10;&#9;string savePath=EditorUtility.SaveFilePanel(&#34;&#36755;&#20986;&#22330;&#26223;&#20869;&#29289;&#20307;&#34;,&#34;&#34;,sceneName,&#34;xml&#34;);&#10;&#9;//&#21019;&#24314;Xml&#25991;&#20214;&#10;&#9;XmlDocument xmlDoc=new XmlDocument();&#10;&#9;//&#21019;&#24314;&#26681;&#33410;&#28857;&#10;&#9;XmlElement scene=xmlDoc.CreateElement(&#34;Scene&#34;);&#10;&#9;scene.SetAttribute(&#34;Name&#34;,sceneName);&#10;&#9;scene.SetAttribute(&#34;Asset&#34;,scenePath);&#10;&#9;xmlDoc.AppendChild(scene);&#10;&#9;//&#36941;&#21382;&#22330;&#26223;&#20013;&#30340;&#25152;&#26377;&#29289;&#20307;&#10;&#9;foreach(GameObject go in Object.FindObjectsOfType(typeof(GameObject)))&#10;&#9;&#123;&#10;&#9;&#9;//&#20165;&#23548;&#20986;&#22330;&#26223;&#20013;&#30340;&#29238;&#29289;&#20307;&#10;&#9;&#9;if(go.transform.parent==null)&#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;//&#21019;&#24314;&#27599;&#20010;&#29289;&#20307;&#10;&#9;&#9;&#9;XmlElement gameObject=xmlDoc.CreateElement(&#34;GameObject&#34;);&#10;&#9;&#9;&#9;gameObject.SetAttribute(&#34;Name&#34;,go.name);&#10;&#9;&#9;&#9;gameObject.SetAttribute(&#34;Asset&#34;,&#34;Prefabs/&#34;+ go.name + &#34;.prefab&#34;);&#10;&#9;&#9;&#9;//&#21019;&#24314;Transform&#10;&#9;&#9;&#9;XmlElement transform=xmlDoc.CreateElement(&#34;Transform&#34;);&#10;&#9;&#9;&#9;transform.SetAttribute(&#34;x&#34;,go.transform.position.x.ToString());&#10;&#9;&#9;&#9;transform.SetAttribute(&#34;y&#34;,go.transform.position.y.ToString());&#10;&#9;&#9;&#9;transform.SetAttribute(&#34;z&#34;,go.transform.position.z.ToString());&#10;&#9;&#9;&#9;gameObject.AppendChild(transform);&#10;&#9;&#9;&#9;//&#21019;&#24314;Rotation&#10;&#9;&#9;&#9;XmlElement rotation=xmlDoc.CreateElement(&#34;Rotation&#34;);&#10;&#9;&#9;&#9;rotation.SetAttribute(&#34;x&#34;,go.transform.eulerAngles.x.ToString());&#10;&#9;&#9;&#9;rotation.SetAttribute(&#34;y&#34;,go.transform.eulerAngles.y.ToString());&#10;&#9;&#9;&#9;rotation.SetAttribute(&#34;z&#34;,go.transform.eulerAngles.z.ToString());&#10;&#9;&#9;&#9;gameObject.AppendChild(rotation);&#10;&#9;&#9;&#9;//&#21019;&#24314;Scale&#10;&#9;&#9;&#9;XmlElement scale=xmlDoc.CreateElement(&#34;Scale&#34;);&#10;&#9;&#9;&#9;scale.SetAttribute(&#34;x&#34;,go.transform.localScale.x.ToString());&#10;&#9;&#9;&#9;scale.SetAttribute(&#34;y&#34;,go.transform.localScale.y.ToString());&#10;&#9;&#9;&#9;scale.SetAttribute(&#34;z&#34;,go.transform.localScale.z.ToString());&#10;&#9;&#9;&#9;gameObject.AppendChild(scale);&#10;&#9;&#9;&#9;//&#28155;&#21152;&#29289;&#20307;&#21040;&#26681;&#33410;&#28857;&#10;&#9;&#9;&#9;scene.AppendChild(gameObject);&#10;&#9;&#9;&#125;&#10;&#9;&#125; &#10;&#10;&#9;xmlDoc.Save(savePath);&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;好了，在这段代码中我们以Scene作为根节点，然后以每个GameObject作为Scene的子节点，重点在Xml文件中记录了每个GameObject的名称、Prefab、坐标、旋转和缩放等信息。下面是一个导出场景的Xml文件的部分内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Scene</span> <span class="attribute">Name</span>=<span class="value">"DoneStealth"</span> <span class="attribute">Asset</span>=<span class="value">"Assets/Done/DoneScenes/DoneStealth.unity"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">GameObject</span> <span class="attribute">Name</span>=<span class="value">"char_robotGuard_002"</span> <span class="attribute">Asset</span>=<span class="value">"Prefabs/char_robotGuard_002.prefab"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Transform</span> <span class="attribute">x</span>=<span class="value">"-18.99746"</span> <span class="attribute">y</span>=<span class="value">"0"</span> <span class="attribute">z</span>=<span class="value">"37.2443"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Rotation</span> <span class="attribute">x</span>=<span class="value">"0"</span> <span class="attribute">y</span>=<span class="value">"0"</span> <span class="attribute">z</span>=<span class="value">"0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Scale</span> <span class="attribute">x</span>=<span class="value">"1"</span> <span class="attribute">y</span>=<span class="value">"1"</span> <span class="attribute">z</span>=<span class="value">"1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">GameObject</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">GameObject</span> <span class="attribute">Name</span>=<span class="value">"fx_laserFence_lasers_003"</span> <span class="attribute">Asset</span>=<span class="value">"Prefabs/fx_laserFence_lasers_003.prefab"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Transform</span> <span class="attribute">x</span>=<span class="value">"-17.90294"</span> <span class="attribute">y</span>=<span class="value">"1.213998"</span> <span class="attribute">z</span>=<span class="value">"24.07678"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Rotation</span> <span class="attribute">x</span>=<span class="value">"0"</span> <span class="attribute">y</span>=<span class="value">"90.00001"</span> <span class="attribute">z</span>=<span class="value">"0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Scale</span> <span class="attribute">x</span>=<span class="value">"1"</span> <span class="attribute">y</span>=<span class="value">"1"</span> <span class="attribute">z</span>=<span class="value">"3.735847"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">GameObject</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">GameObject</span> <span class="attribute">Name</span>=<span class="value">"door_generic_slide_001"</span> <span class="attribute">Asset</span>=<span class="value">"Prefabs/door_generic_slide_001.prefab"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Transform</span> <span class="attribute">x</span>=<span class="value">"-15.91264"</span> <span class="attribute">y</span>=<span class="value">"-0.001293659"</span> <span class="attribute">z</span>=<span class="value">"7.006886"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Rotation</span> <span class="attribute">x</span>=<span class="value">"0"</span> <span class="attribute">y</span>=<span class="value">"90.00001"</span> <span class="attribute">z</span>=<span class="value">"0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Scale</span> <span class="attribute">x</span>=<span class="value">"1"</span> <span class="attribute">y</span>=<span class="value">"1"</span> <span class="attribute">z</span>=<span class="value">"1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">GameObject</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">GameObject</span> <span class="attribute">Name</span>=<span class="value">"door_generic_slide_003"</span> <span class="attribute">Asset</span>=<span class="value">"Prefabs/door_generic_slide_003.prefab"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Transform</span> <span class="attribute">x</span>=<span class="value">"-7.910765"</span> <span class="attribute">y</span>=<span class="value">"-0.001293659"</span> <span class="attribute">z</span>=<span class="value">"37.01304"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Rotation</span> <span class="attribute">x</span>=<span class="value">"0"</span> <span class="attribute">y</span>=<span class="value">"90.00001"</span> <span class="attribute">z</span>=<span class="value">"0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Scale</span> <span class="attribute">x</span>=<span class="value">"1"</span> <span class="attribute">y</span>=<span class="value">"1"</span> <span class="attribute">z</span>=<span class="value">"1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">GameObject</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在这里我们假设所有的Prefab是放置在Resources/Prefabs目录中的，那么此时我们便有了两种动态加载场景的方式</p>
<ul>
<li>通过每个GameObject的Asset属性，配合Resources.Load()方法实现动态加载</li>
<li>通过每个GameObject的Name属性，配合AssetBundle的Load()方法实现动态加载<br>这两种方法大同小异，区别仅仅在于是否需要从服务器下载相关资源。因此本文的主题是使用AssetBundle和Xml实现场景的动态加载，因此，接下来我们主要以第二种方式为主，第一种方式请大家自行实现吧！</li>
</ul>
<h2 id="动态加载物体到场景中">动态加载物体到场景中</h2><p>&emsp;&emsp;首先我们来定义一个根据配置文件动态加载AssetBundle中场景的方法LoadDynamicScene<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/// &#60;summary&#62;&#10;/// &#26681;&#25454;&#37197;&#32622;&#25991;&#20214;&#21160;&#24577;&#21152;&#36733;AssetBundle&#20013;&#30340;&#22330;&#26223;&#10;/// &#60;/summary&#62;&#10;/// &#60;param name=&#34;bundle&#34;&#62;&#20174;&#26381;&#21153;&#22120;&#19978;&#19979;&#36733;&#30340;AssetBundle&#25991;&#20214;&#60;/param&#62;&#10;/// &#60;param name=&#34;xmlFile&#34;&#62;AssetBundle&#25991;&#20214;&#23545;&#24212;&#30340;&#22330;&#26223;&#37197;&#32622;&#25991;&#20214;&#60;/param&#62;&#10;public static void LoadDynamicScene(AssetBundle bundle,string xmlFile)&#10;&#123;&#10;&#9;//&#21152;&#36733;&#26412;&#22320;&#37197;&#32622;&#25991;&#20214;&#10;&#9;XmlDocument xmlDoc=new XmlDocument();&#10;&#9;xmlDoc.LoadXml(((TextAsset)Resources.Load(xmlFile)).text);&#10;&#9;//&#35835;&#21462;&#26681;&#33410;&#28857;&#10;&#9;XmlElement root=xmlDoc.DocumentElement;&#10;&#9;if(root.Name==&#34;Scene&#34;)&#10;&#9;&#123;&#10;&#9;&#9;XmlNodeList nodes=root.SelectNodes(&#34;/Scene/GameObject&#34;);&#10;&#9;&#9;//&#23450;&#20041;&#29289;&#20307;&#20301;&#32622;&#12289;&#26059;&#36716;&#21644;&#32553;&#25918;&#10;&#9;&#9;Vector3 position=Vector3.zero;&#10;&#9;&#9;Vector3 rotation=Vector3.zero;&#10;&#9;&#9;Vector3 scale=Vector3.zero;&#10;&#9;&#9;//&#36941;&#21382;&#27599;&#19968;&#20010;&#29289;&#20307;&#10;&#9;&#9;foreach(XmlElement xe1 in nodes)&#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;//&#36941;&#21382;&#27599;&#19968;&#20010;&#29289;&#20307;&#30340;&#23646;&#24615;&#33410;&#28857;&#10;&#9;&#9;&#9;foreach(XmlElement xe2 in xe1.ChildNodes)&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;//&#26681;&#25454;&#33410;&#28857;&#21517;&#31216;&#20026;&#30456;&#24212;&#30340;&#21464;&#37327;&#36171;&#20540;&#10;&#9;&#9;&#9;&#9;if(xe2.Name==&#34;Transform&#34;)&#10;&#9;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#9;position=new Vector3(float.Parse(xe2.GetAttribute(&#34;x&#34;)),float.Parse(xe2.GetAttribute(&#34;y&#34;)),float.Parse(xe2.GetAttribute(&#34;z&#34;)));&#10;&#9;&#9;&#9;&#9;&#125;else if(xe2.Name==&#34;Rotation&#34;)&#10;&#9;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;&#9;rotation=new Vector3(float.Parse(xe2.GetAttribute(&#34;x&#34;)),float.Parse(xe2.GetAttribute(&#34;y&#34;)),float.Parse(xe2.GetAttribute(&#34;z&#34;)));&#10;&#9;&#9;&#9;&#9;&#125;else&#123;&#10;&#9;&#9;&#9;&#9;&#9;scale=new Vector3(float.Parse(xe2.GetAttribute(&#34;x&#34;)),float.Parse(xe2.GetAttribute(&#34;y&#34;)),float.Parse(xe2.GetAttribute(&#34;z&#34;)));&#10;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;//&#29983;&#25104;&#29289;&#20307;&#10;&#9;&#9;&#9;GameObject go=(GameObject)GameObject.Instantiate(bundle.Load(xe1.GetAttribute(&#34;Name&#34;)),position,Quaternion.Euler(rotation));&#10;&#9;&#9;&#9;go.transform.localScale=scale;&#10;&#9;&#9;&#125;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;因为该方法中的AssetBundle是需要从服务器下载下来的，因此我们需要使用协程来下载AssetBundle：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEnumerator Download()&#10;&#123;&#10;&#9;WWW _www = new WWW (&#34;http://localhost/DoneStealth.unity3d&#34;);&#10;&#9;yield return _www;&#10;&#9;//&#26816;&#26597;&#26159;&#21542;&#21457;&#29983;&#38169;&#35823;&#10;&#9;if (string.IsNullOrEmpty (_www.error)) &#10;&#9;&#123;&#10;&#9;&#9;//&#26816;&#26597;AssetBundle&#26159;&#21542;&#20026;&#31354;&#10;&#9;&#9;if(_www.assetBundle!=null)&#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;LoadDynamicScene(_www.assetBundle,&#34;DoneStealth.xml&#34;);&#10;&#9;&#9;&#125;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;好了，现在运行程序，可以发现场景将被动态地加载到当前场景中:)，哈哈</p>
<p><img src="" alt=""></p>
<h2 id="小结">小结</h2><ul>
<li>使用这种方式来加载场景主要是为了提高游戏的性能，如果存在大量重复性的场景的时候，可以使用这种方式来减小游戏的体积，可是这种方式本质上是一种用时间换效率的方式，因为在使用这种方法前，我们首先要做好游戏场景，然后再导出相关的配置文件和AssetBundle，从根本上来讲，工作量其实没有减少。</li>
<li>当场景导出的Xml文件中的内容较多时，建议使用内存池来管理物体的生成和销毁，因为频繁的生成和销毁是会带来较大的内存消耗的。说到这里的时候，我不得不吐槽下公司最近的项目，在将近300个场景中只有30个场景是最终发布游戏时需要打包的场景，然后剩余场景将被用来动态地加载到场景中，因为领导希望可以实现动态改变场景的目的，更为郁闷的是整个场景要高度DIY,模型要能够随用户拖拽移动、旋转，模型和材质要能够让用户自由替换。从整体上来讲，频繁地销毁和生成物体会耗费大量资源，因此如果遇到这种情况建议还是使用内存池进行管理吧！</li>
</ul>
<p>&emsp;&emsp;好了，今天的内容就是这样子了，如果大家对此有什么疑问，欢迎给我留言，谢谢大家！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;各位朋友，大家好，我是秦元培，欢迎大家关注我的博客，我的博客地址是<a href="http://qinyuanpei.com">http://qinyuanpei.com</a>。 今天我想和大家聊聊在Unity3D中关于场景的动态加载的问题。众所周知在Unity3D游戏开发过程中，因为受到游戏容量、平台性能和热更新等诸多因素的限制，我们可能无法将所有的游戏场景打包到项目中然后相对”静态”地加载，那么这个时候就需要我们使用动态加载的方式来将游戏场景加载到场景中。博主在研究了Unity3D动态加载的相关资料后发现，目前Unity3D中实现动态加载场景的方式主要有以下两种方式：]]>
    
    </summary>
    
      <category term="AssetBundle" scheme="http://qinyuanpei.com/tags/AssetBundle/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="动态加载" scheme="http://qinyuanpei.com/tags/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unity3D游戏开发之快速打造流行的关卡系统]]></title>
    <link href="http://qinyuanpei.com/2015/06/11/create-the-level-system-in-unity3d/"/>
    <id>http://qinyuanpei.com/2015/06/11/create-the-level-system-in-unity3d/</id>
    <published>2015-06-11T00:11:01.000Z</published>
    <updated>2015-10-09T09:07:20.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;各位朋友，大家好，欢迎大家关注我的博客，我是秦元培，我的博客地址是<a href="blog.csdn.net/qinyuanpei">blog.csdn.net/qinyuanpei</a>。<br>今天想和大家分享的是目前在移动平台上较为流行的关卡系统，关卡系统通常是单机手机游戏如《愤怒的小鸟》、《保卫萝卜》中对游戏内容的组织形式，玩家可通过已解锁的关卡(默认第一关是已解锁的)获取分数进而解锁新的关卡，或者是通过付费购买解锁新的关卡。那么好了，在今天的文章中博主将带领大家快速实现一个可扩展的关卡系统，这个实例的灵感来自博主最近的工作经历，希望对大家学习Unity3D游戏起到一定帮助性的作用。</p>
<a id="more"></a>
<h1 id="原理">原理</h1><p>&emsp;&emsp;在本地配置一个Xml文件，在这个文件中定义当前游戏中关卡的相关信息，通过解析该文件并和UI绑定最终实现一个完整的关卡系统。</p>
<h2 id="1、定义关卡">1、定义关卡</h2><p>&emsp;&emsp;首先我们来定义一个关卡的基本结构：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Level&#10;&#123;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#20851;&#21345;ID&#10;&#9;/// &#60;/summary&#62;&#10;&#9;public string ID;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#20851;&#21345;&#21517;&#31216;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;public string Name;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#20851;&#21345;&#26159;&#21542;&#35299;&#38145;&#9;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;public bool UnLock = false;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在这里，我们假定关卡的名称和该关卡在Unity3D中场景名称一致。其中最为重要的一个属性是UnLock，该值是一个布尔型变量，表明该关卡是否解锁，因为在游戏中，只有解锁的场景是可以访问的。</p>
<h2 id="2、定义关卡配置文件">2、定义关卡配置文件</h2><p>&emsp;&emsp;从关卡的基本结构Level可以定义出如下的配置文件，这里使用Xml作为配置文件的存储形式：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&#62;&#10;&#60;levels&#62;&#10;  &#60;level id=&#34;0&#34; name=&#34;level0&#34; unlock=&#34;1&#34; /&#62;&#10;  &#60;level id=&#34;1&#34; name=&#34;level1&#34; unlock=&#34;0&#34; /&#62;&#10;  &#60;level id=&#34;2&#34; name=&#34;level2&#34; unlock=&#34;0&#34; /&#62;&#10;  &#60;level id=&#34;3&#34; name=&#34;level3&#34; unlock=&#34;0&#34; /&#62;&#10;  &#60;level id=&#34;4&#34; name=&#34;level4&#34; unlock=&#34;0&#34; /&#62;&#10;  &#60;level id=&#34;5&#34; name=&#34;level5&#34; unlock=&#34;0&#34; /&#62;&#10;  &#60;level id=&#34;6&#34; name=&#34;level6&#34; unlock=&#34;0&#34; /&#62;&#10;  &#60;level id=&#34;7&#34; name=&#34;level7&#34; unlock=&#34;0&#34; /&#62;&#10;  &#60;level id=&#34;8&#34; name=&#34;level8&#34; unlock=&#34;0&#34; /&#62;&#10;  &#60;level id=&#34;9&#34; name=&#34;level9&#34; unlock=&#34;0&#34; /&#62;&#10;&#60;/levels&#62;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;和关卡结构定义类似，这里使用0和1来表示关卡的解锁情况，0表示未解锁，1表示解锁，可以注意到默认情况下第一个关卡是解锁的，这符合我们在玩《愤怒的小鸟》这类游戏时的直观感受。那么好了，在完成了关卡的结构定义和配置文件定义后，接下来我们开始思考如何来实现一个关卡系统，因为此处并不涉及到Unity3D场景中的具体逻辑，因此我们在关卡系统中主要的工作就是维护好主界面场景和各个游戏场景的跳转关系，我们可以注意到这里要完成两件事情，即第一要将配置文件中的关卡以一定形式加载到主界面中，并告诉玩家哪些关卡是已解锁的、哪些关卡是未解锁的，当玩家点击不同的关卡时可以得到不同的响应，已解锁的关卡可以访问并进入游戏环节，未解锁的关卡则需要获得更多的分数或者是通过付费来解锁关卡；第二是要对关卡进行编辑，当玩家获得了分数或者是支付一定的费用后可以解锁关卡进入游戏环节。这两点综合起来就是我们需要对关卡的配置文件进行读写，因为我们注意到一个关卡是否解锁仅仅取决于unlock属性，那么好了，明白了这一点后我们来动手编写一个维护关卡的类。</p>
<h2 id="3、编写一个维护关卡的类">3、编写一个维护关卡的类</h2><p>&emsp;&emsp;这里直接给出代码，因为从严格的意义上来说，这段代码并非我们此刻关注的重点，可能这让大家感到难以适应，因为文章明明就是在教我们实现一个关卡系统，可是此刻博主却说这部分不重要了，请大家稍安勿躁，因为这里有比代码更为深刻的东西。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;&#10;using System.Collections;&#10;using System.Collections.Generic;&#10;using System.Xml;&#10;&#10;public static class LevelSystem &#10;&#123;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#21152;&#36733;Xml&#25991;&#20214;&#9;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;returns&#62;The levels.&#60;/returns&#62;&#10;&#9;public static List&#60;Level&#62; LoadLevels()&#10;&#9;&#123;&#10;&#9;&#9;//&#21019;&#24314;Xml&#23545;&#35937;&#10;&#9;&#9;XmlDocument xmlDoc = new XmlDocument();&#10;&#9;&#9;//&#22914;&#26524;&#26412;&#22320;&#23384;&#22312;&#37197;&#32622;&#25991;&#20214;&#21017;&#35835;&#21462;&#37197;&#32622;&#25991;&#20214;&#10;&#9;&#9;//&#21542;&#21017;&#22312;&#26412;&#22320;&#21019;&#24314;&#37197;&#32622;&#25991;&#20214;&#30340;&#21103;&#26412;&#10;&#9;&#9;//&#20026;&#20102;&#36328;&#24179;&#21488;&#21450;&#21487;&#35835;&#21487;&#20889;&#65292;&#38656;&#35201;&#20351;&#29992;Application.persistentDataPath&#10;&#9;&#9;string filePath = Application.persistentDataPath + &#34;/levels.xml&#34;;&#10;&#9;&#9;if (!IOUntility.isFileExists (filePath)) &#123;&#10;&#9;&#9;&#9;xmlDoc.LoadXml (((TextAsset)Resources.Load (&#34;levels&#34;)).text);&#10;&#9;&#9;&#9;IOUntility.CreateFile (filePath, xmlDoc.InnerXml);&#10;&#9;&#9;&#125; else &#123;&#10;&#9;&#9;&#9;xmlDoc.Load(filePath);&#10;&#9;&#9;&#125;&#10;&#9;&#9;XmlElement root = xmlDoc.DocumentElement;&#10;&#9;&#9;XmlNodeList levelsNode = root.SelectNodes(&#34;/levels/level&#34;);&#10;&#9;&#9;//&#21021;&#22987;&#21270;&#20851;&#21345;&#21015;&#34920;&#10;&#9;&#9;List&#60;Level&#62; levels = new List&#60;Level&#62;();&#10;&#9;&#9;foreach (XmlElement xe in levelsNode) &#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;Level l=new Level();&#10;&#9;&#9;&#9;l.ID=xe.GetAttribute(&#34;id&#34;);&#10;&#9;&#9;&#9;l.Name=xe.GetAttribute(&#34;name&#34;);&#10;&#9;&#9;&#9;//&#20351;&#29992;unlock&#23646;&#24615;&#26469;&#26631;&#35782;&#24403;&#21069;&#20851;&#21345;&#26159;&#21542;&#35299;&#38145;&#10;&#9;&#9;&#9;if(xe.GetAttribute(&#34;unlock&#34;)==&#34;1&#34;)&#123;&#10;&#9;&#9;&#9;&#9;l.UnLock=true;&#10;&#9;&#9;&#9;&#125;else&#123;&#10;&#9;&#9;&#9;&#9;l.UnLock=false;&#10;&#9;&#9;&#9;&#125;&#10;&#10;&#9;&#9;&#9;levels.Add(l);&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#9;return levels;&#10;&#9;&#125;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#35774;&#32622;&#26576;&#19968;&#20851;&#21345;&#30340;&#29366;&#24577;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;/// &#60;param name=&#34;name&#34;&#62;&#20851;&#21345;&#21517;&#31216;&#60;/param&#62;&#10;&#9;/// &#60;param name=&#34;locked&#34;&#62;&#26159;&#21542;&#35299;&#38145;&#60;/param&#62;&#10;&#9;public static void SetLevels(string name,bool unlock)&#10;&#9;&#123;&#10;&#9;&#9;//&#21019;&#24314;Xml&#23545;&#35937;&#10;&#9;&#9;XmlDocument xmlDoc = new XmlDocument();&#10;&#9;&#9;string filePath=Application.persistentDataPath + &#34;/levels.xml&#34;;&#10;&#9;&#9;xmlDoc.Load(filePath);&#10;&#9;&#9;XmlElement root = xmlDoc.DocumentElement;&#10;&#9;&#9;XmlNodeList levelsNode = root.SelectNodes(&#34;/levels/level&#34;);&#10;&#9;&#9;foreach (XmlElement xe in levelsNode) &#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;//&#26681;&#25454;&#21517;&#31216;&#25214;&#21040;&#23545;&#24212;&#30340;&#20851;&#21345;&#10;&#9;&#9;&#9;if(xe.GetAttribute(&#34;name&#34;)==name)&#10;&#9;&#9;&#9;&#123;&#10;&#9;&#9;&#9;&#9;//&#26681;&#25454;unlock&#37325;&#26032;&#20026;&#20851;&#21345;&#36171;&#20540;&#10;&#9;&#9;&#9;&#9;if(unlock)&#123;&#10;&#9;&#9;&#9;&#9;&#9;xe.SetAttribute(&#34;unlock&#34;,&#34;1&#34;);&#10;&#9;&#9;&#9;&#9;&#125;else&#123;&#10;&#9;&#9;&#9;&#9;&#9;xe.SetAttribute(&#34;unlock&#34;,&#34;0&#34;);&#10;&#9;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#9;&#125;&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#9;//&#20445;&#23384;&#25991;&#20214;&#10;&#9;&#9;xmlDoc.Save (filePath);&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这里我们首先将关卡配置文件levels.xml放置在Resources目录下，这是因为我们可以使用Resources.Load()这种方式来加载本地资源，这种方式对于Unity3D来说有着得天独厚的优势：</p>
<ul>
<li>它使用相对于Resources目录的相对路径，所以在使用的时候不用考虑是相对路径还是绝对路径的问题</li>
<li>它使用名称来查找一个本地资源，所以在使用的时候不用考虑扩展名和文件格式的问题</li>
<li>它可以是Unity3D支持的任意类型，从贴图到预制体再到文本文件等等，可以和Unity3D的API完美地结合</li>
</ul>
<p>&emsp;&emsp;说了这么多它的优点，我们自然要痛心疾首地说说它的缺点，它的缺点是什么呢？那就是不支持写入操作，这当然不能责怪Unity3D，因为当Unity3D导出游戏的时候会将Rsources目录下的内容压缩后再导出，我们当然不能要求在一个压缩后的文件里支持写入操作啦，所以我们是时候来总结下Unity3D中资源读写的常见方案了，那么Unity3D中常见的资源读写方案由哪些呢？</p>
<p>1、Resources.Load:只读，当我们的资源不需要更新且对本地存储无容量要求的时候可以采用这种方式<br>2、AssetBundle：只读，当我们的资源需要更新且对本地存储有容量要求的时候可以采用这种方式<br>3、WWW:只读，WWW支持http协议和file协议，因此可以WWW来加载一个网络资源或者本地资源<br>4、PlayerPrefs：可读可写，Unity3D提供的一种的简单的键-值型存储结构，可以用来读写float、int和string三种简单的数据类型，是一种较为松散的数据存储方案<br>5、序列化和反序列化：可读可写，可以使用Protobuf、序列化为Xml、二进制或者JSON等形式实现资源读写。<br>6、数据库：可读可写，可以使用MySQL或者SQLite等数据库对数据进行存储实现资源读写。</p>
<p>&emsp;&emsp;好了，在了解了Unity3D中资源读写的常见方案后，我们接下来来讨论下Unity3D中的路径问题：<br>1、Application.dataPath：这个路径是我们经常使用的一个路径，可是我们真的了解这个路径吗？我看这里要打个大大的问号，为什么这么说呢？因为这个路径在不同的平台下是不一样的，从官方API文档中可以了解到这个值依赖于运行的平台：</p>
<ul>
<li>Unity 编辑器：&lt;工程文件夹的路径&gt;/Assets </li>
<li>Mac：&lt;到播放器应用的路径&gt;/Contents </li>
<li>IOS: &lt;到播放器应用的路径&gt;/<appname.app>/Data </appname.app></li>
<li>Win：&lt;.exe文件目录&gt;\Data </li>
<li>Web：&lt;.unity3d文件的绝对路径&gt;<br>&emsp;&emsp;这个路径是在PC上支持读写的，可是因为到了不同的平台上文件的路径发生变动，因此我们在程序中设置的路径可能就变成了一个错误的路径。在网上大家找到类似的内容，这一点是网上说的最多、坑最多的一块儿，希望大家在以后遇到这个问题的时候能够留心点，尽量能不用这个路径就不用这个路径吧！什么?不用这个路径，那该用什么路径呢？呵呵，不要着急啊，下面隆重向大家推荐Application.persistentDataPath这个路径。<br>2、Application.persistentDataPath：这个路径是Unity3D中的一个数据持久化路径，呵呵，千万不要问我什么叫做数据持久化路径，我不会告诉你我今天这篇文章的关键就是数据持久化啊！总之呢，我们把握住一点，这个路径是可以在移动平台上使用的一个可以读写的路径，当然在路径这块儿可能同样会碰到和Application.dataPath类似的问题，因为博主写这篇文章的时候并没有对移动平台进行测试，这一点希望大家能够注意啊，这并不是我偷懒，实在是公司最近的事情比较多，没有时间做进一步的测试，不过除了路径的问题以外，我可以向大家保证，这个路径是可以读写的，所以如果我们在开发Unity3D游戏过程中需要在本地存储某些文件的话，这个路径是个不错的选择。</li>
</ul>
<p>&emsp;&emsp;好了，现在我们回到维护关卡的这个类中，大家可以注意到我在加载配置文件的时候做了这样一个处理：<br>如果本地(指游戏外部)存在配置文件则直接读取配置文件，否则使用Resources.Load()方法加载Resources目录下的配置文件，并在本地创建一个配置文件的副本。这样做的目的是为了方便对配置文件进行修改，因为Resources目录下的配置文件在导出游戏后是没有路径的，我们没有办法用常规的访问文件的方式来读取这个文件，这个时候我们就用到Application.persistentDataPath这个路径，因为我们在本地创建了副本，所以只要读取副本文件就可以对其进行读取和修改了。那么，接下来，我们来写一个Main文件作为项目的入口文件吧！</p>
<h2 id="4、编写入口文件">4、编写入口文件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;&#10;using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine.UI;&#10;using System.Xml.Serialization;&#10;&#10;public class Main : MonoBehaviour &#10;&#123;&#10;&#9;//&#20851;&#21345;&#21015;&#34920;&#10;&#9;private List&#60;Level&#62; m_levels;&#10;&#10;&#9;void Start () &#10;&#9;&#123;&#10;&#9;&#9;//&#33719;&#21462;&#20851;&#21345;&#10;&#9;&#9;m_levels = LevelSystem.LoadLevels ();&#10;&#9;&#9;//&#21160;&#24577;&#29983;&#25104;&#20851;&#21345;&#10;&#9;&#9;foreach (Level l in m_levels) &#10;&#9;&#9;&#123;&#10;&#9;&#9;&#9;GameObject prefab=(GameObject)Instantiate((Resources.Load(&#34;Level&#34;) as GameObject));&#10;&#9;&#9;&#9;//&#25968;&#25454;&#32465;&#23450;&#10;&#9;&#9;&#9;DataBind(prefab,l);&#10;&#9;&#9;&#9;//&#35774;&#32622;&#29238;&#29289;&#20307;&#10;&#9;&#9;&#9;prefab.transform.SetParent(GameObject.Find(&#34;UIRoot/Background/LevelPanel&#34;).transform);&#10;&#9;&#9;&#9;prefab.transform.localPosition=new Vector3(0,0,0);&#10;&#9;&#9;&#9;prefab.transform.localScale=new Vector3(1,1,1);&#10;&#9;&#9;&#9;//&#23558;&#20851;&#21345;&#20449;&#24687;&#20256;&#32473;&#20851;&#21345;&#10;&#9;&#9;&#9;prefab.GetComponent&#60;LevelEvent&#62;().level=l;&#10;&#9;&#9;&#9;prefab.name=&#34;Level&#34;;&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#9;//&#20154;&#20026;&#35299;&#38145;&#31532;&#20108;&#20010;&#20851;&#21345;&#10;&#9;&#9;//&#22312;&#23454;&#38469;&#28216;&#25103;&#20013;&#29609;&#23478;&#38656;&#35201;&#28385;&#36275;&#19968;&#23450;&#26465;&#20214;&#26041;&#21487;&#35299;&#38145;&#20851;&#21345;&#10;&#9;&#9;//&#27492;&#22788;&#20165;&#20316;&#20026;&#28436;&#31034;&#10;&#9;&#9;LevelSystem.SetLevels (&#34;level1&#34;, true);&#10;&#10;&#9;&#125;&#10;&#9;&#10;&#10;&#9;/// &#60;summary&#62;&#10;&#9;/// &#25968;&#25454;&#32465;&#23450;&#10;&#9;/// &#60;/summary&#62;&#10;&#9;void DataBind(GameObject go,Level level)&#10;&#9;&#123;&#10;&#9;&#9;//&#20026;&#20851;&#21345;&#32465;&#23450;&#20851;&#21345;&#21517;&#31216;&#10;&#9;&#9;go.transform.Find(&#34;LevelName&#34;).GetComponent&#60;Text&#62;().text=level.Name;&#10;&#9;&#9;//&#20026;&#20851;&#21345;&#32465;&#23450;&#20851;&#21345;&#22270;&#29255;&#10;&#9;&#9;Texture2D tex2D;&#10;&#9;&#9;if(level.UnLock)&#123;&#10;&#9;&#9;&#9;tex2D=Resources.Load(&#34;nolocked&#34;) as Texture2D;&#10;&#9;&#9;&#125;else&#123;&#10;&#9;&#9;&#9;tex2D=Resources.Load(&#34;locked&#34;) as Texture2D;&#10;&#9;&#9;&#125;&#10;&#9;&#9;Sprite sprite=Sprite.Create(tex2D,new Rect(0,0,tex2D.width,tex2D.height),new Vector2(0.5F,0.5F));&#10;&#9;&#9;go.transform.GetComponent&#60;Image&#62;().sprite=sprite;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;在这段脚本中，我们首先加载了关卡信息，然后将关卡信息和界面元素实现绑定，从而实现一个简单的关卡选择界面，并人为地解锁了第二个关卡。好吧，如果这是一个正式游戏的配置关卡配置文件，相信大家都知道怎么免费玩解锁的关卡了吧，哈哈！当然，我不推荐大家这样做，因为作为一个程序员，当你全身心地投入到一个项目中的时候，你就会明白完成一款软件或者游戏需要投入多少精力，所以大家尽量还是不要想破解或者盗版这些这些事情，毕竟作为开发者可能他的出发点是想做出来一个让大家都喜欢的产品，可是更现实的问题是开发者一样要生活，所以请善待他们吧。好了，言归正传，这里的UI都是基于UGUI实现的，不要问我为什么不用NGUI，因为我就是喜欢UGUI！我们知道我们需要为每个关卡的UI元素绑定一个响应的事件，因此我们需要为其编写一个LevelEvent的脚本：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;&#10;using System.Collections;&#10;using UnityEngine.UI;&#10;using UnityEngine.EventSystems;&#10;&#10;public class LevelEvent : MonoBehaviour&#10;&#123;&#10;&#9;//&#24403;&#21069;&#20851;&#21345;&#10;&#9;public Level level;&#10;&#10;&#9;public void OnClick()&#10;&#9;&#123;&#10;&#9;&#9;if(level.UnLock)&#123;&#10;&#9;&#9;&#9;//&#20551;&#35774;&#20851;&#21345;&#30340;&#21517;&#31216;&#21363;&#20026;&#23545;&#24212;&#22330;&#26223;&#30340;&#21517;&#31216;&#10;&#9;&#9;&#9;//Application.LoadLevel(level.Name);&#10;&#9;&#9;&#9;Debug.Log (&#34;&#24403;&#21069;&#36873;&#25321;&#30340;&#20851;&#21345;&#26159;:&#34;+level.Name);&#10;&#9;&#9;&#125;else&#123;&#10;&#9;&#9;&#9;Debug.Log (&#34;&#25265;&#27465;!&#24403;&#21069;&#20851;&#21345;&#23578;&#26410;&#35299;&#38145;!&#34;);&#10;&#9;&#9;&#125;&#10;&#10;&#9;&#125;&#10;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;记得在本文开始的时候，博主提到了一个假设，就是关卡的名称和其对应的游戏名称一致的假设，相信到此处大家都知道为什么了吧！为了让每个关卡的UI元素知道自己对应于哪个关卡，我们设置了一个level变量，这个变量的值在加载关卡的时候已经完成了初始化，所以此时我们可以在这里知道每个关卡的具体信息，从而完成事件的响应。好了，今天的内容就是这样了，我们来看看最终的效果吧！</p>
<p><img src="http://img.blog.csdn.net/20150609072855261" alt="DEMO1"></p>
<p><img src="http://img.blog.csdn.net/20150609072912905" alt="DEMO2"></p>
<p>&emsp;&emsp;可以注意到在第二次打开游戏后，第二个关卡已经解锁了，说明我们在最开始设计的两个目标都达到了，那么内容就是这样子啦，如果大家有什么好的想法或者建议，欢迎在文章后面给我留言，谢谢大家！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;各位朋友，大家好，欢迎大家关注我的博客，我是秦元培，我的博客地址是<a href="blog.csdn.net/qinyuanpei">blog.csdn.net/qinyuanpei</a>。<br>今天想和大家分享的是目前在移动平台上较为流行的关卡系统，关卡系统通常是单机手机游戏如《愤怒的小鸟》、《保卫萝卜》中对游戏内容的组织形式，玩家可通过已解锁的关卡(默认第一关是已解锁的)获取分数进而解锁新的关卡，或者是通过付费购买解锁新的关卡。那么好了，在今天的文章中博主将带领大家快速实现一个可扩展的关卡系统，这个实例的灵感来自博主最近的工作经历，希望对大家学习Unity3D游戏起到一定帮助性的作用。</p>]]>
    
    </summary>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="关卡系统" scheme="http://qinyuanpei.com/tags/%E5%85%B3%E5%8D%A1%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="游戏" scheme="http://qinyuanpei.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unity3D游戏开发之路：一周工作总结]]></title>
    <link href="http://qinyuanpei.com/2015/06/11/work-in-a-week/"/>
    <id>http://qinyuanpei.com/2015/06/11/work-in-a-week/</id>
    <published>2015-06-11T00:02:45.000Z</published>
    <updated>2015-10-09T09:16:12.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;大家好，欢迎大家关注我的博客，我是秦元培，我的博客地址是<a href="http://blog.csdn.net/qinyuanpei" target="_blank" rel="external">http://blog.csdn.net/qinyuanpei</a>。到公司上班已经一周了，趁着今天周末休息的时间，想将最近在工作和生活中的感受和想法写下来，因为生命就是一个不断积累、厚积薄发，最终实现自我超越的一个过程。作为第一份工作，尽管没有想象中那样理想，可我还是在很努力的工作。工作后接手的第一个项目是一个房地产的漫游展示项目，因为这家公司之前是做影视后期的，所以在决定做这个项目后，公司领导层对这个项目具体要做到什么样的效果并没有一个明确的认识，所以在项目开展前期无论是在对项目所使用的技术的熟悉程度上还是项目整体的策划上，都没有一个具体的的可操作的方案。因为公司领导是美术出身，所以从我进了公司以后，整个公司上下一直沉浸在一种加班加点赶制模型的压抑氛围当中。</p>
<a id="more"></a>
<p>&emsp;&emsp;我进公司的第一天，公司负责技术的人向我演示了一个视频，告诉我项目做出来大概就是这样一个样子，然后就让我开始写所谓的”框架”，因为他对Unity3D的技术并不熟悉，所以基本上从我上班开始，所有和Unity3D相关的工作都由我一个人来完成，让我这样一个新入职的人来担当”主程”，我感到受宠若惊而压力山大，不过因为他和我年龄相差不大，一直都比较尊重我的想法，所以Unity3D这块整个项目就比较放心地交给了我来做，这样的结果就是我大概花了一周时间就写好了整体的框架[偷笑：)]。可是在设计整个项目的过程中，因为美术都忙着建模，所以UI设计这块儿基本上都是空白，作为一个刚进公司不久没有什么话语权的新人，在这种情况下我只能自己先大致做出来一个DEMO，然后再听取领导的意见反复进行修改，可是如果这样，到了项目后期如果因为项目需求发生变动，可能UI设计就需要重新制作，我个人是比较讨厌做UI，因为UI有时候会因为参数设置不合理等等的原因造成无法调试的错误，这样你折腾了大半天找了可能出现的各种错误，最终却发现是因为一个参数设置不合理，这该有多蛋疼啊！我比较喜欢Cocos Studio这种制作UI的方式，就是让美术直接在UI编辑器里做好UI然后导出为程序可以解析的数据类型，这样程序只需要负责将这些数据解析出来为它们绑定相关的UI事件就好了。然而现实是残酷的，在这个项目中，因为楼盘、户型、家装等等因素的不可控性，所以在设计UI的时候全部都是以动态加载的形式来处理的，因为你并不能确定这些UI里显示的元素到底有多少个，这样我在设计这个框架的时候是这样考虑的，就是把所有需要人力来调整、控制的部分(如模型摆放、场景设计等等)都手动完成，所以和UI相关的部分(如UI元素的动态加载、模型的加载、本地配置文件等等)都通过动态加载来实现，因为在整个项目中第三部分的家装会涉及到大量的模型，所以这部分考虑的是将模型文件打包成AssetBundle文件从服务器加载。</p>
<p>&emsp;&emsp;我不知道公司领导当初是怎么样确定使用Unity3D来做这个项目，因为考虑到虚拟展示的需要，这个项目最终展示给用户的是一个网页，这样就更需要考虑资源组织的问题，就这样在工作的第一周时间内我想到了以前在学校做游戏的时候都没”舍得”使用的技术方案，基本的思路是本地的游戏文件最终仅仅保留一个主场景文件(MainMenu.cs)，主场景负责维护从楼盘到户型再到家装的所有逻辑，各个场景中的动态的部分则是通过Resource.Load()和AssetBundle来实现，将这些场景放到服务器上，主场景将决定具体加载哪一个场景。因为整个项目主要分成楼盘、户型、家装这三个部分，这些场景除了模型以外逻辑都是一样的，因此将这部分的逻辑都写成公用的脚本，在制作这些场景时只需要将脚本拖拽到某些物体上就可以了。因为需要从服务器上获取符合筛选要求的楼盘信息，因此还需要编写服务器端的相关逻辑，目前项目组中还没有服务器端的程序，这部分我表示无能为力啊，哈哈。如果希望将最终的网页做得漂亮些，可能还需要前端工程师的加入吧，目前这块同样是空白！好吧，做项目的时候即使是程序员都会有分身乏术的时候，成为全栈工程师是我的梦想，可是目前做不到啊！我不知道在游戏开发中程序和美术的关系怎么样，反正在我目前的项目组里我这个程序的存在感实在是太弱了啊，可能是项目组程序的比例太低，可能是我和大家还不熟悉吧，不过昨天居然有个美术跑过来问我能不能教他Unity3D，因为他觉得建模做得再好做出来的模型终究是死的，哈哈，瞬间感觉有种相见恨晚的感觉啊。好了，这些闲话先聊到这里吧，今天想和大家分享的是我在开发过程中遇到的某些坑，因为我是一个程序员，归根到底我和大家要聊的还是程序嘛！</p>
<h2 id="一、下载AssetBundle时遇到”跨域”的问题">一、下载AssetBundle时遇到”跨域”的问题</h2><p>&emsp;&emsp;这个问题主要是因为服务器上缺少一个叫做crossdomain.xml的文件，这是由Adobe提出的以保证Flash能够跨域访问文件的一种策略，当发生这个错误时具体的表现就是你可以通过浏览器从服务器上下载AssetBundle文件，可是当你试图在Unity里使用WWW访问该文件时就会报错，具体的错误信息我已经不记得了，不过错误信息中特别明确的指出了是因为缺少crossdomain.xml这个文件，所以解决的方案就是在服务器根目录里增加这样一个文件，文件的内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">cross-domain-policy</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">site-control</span> <span class="attribute">permitted-cross-domain-policies</span>=<span class="value">"master-only"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">allow-access-from</span> <span class="attribute">domain</span>=<span class="value">"*"</span> <span class="attribute">to-ports</span>=<span class="value">"*"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">cross-domain-policy</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;具体使用的时候需要将*号部分分别替换成允许跨域访问的地址和端口，因为我是用WAMP这个软件搭建的本地服务器，所以这里都采用的是默认值，具体怎么去设置这里的内容还需要大家自己去探索，不过这里就是像告诉大家使用Unity3D做网页游戏或者是从服务器上下载文件是一定要考虑这个问题的啊！</p>
<h2 id="二、动态生成的UI_Prefab被拉伸的问题">二、动态生成的UI Prefab被拉伸的问题</h2><p>&emsp;&emsp;这个问题出现在动态生成UI元素的过程中，就是生成物体以后物体的大小和位置会发生变化，这个问题在宣雨松的博客中曾经读到过，不过当时他并没有说清楚产生这个问题的原因，所以当同样的问题发生在我身上的时候我果断选择和他一样，哈哈，解决方法是把物体的localScale设为(1,1,1)、localPosition设为(0,0,0)，当然按照我的传统如果大家知道是为什么的话还是告诉我吧！</p>
<h2 id="三、AssetBundle的mainAsset问题">三、AssetBundle的mainAsset问题</h2><p>&emsp;&emsp;这个问题产生在最初确定AssetBundle打包是将单个物体打包还是将多个物体一起打包的时候，后来发现mainAsset取决于<br>bool BuildAssetBundle (Object mainAsset,Object[] assets,string pathName, BuildAssetBundleOptions<br>optionsBuildAssetBundleOptions.CollectDependencies | BuildAssetBundleOptions.CompleteAssets,<br>BuildTarget targetPlatform= BuildTarget.WebPlayer)<br>这个方法中的第一个参数，就是说指定了一个参数则可以通过mainAsset来获取AssetBundle中的主物体，否则只能通过Load方法传入一个名称来获取指定物体。这里想说一件诡异的事情，比如说我们选中两个物体然后将其打包，但是通过LoadAll方法获取到的物体的数目却不是两个，因为打包的时候GamObject和Transform是分开打包的，父物体下的子物体同样是被分开打包的，因此这个方法使用起来并不是那么地尽如人意，这点希望大家注意！</p>
<h2 id="四、场景打包为AssetBundle的问题">四、场景打包为AssetBundle的问题</h2><p>&emsp;&emsp;我们知道在Unity中可以通过BuildStreamedSceneAssetBundle方法将场景打包为AssetBundle文件，然后按照如下方法加载到游戏中。场景打包的方法如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static <span class="function"><span class="keyword">function</span> <span class="title">MyBuild</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> levels : <span class="built_in">String</span>[] = [<span class="string">"Assets/Level1.unity"</span>];</span><br><span class="line">		BuildPipeline.BuildStreamedSceneAssetBundle( levels, <span class="string">"Streamed-Level1.unity3d"</span>, BuildTarget.WebPlayer); </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;接下来我们就可以通过WWW方法将其加载到游戏中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// Download compressed scene. If version 5 of the file named "Streamed-Level1.unity3d" was previously downloaded and cached.</span></span><br><span class="line">		<span class="comment">// Then Unity will completely skip the download and load the decompressed scene directly from disk.</span></span><br><span class="line">		<span class="keyword">var</span> download = WWW.LoadFromCacheOrDownload (<span class="string">"http://myWebSite.com/Streamed-Level1.unity3d"</span>, <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">yield</span> download;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// Handle error</span></span><br><span class="line">		<span class="keyword">if</span> (download.error != <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Debug.LogError(download.error);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// In order to make the scene available from LoadLevel, we have to load the asset bundle.</span></span><br><span class="line">		<span class="comment">// The AssetBundle class also lets you force unload all assets and file storage once it is no longer needed.</span></span><br><span class="line">		<span class="keyword">var</span> bundle = download.assetBundle;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// Load the level we have just downloaded</span></span><br><span class="line">		Application.LoadLevel (<span class="string">"Level1"</span>);</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;注意到最后一行我们是使用LoadLevel方法来加载一个场景的，该方法需要一个参数，它是我们在Unity3D中注册过的关卡，即在编译游戏的时候需要将其加入到关卡列表中。那么现在问题来了，这个Level11到底是本地的场景还是下载的场景啊，既然我们选择了从服务器上加载一个场景，那么本地应该是不会有这个场景了，那么游戏关卡列表中就不会有这个关卡，因此如果调用最后一样代码应该会提示找不到这个关卡。我在这里纠结了好久，最后发现是这样，就是现在本地做好关卡，然后将其加入到关卡列表中，当本地关卡打包成AssetBundle后，从本地删除当前关卡，依然可以从服务器上加载这个场景。这是我自己做实验的结果，不知道对不对，希望有知道这个的朋友能够告诉我这样到底对不对，因为这种方法感觉有些猥琐啊，哈哈。</p>
<p>&emsp;&emsp;好了，今天的内容就是这样了，因为目前项目暂时就发现了这些问题，所以更多的关于Unity3D的内容需要等到项目慢慢推进的过程中去发现了，希望大家能够喜欢啊！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;大家好，欢迎大家关注我的博客，我是秦元培，我的博客地址是<a href="http://blog.csdn.net/qinyuanpei">http://blog.csdn.net/qinyuanpei</a>。到公司上班已经一周了，趁着今天周末休息的时间，想将最近在工作和生活中的感受和想法写下来，因为生命就是一个不断积累、厚积薄发，最终实现自我超越的一个过程。作为第一份工作，尽管没有想象中那样理想，可我还是在很努力的工作。工作后接手的第一个项目是一个房地产的漫游展示项目，因为这家公司之前是做影视后期的，所以在决定做这个项目后，公司领导层对这个项目具体要做到什么样的效果并没有一个明确的认识，所以在项目开展前期无论是在对项目所使用的技术的熟悉程度上还是项目整体的策划上，都没有一个具体的的可操作的方案。因为公司领导是美术出身，所以从我进了公司以后，整个公司上下一直沉浸在一种加班加点赶制模型的压抑氛围当中。</p>]]>
    
    </summary>
    
      <category term="工作，Unity3D" scheme="http://qinyuanpei.com/tags/%E5%B7%A5%E4%BD%9C%EF%BC%8CUnity3D/"/>
    
      <category term="游戏开发" scheme="http://qinyuanpei.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="生活感悟" scheme="http://qinyuanpei.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[毕业就像指尖流沙]]></title>
    <link href="http://qinyuanpei.com/2015/05/16/graduate-from-now/"/>
    <id>http://qinyuanpei.com/2015/05/16/graduate-from-now/</id>
    <published>2015-05-16T00:45:05.000Z</published>
    <updated>2015-10-09T09:16:54.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;毕业就像指尖流沙，而我是那从指尖流过的沙子。我不知道该怎样来总结我的大学，即使我努力地寻找、努力地回避，我依然觉得大学对我而言就是这样一个讽刺的过程，曾经努力地想要摆脱这个专业最后却留了下来，最初对这个专业的热情随着时间一天天地消逝，到最后却发现自己夹在某种缝隙中左右为难。</p>
<a id="more"></a>
<p>&emsp;&emsp;或许大家都认为我这个人比较冷淡，可是对我而言，我只是想做一个简简单单的人而已，我不会因为即将毕业就表现出某种殷切的神情，在我的心里我当做朋友的会一直当作朋友，即使以后大家都鲜有机会再聚在一起，我讨厌酒桌上的朋友，所以我不会用喝酒这件事情来作为我们彼此情感的见证。我是一个不善于卖弄和殷勤的人，可能我心直口快，可能我又爱又恨，可是那是因为我想做一个表里如一的人。朋友对我而言，一直是我所珍视的人，我觉得君子之交淡如水这样的关系就很好，我不是一个善于表演的人，不管是和大家一起拍VCR还是和大家在一起的时候，我想我喜欢的是大家在一起的时光，而不是在一起喝酒的时候。</p>
<p>&emsp;&emsp;我承认，因为长期做编程设计的这样一个习惯，让我的思维方式里只有0和1，只有对和错。可是人却是一种奇怪的感情动物，我有时候甚至会觉得自己更喜欢计算机而不是人，人在一个人的时候会感到孤独，可是当大家都聚在一起的时候真的会快乐吗？人与人之间的关系实在是微妙而复杂，即使是互联网甚至物联网都不能与之匹敌。我知道在中国人的思维里，这种想法特别地正常，因为中国就是这样一个人情社会，有时候我会听到别人跟我说，你自己怎么样并不重要，真正重要的是你处在一个什么样的圈子里。虽然在我阅读过的书籍里、接触过的人的话语里都有类似的结论，可是道理终究是道理，当你试图去将这个道理真正实践的时候，你会发现一切是如此的艰难。</p>
<p>&emsp;&emsp;大家或许觉得我对这个班没有什么感情，可是人和人相处不能单纯地看重对方目前、以后可能会对你有什么样的帮助，因为这不叫朋友叫做关系，我眼中的朋友是那种即使自身没有什么强大的社会资源，可当你需要帮助的时候，他仍然会真心实意地为你付出，我对于朋友和关系的界定实在是困难，因此当我面对这场不知是送别还是交友的毕业聚会的时候，我会突然陷入某种迷茫，即使麦克风音量开到最大、嗓子喊到声嘶力竭，当一切都结束了的时候能够留下什么呢？终有一天大家都会奔向各自的前程，去做自己想做的事情，就像慕容紫英一样，百年蹉跎岁月不过转瞬，当朋友们都不再需要他照顾的时候，他会义无反顾地踏上自己的路，他心里记得那句“承君此诺，必守一生”，可是千百年后当昆仑山上下起雪的时候，这世上留给他又有什么呢？他终究是一个人，上天怜悯他却不曾心疼他，当心中信念坍塌的时候，我不知道他是不是和我一样有过这种迷茫？</p>
<p>&emsp;&emsp;昨天我和班里大部分的人喝了酒，目的单纯而简单，就是想感谢大家在这四年里对我的帮助，就是想记住和大家在一起的这段时光，我是一个随和的人，所以我不会强迫别人喝多少酒，因为喝酒就是一种助兴的形式而已，真正让我们铭记于心的不是这顿酒，而是我们彼此在各自的生命里出现过。或许我就是这样一个尚不成熟的人吧，或许以后我会变成让大家、让每一个人都喜欢的样子，或许我以后依然会是这个样子……生命中有太多的或许让人无法预料，可你的生命会是什么样子完全取决于你的选择，我不想为未来埋下太多的伏笔，我就是一个普通的、平凡的人，仅此而已……</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;毕业就像指尖流沙，而我是那从指尖流过的沙子。我不知道该怎样来总结我的大学，即使我努力地寻找、努力地回避，我依然觉得大学对我而言就是这样一个讽刺的过程，曾经努力地想要摆脱这个专业最后却留了下来，最初对这个专业的热情随着时间一天天地消逝，到最后却发现自己夹在某种缝隙中左右为难。</p>]]>
    
    </summary>
    
      <category term="人生" scheme="http://qinyuanpei.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="梦想" scheme="http://qinyuanpei.com/tags/%E6%A2%A6%E6%83%B3/"/>
    
      <category term="毕业" scheme="http://qinyuanpei.com/tags/%E6%AF%95%E4%B8%9A/"/>
    
      <category term="生活感悟" scheme="http://qinyuanpei.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unity3D游戏开发之MMD For Unity插件研究]]></title>
    <link href="http://qinyuanpei.com/2015/04/19/learning-of-mmd-for-unity3d/"/>
    <id>http://qinyuanpei.com/2015/04/19/learning-of-mmd-for-unity3d/</id>
    <published>2015-04-19T15:31:30.000Z</published>
    <updated>2015-10-09T09:24:22.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天想来说说MMD。MMD是MikuMikuDance的简称，是由日本人樋口优开发的一组3D动画制作软件。该软件最初希望能够将3D建模软件完成的VOCALOID的初音未来等角色模型制作成可以随着音乐跳舞的动画，因此称为MMD。作者在此基础上开发了能够将歌曲让初音未来等角色歌唱的MikuMikuVoice。2011年9月11日，樋口优宣布停止MMD新版本的开发工作。不过人们对制作MMD的热情丝毫没有减少，在动漫、游戏等领域总是能够不断看到MMD的影子。例如<a href="http://www.tudou.com/programs/view/qZtdjlAg34Q/?bid=03&amp;pid=2&amp;resourceId=51473713_03_05_02" target="_blank" rel="external">MMD/宇月</a>和<a href="http://www.tudou.com/programs/view/WxxZZOR3EEc/?resourceId=0_06_02_99" target="_blank" rel="external">千本樱/夏侯瑾轩</a>都是较为典型的MMD。</p>
<a id="more"></a>
<p>&emsp;&emsp;好了，相信现在大家都对MMD有了一定的了解了，作为一名单机游戏爱好者，我目前最为遗憾的两件事情：</p>
<ul>
<li>不会制作游戏MV(或者说视频)</li>
<li>不会制作MMD(因为我是个程序嘛)</li>
</ul>
<p>&emsp;&emsp;在我看来以同人形式去发掘一个作品中优秀的东西，这件事情本身就是一件让人觉得快乐的事情，因为可能某一个人和你有相同的想法，当它看到你的东西的时候，发觉你想表达的东西就是它想要表达的。我每次玩完一款游戏以后都会去网上搜集比较好的MV，因为我觉得随着人一天天地慢慢长大，有时候你发觉自己再没有时间去玩游戏的时候，通过看视频能让你想起很多的事情，有时候看着别人做的MV会哭，我便觉得当时的经历其实挺值的去回味的。好了，说了这么多毫不相干的事情，差点忘了今天的正事。首先我们来了解下一个完整的制作MMD的过程：</p>
<ul>
<li>使用Maya、Blender或者3DsMax等3D软件建模(或者从游戏中提取)</li>
<li>使用PMDEditor或者PMXEditor对模型进行绑骨、动作和表情制作等操作</li>
<li>将处理过的.pmd或者.pmx模型导入MikuMikuDance完成场景、音乐完成动画制作</li>
</ul>
<p>&emsp;&emsp;从这样一个过程我们了解到，制作MMD还是需要一定的技术门槛的，因为并不是每一个人都能够完成模型的绑骨、动画这些任务的。这篇文章不提供以上软件的下载和使用方法，因为我们接下来的内容基本与以上软件无关，我们的重点依然是Unity3D，因为我是一个游戏开发者嘛，哈哈。好了，下面的内容基于两点假设：</p>
<ul>
<li>你有一个PMD或者PMX模型</li>
<li>你有一个VMD的动作文件</li>
</ul>
<p>&emsp;&emsp;首先，第一步我们需要一个Unity3D插件MMD4Unity,将这个插件导入项目后，为了使整个项目结构较为清晰，我们将这个插件的文件夹命名为MMDPlugins。在MMDFiles文件中我们准备了三个文件:</p>
<ul>
<li>模型文件：初音.pmd</li>
<li>动作文件：动作1.vmd和动作2.vmd</li>
</ul>
<p>&emsp;&emsp;好了，现在我们注意到Unity3D菜单栏上会增加一个Plugin菜单项，我们单击这个菜单项会发现MMD Loader和XFile Importer这两个项目，这里我们选择MMD Loader这个菜单项：</p>
<p><img src="http://7wy477.com1.z0.glb.clouddn.com/imgs_MMD1.png" alt="MMD1"></p>
<p>&emsp;&emsp;这两个子菜单项的意义十分地明确了，PMD Loader负责加载PMD模型并将其转化为Unity3D可以识别的模型文件，VMD负责将一个动作文件套用到一个模型上。所以：</p>
<ul>
<li>1、通过PMD Loader打开加载PMD文件的窗口，建议这里将ShaderType设置为Default，因为如果使用MMD的Shader的话，待会转换出来的模型可能会存在找不到材质的问题。接下来我们点击Convert，稍等片刻就会在场景中看到一个模型(prefab)文件。</li>
</ul>
<p><img src="http://7wy477.com1.z0.glb.clouddn.com/imgs_MMD2.png" alt="MMD2"></p>
<p><img src="http://7wy477.com1.z0.glb.clouddn.com/imgs_MMD3.png" alt="MMD3"></p>
<ul>
<li>2、接下来通过VMD Loader打开加载VMD文件的窗口，选择场景中的模型文件和项目资源中的XMD动作文件，点击Convert，大概有1分钟多一点的样子就好了。此时我们选择场景中的模型文件，找到它的Animation组件，然后点击Animation右侧的按钮为其指定一个动画文件，因为刚刚我们已经为它添加了一个动作，所以我们可以很容易的在项目资源中找到名为初音_动作2的动画片段(AnimationClip)。</li>
</ul>
<p><img src="http://7wy477.com1.z0.glb.clouddn.com/imgs_MMD4.png" alt="MMD4"></p>
<p>&emsp;&emsp;好了，现在我们就来看看这个MMD的效果吧！</p>
<p><img src="http://7wy477.com1.z0.glb.clouddn.com/imgs_MMD5.gif" alt="MMD5"></p>
<p>&emsp;&emsp;哈哈，感觉效果还不错吧！</p>
<p>&emsp;&emsp;现在来说说我在使用这个插件过程中遇到的问题：</p>
<ul>
<li>在转换PMD模型的时候如果选择Default转换出的模型可以找到对应的材质，可是模型是错误的；如果选择MMDShader，转换出的模型会找不到对应得材质，比如说我在尝试转换下面这个模型的时候，因为MMD对模型的精细程度的要求，所以模型会被分得很细，因此像这个模型当贴图数目较少的时候，就没有办法自动对应贴图，所以这快目前还是个问题吧！</li>
<li>如果使用的是PMX模型，可以用PMEditor这个软件转换下格式，转成PMD格式后，后然后再按照本文的方法去做就可以了。</li>
<li>PMD转换出来的模型没有办法选择其中的某一个部分，因此在操作模型的时候可能会不太方便吧，以前都是选择某一部分然后给模型贴图，现在这招不行了啊。</li>
</ul>
<p>&emsp;&emsp;好了，今天的内容就是这样了，有什么问题大家给我留言哦！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;今天想来说说MMD。MMD是MikuMikuDance的简称，是由日本人樋口优开发的一组3D动画制作软件。该软件最初希望能够将3D建模软件完成的VOCALOID的初音未来等角色模型制作成可以随着音乐跳舞的动画，因此称为MMD。作者在此基础上开发了能够将歌曲让初音未来等角色歌唱的MikuMikuVoice。2011年9月11日，樋口优宣布停止MMD新版本的开发工作。不过人们对制作MMD的热情丝毫没有减少，在动漫、游戏等领域总是能够不断看到MMD的影子。例如<a href="http://www.tudou.com/programs/view/qZtdjlAg34Q/?bid=03&amp;pid=2&amp;resourceId=51473713_03_05_02">MMD/宇月</a>和<a href="http://www.tudou.com/programs/view/WxxZZOR3EEc/?resourceId=0_06_02_99">千本樱/夏侯瑾轩</a>都是较为典型的MMD。</p>]]>
    
    </summary>
    
      <category term="MMD" scheme="http://qinyuanpei.com/tags/MMD/"/>
    
      <category term="Unity3D" scheme="http://qinyuanpei.com/tags/Unity3D/"/>
    
      <category term="单机游戏" scheme="http://qinyuanpei.com/tags/%E5%8D%95%E6%9C%BA%E6%B8%B8%E6%88%8F/"/>
    
      <category term="单机游戏" scheme="http://qinyuanpei.com/categories/%E5%8D%95%E6%9C%BA%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Sublime Text3下安装Package Control]]></title>
    <link href="http://qinyuanpei.com/2015/04/17/the-usage-of-the-sublime-text3/"/>
    <id>http://qinyuanpei.com/2015/04/17/the-usage-of-the-sublime-text3/</id>
    <published>2015-04-17T04:54:41.000Z</published>
    <updated>2015-10-09T09:20:40.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;Sublime Text,是这个地球上最好的代码编辑器，没有之一。因为在过去的一段时间里，我使用的版本是SublimeText2，所以听说Sublime Text3版本稳定后，决定开始尝鲜。哈哈，我就是这么一个”喜新厌旧”的人！Sublime的强大不仅仅在它优雅的外表，更为重要的是她无可匹敌的扩展性，就是说我们可以通过插件来扩展它的功能，这对于一个喜欢DIY的人来说简直是无法抗拒的诱惑。不过在接收这些诱惑前，我们需要一个工具Package Control，它是Sublime里最为基础、最为重要的插件，好了，现在问题来了，Sublime怎么安装Package Control！</p>
<a id="more"></a>
<p>&emsp;&emsp;在Sublime Text2下我们可以通过CTRL+~打开控制台，然后输入代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2,os; </span><br><span class="line">pf=<span class="string">'Package Control.sublime-package'</span>; </span><br><span class="line">ipp = sublime.installed_packages_path(); </span><br><span class="line">os.makedirs( ipp ) </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ipp) </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">None</span>; </span><br><span class="line">urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); </span><br><span class="line">open( os.path.join( ipp, pf), <span class="string">'wb'</span> ).write( urllib2.urlopen( <span class="string">'http://sublime.wbond.net/'</span> </span><br><span class="line">+pf.replace( <span class="string">' '</span>,<span class="string">'%20'</span> )).read()); </span><br><span class="line">print( <span class="string">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;可是到了Sublime Text3下，因为版本不同的关系，内部API发生变化，因此需要使用新的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os; </span><br><span class="line">pf = <span class="string">'Package Control.sublime-package'</span>; </span><br><span class="line">ipp = sublime.installed_packages_path(); </span><br><span class="line">urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); </span><br><span class="line">open(os.path.join(ipp, pf), <span class="string">'wb'</span>).write(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> </span><br><span class="line">+ pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).read())</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;当代码因为某些原因无法正常工作的时候，我们可以手动安装Package Control：</p>
<ul>
<li><p>下载<a href="https://sublime.wbond.net/Package%20Control.sublime-package" target="_blank" rel="external">PackageControl</a>或者通过Github获取</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:wbond/package_control.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过Preferences-&gt;Browser Packages进入Installed Packages目录</p>
</li>
<li>重新启动Sublime，然后Enjoy it！</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;Sublime Text,是这个地球上最好的代码编辑器，没有之一。因为在过去的一段时间里，我使用的版本是SublimeText2，所以听说Sublime Text3版本稳定后，决定开始尝鲜。哈哈，我就是这么一个”喜新厌旧”的人！Sublime的强大不仅仅在它优雅的外表，更为重要的是她无可匹敌的扩展性，就是说我们可以通过插件来扩展它的功能，这对于一个喜欢DIY的人来说简直是无法抗拒的诱惑。不过在接收这些诱惑前，我们需要一个工具Package Control，它是Sublime里最为基础、最为重要的插件，好了，现在问题来了，Sublime怎么安装Package Control！</p>]]>
    
    </summary>
    
      <category term="IDE" scheme="http://qinyuanpei.com/tags/IDE/"/>
    
      <category term="Sublime" scheme="http://qinyuanpei.com/tags/Sublime/"/>
    
      <category term="编辑器" scheme="http://qinyuanpei.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="开发工具" scheme="http://qinyuanpei.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
